
GPS-lab-arnauta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011f94  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000548  08012134  08012134  00013134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801267c  0801267c  00014418  2**0
                  CONTENTS
  4 .ARM          00000008  0801267c  0801267c  0001367c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012684  08012684  00014418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012684  08012684  00013684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012688  08012688  00013688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000418  20000000  0801268c  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005384  20000418  08012aa4  00014418  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000579c  08012aa4  0001479c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014418  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021589  00000000  00000000  00014448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004782  00000000  00000000  000359d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001998  00000000  00000000  0003a158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013b2  00000000  00000000  0003baf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b38f  00000000  00000000  0003cea2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000215a6  00000000  00000000  00058231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000961c9  00000000  00000000  000797d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010f9a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071e0  00000000  00000000  0010f9e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00116bc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000418 	.word	0x20000418
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801211c 	.word	0x0801211c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000041c 	.word	0x2000041c
 80001dc:	0801211c 	.word	0x0801211c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <ILI9341_Draw_Char>:
#include "stm32f4xx_hal_spi.h"

#include "6x8_font.h"

void ILI9341_Draw_Char(char Character, uint16_t X, uint16_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 80005a0:	b590      	push	{r4, r7, lr}
 80005a2:	b089      	sub	sp, #36	@ 0x24
 80005a4:	af02      	add	r7, sp, #8
 80005a6:	4604      	mov	r4, r0
 80005a8:	4608      	mov	r0, r1
 80005aa:	4611      	mov	r1, r2
 80005ac:	461a      	mov	r2, r3
 80005ae:	4623      	mov	r3, r4
 80005b0:	71fb      	strb	r3, [r7, #7]
 80005b2:	4603      	mov	r3, r0
 80005b4:	80bb      	strh	r3, [r7, #4]
 80005b6:	460b      	mov	r3, r1
 80005b8:	807b      	strh	r3, [r7, #2]
 80005ba:	4613      	mov	r3, r2
 80005bc:	803b      	strh	r3, [r7, #0]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 80005c2:	7dfb      	ldrb	r3, [r7, #23]
 80005c4:	2b1f      	cmp	r3, #31
 80005c6:	d802      	bhi.n	80005ce <ILI9341_Draw_Char+0x2e>
        Character = 0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	71fb      	strb	r3, [r7, #7]
 80005cc:	e002      	b.n	80005d4 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 80005ce:	7dfb      	ldrb	r3, [r7, #23]
 80005d0:	3b20      	subs	r3, #32
 80005d2:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80005d4:	2300      	movs	r3, #0
 80005d6:	753b      	strb	r3, [r7, #20]
 80005d8:	e012      	b.n	8000600 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 80005da:	7dfa      	ldrb	r2, [r7, #23]
 80005dc:	7d38      	ldrb	r0, [r7, #20]
 80005de:	7d39      	ldrb	r1, [r7, #20]
 80005e0:	4c38      	ldr	r4, [pc, #224]	@ (80006c4 <ILI9341_Draw_Char+0x124>)
 80005e2:	4613      	mov	r3, r2
 80005e4:	005b      	lsls	r3, r3, #1
 80005e6:	4413      	add	r3, r2
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	4423      	add	r3, r4
 80005ec:	4403      	add	r3, r0
 80005ee:	781a      	ldrb	r2, [r3, #0]
 80005f0:	f101 0318 	add.w	r3, r1, #24
 80005f4:	443b      	add	r3, r7
 80005f6:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80005fa:	7d3b      	ldrb	r3, [r7, #20]
 80005fc:	3301      	adds	r3, #1
 80005fe:	753b      	strb	r3, [r7, #20]
 8000600:	7d3b      	ldrb	r3, [r7, #20]
 8000602:	2b05      	cmp	r3, #5
 8000604:	d9e9      	bls.n	80005da <ILI9341_Draw_Char+0x3a>
		}
		
	ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8000606:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000608:	461a      	mov	r2, r3
 800060a:	0052      	lsls	r2, r2, #1
 800060c:	4413      	add	r3, r2
 800060e:	005b      	lsls	r3, r3, #1
 8000610:	b29a      	uxth	r2, r3
 8000612:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000614:	00db      	lsls	r3, r3, #3
 8000616:	b29c      	uxth	r4, r3
 8000618:	8879      	ldrh	r1, [r7, #2]
 800061a:	88b8      	ldrh	r0, [r7, #4]
 800061c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800061e:	9300      	str	r3, [sp, #0]
 8000620:	4623      	mov	r3, r4
 8000622:	f000 fc39 	bl	8000e98 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++)
 8000626:	2300      	movs	r3, #0
 8000628:	757b      	strb	r3, [r7, #21]
 800062a:	e043      	b.n	80006b4 <ILI9341_Draw_Char+0x114>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 800062c:	2300      	movs	r3, #0
 800062e:	75bb      	strb	r3, [r7, #22]
 8000630:	e03a      	b.n	80006a8 <ILI9341_Draw_Char+0x108>
        {
            if (temp[j] & (1<<i))
 8000632:	7d7b      	ldrb	r3, [r7, #21]
 8000634:	3318      	adds	r3, #24
 8000636:	443b      	add	r3, r7
 8000638:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800063c:	461a      	mov	r2, r3
 800063e:	7dbb      	ldrb	r3, [r7, #22]
 8000640:	fa42 f303 	asr.w	r3, r2, r3
 8000644:	f003 0301 	and.w	r3, r3, #1
 8000648:	2b00      	cmp	r3, #0
 800064a:	d02a      	beq.n	80006a2 <ILI9341_Draw_Char+0x102>
            {
            	if(Size == 1)
 800064c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800064e:	2b01      	cmp	r3, #1
 8000650:	d10e      	bne.n	8000670 <ILI9341_Draw_Char+0xd0>
				{
            		ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8000652:	7d7b      	ldrb	r3, [r7, #21]
 8000654:	b29a      	uxth	r2, r3
 8000656:	88bb      	ldrh	r3, [r7, #4]
 8000658:	4413      	add	r3, r2
 800065a:	b298      	uxth	r0, r3
 800065c:	7dbb      	ldrb	r3, [r7, #22]
 800065e:	b29a      	uxth	r2, r3
 8000660:	887b      	ldrh	r3, [r7, #2]
 8000662:	4413      	add	r3, r2
 8000664:	b29b      	uxth	r3, r3
 8000666:	883a      	ldrh	r2, [r7, #0]
 8000668:	4619      	mov	r1, r3
 800066a:	f000 fb4d 	bl	8000d08 <ILI9341_Draw_Pixel>
 800066e:	e018      	b.n	80006a2 <ILI9341_Draw_Char+0x102>
				}
				else
				{
					ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8000670:	7d7b      	ldrb	r3, [r7, #21]
 8000672:	b29b      	uxth	r3, r3
 8000674:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000676:	fb12 f303 	smulbb	r3, r2, r3
 800067a:	b29a      	uxth	r2, r3
 800067c:	88bb      	ldrh	r3, [r7, #4]
 800067e:	4413      	add	r3, r2
 8000680:	b298      	uxth	r0, r3
 8000682:	7dbb      	ldrb	r3, [r7, #22]
 8000684:	b29b      	uxth	r3, r3
 8000686:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000688:	fb12 f303 	smulbb	r3, r2, r3
 800068c:	b29a      	uxth	r2, r3
 800068e:	887b      	ldrh	r3, [r7, #2]
 8000690:	4413      	add	r3, r2
 8000692:	b299      	uxth	r1, r3
 8000694:	8d3c      	ldrh	r4, [r7, #40]	@ 0x28
 8000696:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000698:	883b      	ldrh	r3, [r7, #0]
 800069a:	9300      	str	r3, [sp, #0]
 800069c:	4623      	mov	r3, r4
 800069e:	f000 fbfb 	bl	8000e98 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 80006a2:	7dbb      	ldrb	r3, [r7, #22]
 80006a4:	3301      	adds	r3, #1
 80006a6:	75bb      	strb	r3, [r7, #22]
 80006a8:	7dbb      	ldrb	r3, [r7, #22]
 80006aa:	2b07      	cmp	r3, #7
 80006ac:	d9c1      	bls.n	8000632 <ILI9341_Draw_Char+0x92>
    for (j=0; j<CHAR_WIDTH; j++)
 80006ae:	7d7b      	ldrb	r3, [r7, #21]
 80006b0:	3301      	adds	r3, #1
 80006b2:	757b      	strb	r3, [r7, #21]
 80006b4:	7d7b      	ldrb	r3, [r7, #21]
 80006b6:	2b05      	cmp	r3, #5
 80006b8:	d9b8      	bls.n	800062c <ILI9341_Draw_Char+0x8c>
				}
            }						
        }
    }
}
 80006ba:	bf00      	nop
 80006bc:	bf00      	nop
 80006be:	371c      	adds	r7, #28
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd90      	pop	{r4, r7, pc}
 80006c4:	080122e8 	.word	0x080122e8

080006c8 <ILI9341_Draw_Text>:

void ILI9341_Draw_Text(const char* Text, uint16_t X, uint16_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 80006c8:	b590      	push	{r4, r7, lr}
 80006ca:	b087      	sub	sp, #28
 80006cc:	af02      	add	r7, sp, #8
 80006ce:	60f8      	str	r0, [r7, #12]
 80006d0:	4608      	mov	r0, r1
 80006d2:	4611      	mov	r1, r2
 80006d4:	461a      	mov	r2, r3
 80006d6:	4603      	mov	r3, r0
 80006d8:	817b      	strh	r3, [r7, #10]
 80006da:	460b      	mov	r3, r1
 80006dc:	813b      	strh	r3, [r7, #8]
 80006de:	4613      	mov	r3, r2
 80006e0:	80fb      	strh	r3, [r7, #6]
    while (*Text)
 80006e2:	e016      	b.n	8000712 <ILI9341_Draw_Text+0x4a>
    {
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	1c5a      	adds	r2, r3, #1
 80006e8:	60fa      	str	r2, [r7, #12]
 80006ea:	7818      	ldrb	r0, [r3, #0]
 80006ec:	88fc      	ldrh	r4, [r7, #6]
 80006ee:	893a      	ldrh	r2, [r7, #8]
 80006f0:	8979      	ldrh	r1, [r7, #10]
 80006f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80006f4:	9301      	str	r3, [sp, #4]
 80006f6:	8c3b      	ldrh	r3, [r7, #32]
 80006f8:	9300      	str	r3, [sp, #0]
 80006fa:	4623      	mov	r3, r4
 80006fc:	f7ff ff50 	bl	80005a0 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8000700:	8c3b      	ldrh	r3, [r7, #32]
 8000702:	461a      	mov	r2, r3
 8000704:	0052      	lsls	r2, r2, #1
 8000706:	4413      	add	r3, r2
 8000708:	005b      	lsls	r3, r3, #1
 800070a:	b29a      	uxth	r2, r3
 800070c:	897b      	ldrh	r3, [r7, #10]
 800070e:	4413      	add	r3, r2
 8000710:	817b      	strh	r3, [r7, #10]
    while (*Text)
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d1e4      	bne.n	80006e4 <ILI9341_Draw_Text+0x1c>
    }
}
 800071a:	bf00      	nop
 800071c:	bf00      	nop
 800071e:	3714      	adds	r7, #20
 8000720:	46bd      	mov	sp, r7
 8000722:	bd90      	pop	{r4, r7, pc}

08000724 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;


void ILI9341_SPI_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
MX_SPI1_Init();
 8000728:	f006 fbcc 	bl	8006ec4 <MX_SPI1_Init>
MX_GPIO_Init();
 800072c:	f006 fc4a 	bl	8006fc4 <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000730:	2200      	movs	r2, #0
 8000732:	2110      	movs	r1, #16
 8000734:	4802      	ldr	r0, [pc, #8]	@ (8000740 <ILI9341_SPI_Init+0x1c>)
 8000736:	f007 fedd 	bl	80084f4 <HAL_GPIO_WritePin>
}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40020000 	.word	0x40020000

08000744 <ILI9341_SPI_Send>:


void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 800074e:	1df9      	adds	r1, r7, #7
 8000750:	2301      	movs	r3, #1
 8000752:	2201      	movs	r2, #1
 8000754:	4803      	ldr	r0, [pc, #12]	@ (8000764 <ILI9341_SPI_Send+0x20>)
 8000756:	f00b fa9c 	bl	800bc92 <HAL_SPI_Transmit>
}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000914 	.word	0x20000914

08000768 <ILI9341_Write_Command>:


void ILI9341_Write_Command(uint8_t Command)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	2110      	movs	r1, #16
 8000776:	480a      	ldr	r0, [pc, #40]	@ (80007a0 <ILI9341_Write_Command+0x38>)
 8000778:	f007 febc 	bl	80084f4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800077c:	2200      	movs	r2, #0
 800077e:	2102      	movs	r1, #2
 8000780:	4807      	ldr	r0, [pc, #28]	@ (80007a0 <ILI9341_Write_Command+0x38>)
 8000782:	f007 feb7 	bl	80084f4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff ffdb 	bl	8000744 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 800078e:	2201      	movs	r2, #1
 8000790:	2110      	movs	r1, #16
 8000792:	4803      	ldr	r0, [pc, #12]	@ (80007a0 <ILI9341_Write_Command+0x38>)
 8000794:	f007 feae 	bl	80084f4 <HAL_GPIO_WritePin>
}
 8000798:	bf00      	nop
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40020000 	.word	0x40020000

080007a4 <ILI9341_Write_Data>:


void ILI9341_Write_Data(uint8_t Data)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80007ae:	2201      	movs	r2, #1
 80007b0:	2102      	movs	r1, #2
 80007b2:	480a      	ldr	r0, [pc, #40]	@ (80007dc <ILI9341_Write_Data+0x38>)
 80007b4:	f007 fe9e 	bl	80084f4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80007b8:	2200      	movs	r2, #0
 80007ba:	2110      	movs	r1, #16
 80007bc:	4807      	ldr	r0, [pc, #28]	@ (80007dc <ILI9341_Write_Data+0x38>)
 80007be:	f007 fe99 	bl	80084f4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff ffbd 	bl	8000744 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80007ca:	2201      	movs	r2, #1
 80007cc:	2110      	movs	r1, #16
 80007ce:	4803      	ldr	r0, [pc, #12]	@ (80007dc <ILI9341_Write_Data+0x38>)
 80007d0:	f007 fe90 	bl	80084f4 <HAL_GPIO_WritePin>
}
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40020000 	.word	0x40020000

080007e0 <ILI9341_Set_Address>:


void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80007e0:	b590      	push	{r4, r7, lr}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4604      	mov	r4, r0
 80007e8:	4608      	mov	r0, r1
 80007ea:	4611      	mov	r1, r2
 80007ec:	461a      	mov	r2, r3
 80007ee:	4623      	mov	r3, r4
 80007f0:	80fb      	strh	r3, [r7, #6]
 80007f2:	4603      	mov	r3, r0
 80007f4:	80bb      	strh	r3, [r7, #4]
 80007f6:	460b      	mov	r3, r1
 80007f8:	807b      	strh	r3, [r7, #2]
 80007fa:	4613      	mov	r3, r2
 80007fc:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 80007fe:	202a      	movs	r0, #42	@ 0x2a
 8000800:	f7ff ffb2 	bl	8000768 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8000804:	88fb      	ldrh	r3, [r7, #6]
 8000806:	0a1b      	lsrs	r3, r3, #8
 8000808:	b29b      	uxth	r3, r3
 800080a:	b2db      	uxtb	r3, r3
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff ffc9 	bl	80007a4 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8000812:	88fb      	ldrh	r3, [r7, #6]
 8000814:	b2db      	uxtb	r3, r3
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff ffc4 	bl	80007a4 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 800081c:	887b      	ldrh	r3, [r7, #2]
 800081e:	0a1b      	lsrs	r3, r3, #8
 8000820:	b29b      	uxth	r3, r3
 8000822:	b2db      	uxtb	r3, r3
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff ffbd 	bl	80007a4 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 800082a:	887b      	ldrh	r3, [r7, #2]
 800082c:	b2db      	uxtb	r3, r3
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff ffb8 	bl	80007a4 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8000834:	202b      	movs	r0, #43	@ 0x2b
 8000836:	f7ff ff97 	bl	8000768 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 800083a:	88bb      	ldrh	r3, [r7, #4]
 800083c:	0a1b      	lsrs	r3, r3, #8
 800083e:	b29b      	uxth	r3, r3
 8000840:	b2db      	uxtb	r3, r3
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff ffae 	bl	80007a4 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8000848:	88bb      	ldrh	r3, [r7, #4]
 800084a:	b2db      	uxtb	r3, r3
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff ffa9 	bl	80007a4 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8000852:	883b      	ldrh	r3, [r7, #0]
 8000854:	0a1b      	lsrs	r3, r3, #8
 8000856:	b29b      	uxth	r3, r3
 8000858:	b2db      	uxtb	r3, r3
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff ffa2 	bl	80007a4 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8000860:	883b      	ldrh	r3, [r7, #0]
 8000862:	b2db      	uxtb	r3, r3
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ff9d 	bl	80007a4 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 800086a:	202c      	movs	r0, #44	@ 0x2c
 800086c:	f7ff ff7c 	bl	8000768 <ILI9341_Write_Command>
}
 8000870:	bf00      	nop
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	bd90      	pop	{r4, r7, pc}

08000878 <ILI9341_Reset>:


void ILI9341_Reset(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 800087c:	2201      	movs	r2, #1
 800087e:	2101      	movs	r1, #1
 8000880:	480a      	ldr	r0, [pc, #40]	@ (80008ac <ILI9341_Reset+0x34>)
 8000882:	f007 fe37 	bl	80084f4 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8000886:	20c8      	movs	r0, #200	@ 0xc8
 8000888:	f006 ff78 	bl	800777c <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800088c:	2200      	movs	r2, #0
 800088e:	2110      	movs	r1, #16
 8000890:	4806      	ldr	r0, [pc, #24]	@ (80008ac <ILI9341_Reset+0x34>)
 8000892:	f007 fe2f 	bl	80084f4 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8000896:	20c8      	movs	r0, #200	@ 0xc8
 8000898:	f006 ff70 	bl	800777c <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 800089c:	2201      	movs	r2, #1
 800089e:	2101      	movs	r1, #1
 80008a0:	4802      	ldr	r0, [pc, #8]	@ (80008ac <ILI9341_Reset+0x34>)
 80008a2:	f007 fe27 	bl	80084f4 <HAL_GPIO_WritePin>
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40020000 	.word	0x40020000

080008b0 <ILI9341_Set_Rotation>:


void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 80008be:	2036      	movs	r0, #54	@ 0x36
 80008c0:	f7ff ff52 	bl	8000768 <ILI9341_Write_Command>
HAL_Delay(1);
 80008c4:	2001      	movs	r0, #1
 80008c6:	f006 ff59 	bl	800777c <HAL_Delay>
	
switch(screen_rotation) 
 80008ca:	7bfb      	ldrb	r3, [r7, #15]
 80008cc:	2b03      	cmp	r3, #3
 80008ce:	d837      	bhi.n	8000940 <ILI9341_Set_Rotation+0x90>
 80008d0:	a201      	add	r2, pc, #4	@ (adr r2, 80008d8 <ILI9341_Set_Rotation+0x28>)
 80008d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008d6:	bf00      	nop
 80008d8:	080008e9 	.word	0x080008e9
 80008dc:	080008ff 	.word	0x080008ff
 80008e0:	08000915 	.word	0x08000915
 80008e4:	0800092b 	.word	0x0800092b
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 80008e8:	2048      	movs	r0, #72	@ 0x48
 80008ea:	f7ff ff5b 	bl	80007a4 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 80008ee:	4b17      	ldr	r3, [pc, #92]	@ (800094c <ILI9341_Set_Rotation+0x9c>)
 80008f0:	22f0      	movs	r2, #240	@ 0xf0
 80008f2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80008f4:	4b16      	ldr	r3, [pc, #88]	@ (8000950 <ILI9341_Set_Rotation+0xa0>)
 80008f6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80008fa:	801a      	strh	r2, [r3, #0]
			break;
 80008fc:	e021      	b.n	8000942 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 80008fe:	2028      	movs	r0, #40	@ 0x28
 8000900:	f7ff ff50 	bl	80007a4 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000904:	4b11      	ldr	r3, [pc, #68]	@ (800094c <ILI9341_Set_Rotation+0x9c>)
 8000906:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800090a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800090c:	4b10      	ldr	r3, [pc, #64]	@ (8000950 <ILI9341_Set_Rotation+0xa0>)
 800090e:	22f0      	movs	r2, #240	@ 0xf0
 8000910:	801a      	strh	r2, [r3, #0]
			break;
 8000912:	e016      	b.n	8000942 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8000914:	2088      	movs	r0, #136	@ 0x88
 8000916:	f7ff ff45 	bl	80007a4 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 800091a:	4b0c      	ldr	r3, [pc, #48]	@ (800094c <ILI9341_Set_Rotation+0x9c>)
 800091c:	22f0      	movs	r2, #240	@ 0xf0
 800091e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000920:	4b0b      	ldr	r3, [pc, #44]	@ (8000950 <ILI9341_Set_Rotation+0xa0>)
 8000922:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000926:	801a      	strh	r2, [r3, #0]
			break;
 8000928:	e00b      	b.n	8000942 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 800092a:	20e8      	movs	r0, #232	@ 0xe8
 800092c:	f7ff ff3a 	bl	80007a4 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000930:	4b06      	ldr	r3, [pc, #24]	@ (800094c <ILI9341_Set_Rotation+0x9c>)
 8000932:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000936:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000938:	4b05      	ldr	r3, [pc, #20]	@ (8000950 <ILI9341_Set_Rotation+0xa0>)
 800093a:	22f0      	movs	r2, #240	@ 0xf0
 800093c:	801a      	strh	r2, [r3, #0]
			break;
 800093e:	e000      	b.n	8000942 <ILI9341_Set_Rotation+0x92>
		default:
			break;
 8000940:	bf00      	nop
	}
}
 8000942:	bf00      	nop
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000002 	.word	0x20000002
 8000950:	20000000 	.word	0x20000000

08000954 <ILI9341_Enable>:


void ILI9341_Enable(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8000958:	2201      	movs	r2, #1
 800095a:	2101      	movs	r1, #1
 800095c:	4802      	ldr	r0, [pc, #8]	@ (8000968 <ILI9341_Enable+0x14>)
 800095e:	f007 fdc9 	bl	80084f4 <HAL_GPIO_WritePin>
}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40020000 	.word	0x40020000

0800096c <ILI9341_Init>:


void ILI9341_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8000970:	f7ff fff0 	bl	8000954 <ILI9341_Enable>
ILI9341_SPI_Init();
 8000974:	f7ff fed6 	bl	8000724 <ILI9341_SPI_Init>
ILI9341_Reset();
 8000978:	f7ff ff7e 	bl	8000878 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 800097c:	2001      	movs	r0, #1
 800097e:	f7ff fef3 	bl	8000768 <ILI9341_Write_Command>
HAL_Delay(1000);
 8000982:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000986:	f006 fef9 	bl	800777c <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 800098a:	20cb      	movs	r0, #203	@ 0xcb
 800098c:	f7ff feec 	bl	8000768 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8000990:	2039      	movs	r0, #57	@ 0x39
 8000992:	f7ff ff07 	bl	80007a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8000996:	202c      	movs	r0, #44	@ 0x2c
 8000998:	f7ff ff04 	bl	80007a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800099c:	2000      	movs	r0, #0
 800099e:	f7ff ff01 	bl	80007a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 80009a2:	2034      	movs	r0, #52	@ 0x34
 80009a4:	f7ff fefe 	bl	80007a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 80009a8:	2002      	movs	r0, #2
 80009aa:	f7ff fefb 	bl	80007a4 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 80009ae:	20cf      	movs	r0, #207	@ 0xcf
 80009b0:	f7ff feda 	bl	8000768 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80009b4:	2000      	movs	r0, #0
 80009b6:	f7ff fef5 	bl	80007a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80009ba:	20c1      	movs	r0, #193	@ 0xc1
 80009bc:	f7ff fef2 	bl	80007a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 80009c0:	2030      	movs	r0, #48	@ 0x30
 80009c2:	f7ff feef 	bl	80007a4 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 80009c6:	20e8      	movs	r0, #232	@ 0xe8
 80009c8:	f7ff fece 	bl	8000768 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 80009cc:	2085      	movs	r0, #133	@ 0x85
 80009ce:	f7ff fee9 	bl	80007a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80009d2:	2000      	movs	r0, #0
 80009d4:	f7ff fee6 	bl	80007a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 80009d8:	2078      	movs	r0, #120	@ 0x78
 80009da:	f7ff fee3 	bl	80007a4 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 80009de:	20ea      	movs	r0, #234	@ 0xea
 80009e0:	f7ff fec2 	bl	8000768 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80009e4:	2000      	movs	r0, #0
 80009e6:	f7ff fedd 	bl	80007a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80009ea:	2000      	movs	r0, #0
 80009ec:	f7ff feda 	bl	80007a4 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 80009f0:	20ed      	movs	r0, #237	@ 0xed
 80009f2:	f7ff feb9 	bl	8000768 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 80009f6:	2064      	movs	r0, #100	@ 0x64
 80009f8:	f7ff fed4 	bl	80007a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80009fc:	2003      	movs	r0, #3
 80009fe:	f7ff fed1 	bl	80007a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8000a02:	2012      	movs	r0, #18
 8000a04:	f7ff fece 	bl	80007a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8000a08:	2081      	movs	r0, #129	@ 0x81
 8000a0a:	f7ff fecb 	bl	80007a4 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8000a0e:	20f7      	movs	r0, #247	@ 0xf7
 8000a10:	f7ff feaa 	bl	8000768 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8000a14:	2020      	movs	r0, #32
 8000a16:	f7ff fec5 	bl	80007a4 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8000a1a:	20c0      	movs	r0, #192	@ 0xc0
 8000a1c:	f7ff fea4 	bl	8000768 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8000a20:	2023      	movs	r0, #35	@ 0x23
 8000a22:	f7ff febf 	bl	80007a4 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8000a26:	20c1      	movs	r0, #193	@ 0xc1
 8000a28:	f7ff fe9e 	bl	8000768 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8000a2c:	2010      	movs	r0, #16
 8000a2e:	f7ff feb9 	bl	80007a4 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8000a32:	20c5      	movs	r0, #197	@ 0xc5
 8000a34:	f7ff fe98 	bl	8000768 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8000a38:	203e      	movs	r0, #62	@ 0x3e
 8000a3a:	f7ff feb3 	bl	80007a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8000a3e:	2028      	movs	r0, #40	@ 0x28
 8000a40:	f7ff feb0 	bl	80007a4 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8000a44:	20c7      	movs	r0, #199	@ 0xc7
 8000a46:	f7ff fe8f 	bl	8000768 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8000a4a:	2086      	movs	r0, #134	@ 0x86
 8000a4c:	f7ff feaa 	bl	80007a4 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8000a50:	2036      	movs	r0, #54	@ 0x36
 8000a52:	f7ff fe89 	bl	8000768 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8000a56:	2048      	movs	r0, #72	@ 0x48
 8000a58:	f7ff fea4 	bl	80007a4 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8000a5c:	203a      	movs	r0, #58	@ 0x3a
 8000a5e:	f7ff fe83 	bl	8000768 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8000a62:	2055      	movs	r0, #85	@ 0x55
 8000a64:	f7ff fe9e 	bl	80007a4 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8000a68:	20b1      	movs	r0, #177	@ 0xb1
 8000a6a:	f7ff fe7d 	bl	8000768 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000a6e:	2000      	movs	r0, #0
 8000a70:	f7ff fe98 	bl	80007a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8000a74:	2018      	movs	r0, #24
 8000a76:	f7ff fe95 	bl	80007a4 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8000a7a:	20b6      	movs	r0, #182	@ 0xb6
 8000a7c:	f7ff fe74 	bl	8000768 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8000a80:	2008      	movs	r0, #8
 8000a82:	f7ff fe8f 	bl	80007a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8000a86:	2082      	movs	r0, #130	@ 0x82
 8000a88:	f7ff fe8c 	bl	80007a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8000a8c:	2027      	movs	r0, #39	@ 0x27
 8000a8e:	f7ff fe89 	bl	80007a4 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8000a92:	20f2      	movs	r0, #242	@ 0xf2
 8000a94:	f7ff fe68 	bl	8000768 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f7ff fe83 	bl	80007a4 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8000a9e:	2026      	movs	r0, #38	@ 0x26
 8000aa0:	f7ff fe62 	bl	8000768 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	f7ff fe7d 	bl	80007a4 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8000aaa:	20e0      	movs	r0, #224	@ 0xe0
 8000aac:	f7ff fe5c 	bl	8000768 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8000ab0:	200f      	movs	r0, #15
 8000ab2:	f7ff fe77 	bl	80007a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000ab6:	2031      	movs	r0, #49	@ 0x31
 8000ab8:	f7ff fe74 	bl	80007a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8000abc:	202b      	movs	r0, #43	@ 0x2b
 8000abe:	f7ff fe71 	bl	80007a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000ac2:	200c      	movs	r0, #12
 8000ac4:	f7ff fe6e 	bl	80007a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000ac8:	200e      	movs	r0, #14
 8000aca:	f7ff fe6b 	bl	80007a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000ace:	2008      	movs	r0, #8
 8000ad0:	f7ff fe68 	bl	80007a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8000ad4:	204e      	movs	r0, #78	@ 0x4e
 8000ad6:	f7ff fe65 	bl	80007a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8000ada:	20f1      	movs	r0, #241	@ 0xf1
 8000adc:	f7ff fe62 	bl	80007a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8000ae0:	2037      	movs	r0, #55	@ 0x37
 8000ae2:	f7ff fe5f 	bl	80007a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000ae6:	2007      	movs	r0, #7
 8000ae8:	f7ff fe5c 	bl	80007a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8000aec:	2010      	movs	r0, #16
 8000aee:	f7ff fe59 	bl	80007a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000af2:	2003      	movs	r0, #3
 8000af4:	f7ff fe56 	bl	80007a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000af8:	200e      	movs	r0, #14
 8000afa:	f7ff fe53 	bl	80007a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8000afe:	2009      	movs	r0, #9
 8000b00:	f7ff fe50 	bl	80007a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000b04:	2000      	movs	r0, #0
 8000b06:	f7ff fe4d 	bl	80007a4 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8000b0a:	20e1      	movs	r0, #225	@ 0xe1
 8000b0c:	f7ff fe2c 	bl	8000768 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000b10:	2000      	movs	r0, #0
 8000b12:	f7ff fe47 	bl	80007a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000b16:	200e      	movs	r0, #14
 8000b18:	f7ff fe44 	bl	80007a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8000b1c:	2014      	movs	r0, #20
 8000b1e:	f7ff fe41 	bl	80007a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000b22:	2003      	movs	r0, #3
 8000b24:	f7ff fe3e 	bl	80007a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8000b28:	2011      	movs	r0, #17
 8000b2a:	f7ff fe3b 	bl	80007a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000b2e:	2007      	movs	r0, #7
 8000b30:	f7ff fe38 	bl	80007a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000b34:	2031      	movs	r0, #49	@ 0x31
 8000b36:	f7ff fe35 	bl	80007a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8000b3a:	20c1      	movs	r0, #193	@ 0xc1
 8000b3c:	f7ff fe32 	bl	80007a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8000b40:	2048      	movs	r0, #72	@ 0x48
 8000b42:	f7ff fe2f 	bl	80007a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000b46:	2008      	movs	r0, #8
 8000b48:	f7ff fe2c 	bl	80007a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000b4c:	200f      	movs	r0, #15
 8000b4e:	f7ff fe29 	bl	80007a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000b52:	200c      	movs	r0, #12
 8000b54:	f7ff fe26 	bl	80007a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000b58:	2031      	movs	r0, #49	@ 0x31
 8000b5a:	f7ff fe23 	bl	80007a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8000b5e:	2036      	movs	r0, #54	@ 0x36
 8000b60:	f7ff fe20 	bl	80007a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000b64:	200f      	movs	r0, #15
 8000b66:	f7ff fe1d 	bl	80007a4 <ILI9341_Write_Data>

ILI9341_Write_Command(0x11);
 8000b6a:	2011      	movs	r0, #17
 8000b6c:	f7ff fdfc 	bl	8000768 <ILI9341_Write_Command>
HAL_Delay(120);
 8000b70:	2078      	movs	r0, #120	@ 0x78
 8000b72:	f006 fe03 	bl	800777c <HAL_Delay>

ILI9341_Write_Command(0x29);
 8000b76:	2029      	movs	r0, #41	@ 0x29
 8000b78:	f7ff fdf6 	bl	8000768 <ILI9341_Write_Command>

ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	f7ff fe97 	bl	80008b0 <ILI9341_Set_Rotation>
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <ILI9341_Draw_Colour_Burst>:
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
}


void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8000b88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b8c:	b08d      	sub	sp, #52	@ 0x34
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	4603      	mov	r3, r0
 8000b92:	6039      	str	r1, [r7, #0]
 8000b94:	80fb      	strh	r3, [r7, #6]
 8000b96:	466b      	mov	r3, sp
 8000b98:	461e      	mov	r6, r3
uint32_t Buffer_Size = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
if((Size*2) < BURST_MAX_SIZE)
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000ba6:	d202      	bcs.n	8000bae <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000bac:	e002      	b.n	8000bb4 <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8000bae:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	2102      	movs	r1, #2
 8000bb8:	483e      	ldr	r0, [pc, #248]	@ (8000cb4 <ILI9341_Draw_Colour_Burst+0x12c>)
 8000bba:	f007 fc9b 	bl	80084f4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2110      	movs	r1, #16
 8000bc2:	483c      	ldr	r0, [pc, #240]	@ (8000cb4 <ILI9341_Draw_Colour_Burst+0x12c>)
 8000bc4:	f007 fc96 	bl	80084f4 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8000bc8:	88fb      	ldrh	r3, [r7, #6]
 8000bca:	0a1b      	lsrs	r3, r3, #8
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
unsigned char burst_buffer[Buffer_Size];
 8000bd2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	61fb      	str	r3, [r7, #28]
 8000bda:	2300      	movs	r3, #0
 8000bdc:	4688      	mov	r8, r1
 8000bde:	4699      	mov	r9, r3
 8000be0:	f04f 0200 	mov.w	r2, #0
 8000be4:	f04f 0300 	mov.w	r3, #0
 8000be8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000bec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000bf0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	460c      	mov	r4, r1
 8000bf8:	461d      	mov	r5, r3
 8000bfa:	f04f 0200 	mov.w	r2, #0
 8000bfe:	f04f 0300 	mov.w	r3, #0
 8000c02:	00eb      	lsls	r3, r5, #3
 8000c04:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000c08:	00e2      	lsls	r2, r4, #3
 8000c0a:	1dcb      	adds	r3, r1, #7
 8000c0c:	08db      	lsrs	r3, r3, #3
 8000c0e:	00db      	lsls	r3, r3, #3
 8000c10:	ebad 0d03 	sub.w	sp, sp, r3
 8000c14:	466b      	mov	r3, sp
 8000c16:	3300      	adds	r3, #0
 8000c18:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000c1e:	e00e      	b.n	8000c3e <ILI9341_Draw_Colour_Burst+0xb6>
	{
		burst_buffer[j] = 	chifted;
 8000c20:	69ba      	ldr	r2, [r7, #24]
 8000c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c24:	4413      	add	r3, r2
 8000c26:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000c2a:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8000c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c2e:	3301      	adds	r3, #1
 8000c30:	88fa      	ldrh	r2, [r7, #6]
 8000c32:	b2d1      	uxtb	r1, r2
 8000c34:	69ba      	ldr	r2, [r7, #24]
 8000c36:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c3a:	3302      	adds	r3, #2
 8000c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000c3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d3ec      	bcc.n	8000c20 <ILI9341_Draw_Colour_Burst+0x98>
	}

uint32_t Sending_Size = Size*2;
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8000c4c:	697a      	ldr	r2, [r7, #20]
 8000c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c54:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000c5a:	fbb3 f2f2 	udiv	r2, r3, r2
 8000c5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000c60:	fb01 f202 	mul.w	r2, r1, r2
 8000c64:	1a9b      	subs	r3, r3, r2
 8000c66:	60fb      	str	r3, [r7, #12]


if(Sending_in_Block != 0)
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d010      	beq.n	8000c90 <ILI9341_Draw_Colour_Burst+0x108>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000c6e:	2300      	movs	r3, #0
 8000c70:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c72:	e009      	b.n	8000c88 <ILI9341_Draw_Colour_Burst+0x100>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8000c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c76:	b29a      	uxth	r2, r3
 8000c78:	230a      	movs	r3, #10
 8000c7a:	69b9      	ldr	r1, [r7, #24]
 8000c7c:	480e      	ldr	r0, [pc, #56]	@ (8000cb8 <ILI9341_Draw_Colour_Burst+0x130>)
 8000c7e:	f00b f808 	bl	800bc92 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c84:	3301      	adds	r3, #1
 8000c86:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d3f1      	bcc.n	8000c74 <ILI9341_Draw_Colour_Burst+0xec>
		}
}


HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	b29a      	uxth	r2, r3
 8000c94:	230a      	movs	r3, #10
 8000c96:	69b9      	ldr	r1, [r7, #24]
 8000c98:	4807      	ldr	r0, [pc, #28]	@ (8000cb8 <ILI9341_Draw_Colour_Burst+0x130>)
 8000c9a:	f00a fffa 	bl	800bc92 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	2110      	movs	r1, #16
 8000ca2:	4804      	ldr	r0, [pc, #16]	@ (8000cb4 <ILI9341_Draw_Colour_Burst+0x12c>)
 8000ca4:	f007 fc26 	bl	80084f4 <HAL_GPIO_WritePin>
 8000ca8:	46b5      	mov	sp, r6
}
 8000caa:	bf00      	nop
 8000cac:	3734      	adds	r7, #52	@ 0x34
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000cb4:	40020000 	.word	0x40020000
 8000cb8:	20000914 	.word	0x20000914

08000cbc <ILI9341_Fill_Screen>:


void ILI9341_Fill_Screen(uint16_t Colour)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d00 <ILI9341_Fill_Screen+0x44>)
 8000cc8:	881b      	ldrh	r3, [r3, #0]
 8000cca:	b29a      	uxth	r2, r3
 8000ccc:	4b0d      	ldr	r3, [pc, #52]	@ (8000d04 <ILI9341_Fill_Screen+0x48>)
 8000cce:	881b      	ldrh	r3, [r3, #0]
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	f7ff fd83 	bl	80007e0 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8000cda:	4b09      	ldr	r3, [pc, #36]	@ (8000d00 <ILI9341_Fill_Screen+0x44>)
 8000cdc:	881b      	ldrh	r3, [r3, #0]
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4b08      	ldr	r3, [pc, #32]	@ (8000d04 <ILI9341_Fill_Screen+0x48>)
 8000ce4:	881b      	ldrh	r3, [r3, #0]
 8000ce6:	b29b      	uxth	r3, r3
 8000ce8:	fb02 f303 	mul.w	r3, r2, r3
 8000cec:	461a      	mov	r2, r3
 8000cee:	88fb      	ldrh	r3, [r7, #6]
 8000cf0:	4611      	mov	r1, r2
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff ff48 	bl	8000b88 <ILI9341_Draw_Colour_Burst>
}
 8000cf8:	bf00      	nop
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20000002 	.word	0x20000002
 8000d04:	20000000 	.word	0x20000000

08000d08 <ILI9341_Draw_Pixel>:


void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	80fb      	strh	r3, [r7, #6]
 8000d12:	460b      	mov	r3, r1
 8000d14:	80bb      	strh	r3, [r7, #4]
 8000d16:	4613      	mov	r3, r2
 8000d18:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8000d1a:	4b5b      	ldr	r3, [pc, #364]	@ (8000e88 <ILI9341_Draw_Pixel+0x180>)
 8000d1c:	881b      	ldrh	r3, [r3, #0]
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	88fa      	ldrh	r2, [r7, #6]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	f080 80ac 	bcs.w	8000e80 <ILI9341_Draw_Pixel+0x178>
 8000d28:	4b58      	ldr	r3, [pc, #352]	@ (8000e8c <ILI9341_Draw_Pixel+0x184>)
 8000d2a:	881b      	ldrh	r3, [r3, #0]
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	88ba      	ldrh	r2, [r7, #4]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	f080 80a5 	bcs.w	8000e80 <ILI9341_Draw_Pixel+0x178>
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000d36:	2200      	movs	r2, #0
 8000d38:	2102      	movs	r1, #2
 8000d3a:	4855      	ldr	r0, [pc, #340]	@ (8000e90 <ILI9341_Draw_Pixel+0x188>)
 8000d3c:	f007 fbda 	bl	80084f4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000d40:	2200      	movs	r2, #0
 8000d42:	2110      	movs	r1, #16
 8000d44:	4852      	ldr	r0, [pc, #328]	@ (8000e90 <ILI9341_Draw_Pixel+0x188>)
 8000d46:	f007 fbd5 	bl	80084f4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8000d4a:	202a      	movs	r0, #42	@ 0x2a
 8000d4c:	f7ff fcfa 	bl	8000744 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000d50:	2201      	movs	r2, #1
 8000d52:	2102      	movs	r1, #2
 8000d54:	484e      	ldr	r0, [pc, #312]	@ (8000e90 <ILI9341_Draw_Pixel+0x188>)
 8000d56:	f007 fbcd 	bl	80084f4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	2110      	movs	r1, #16
 8000d5e:	484c      	ldr	r0, [pc, #304]	@ (8000e90 <ILI9341_Draw_Pixel+0x188>)
 8000d60:	f007 fbc8 	bl	80084f4 <HAL_GPIO_WritePin>

HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8000d64:	2200      	movs	r2, #0
 8000d66:	2110      	movs	r1, #16
 8000d68:	4849      	ldr	r0, [pc, #292]	@ (8000e90 <ILI9341_Draw_Pixel+0x188>)
 8000d6a:	f007 fbc3 	bl	80084f4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8000d6e:	88fb      	ldrh	r3, [r7, #6]
 8000d70:	0a1b      	lsrs	r3, r3, #8
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	753b      	strb	r3, [r7, #20]
 8000d78:	88fb      	ldrh	r3, [r7, #6]
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	757b      	strb	r3, [r7, #21]
 8000d7e:	88fb      	ldrh	r3, [r7, #6]
 8000d80:	3301      	adds	r3, #1
 8000d82:	121b      	asrs	r3, r3, #8
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	75bb      	strb	r3, [r7, #22]
 8000d88:	88fb      	ldrh	r3, [r7, #6]
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8000d92:	f107 0114 	add.w	r1, r7, #20
 8000d96:	2301      	movs	r3, #1
 8000d98:	2204      	movs	r2, #4
 8000d9a:	483e      	ldr	r0, [pc, #248]	@ (8000e94 <ILI9341_Draw_Pixel+0x18c>)
 8000d9c:	f00a ff79 	bl	800bc92 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000da0:	2201      	movs	r2, #1
 8000da2:	2110      	movs	r1, #16
 8000da4:	483a      	ldr	r0, [pc, #232]	@ (8000e90 <ILI9341_Draw_Pixel+0x188>)
 8000da6:	f007 fba5 	bl	80084f4 <HAL_GPIO_WritePin>

HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000daa:	2200      	movs	r2, #0
 8000dac:	2102      	movs	r1, #2
 8000dae:	4838      	ldr	r0, [pc, #224]	@ (8000e90 <ILI9341_Draw_Pixel+0x188>)
 8000db0:	f007 fba0 	bl	80084f4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8000db4:	2200      	movs	r2, #0
 8000db6:	2110      	movs	r1, #16
 8000db8:	4835      	ldr	r0, [pc, #212]	@ (8000e90 <ILI9341_Draw_Pixel+0x188>)
 8000dba:	f007 fb9b 	bl	80084f4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8000dbe:	202b      	movs	r0, #43	@ 0x2b
 8000dc0:	f7ff fcc0 	bl	8000744 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	2102      	movs	r1, #2
 8000dc8:	4831      	ldr	r0, [pc, #196]	@ (8000e90 <ILI9341_Draw_Pixel+0x188>)
 8000dca:	f007 fb93 	bl	80084f4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8000dce:	2201      	movs	r2, #1
 8000dd0:	2110      	movs	r1, #16
 8000dd2:	482f      	ldr	r0, [pc, #188]	@ (8000e90 <ILI9341_Draw_Pixel+0x188>)
 8000dd4:	f007 fb8e 	bl	80084f4 <HAL_GPIO_WritePin>

HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2110      	movs	r1, #16
 8000ddc:	482c      	ldr	r0, [pc, #176]	@ (8000e90 <ILI9341_Draw_Pixel+0x188>)
 8000dde:	f007 fb89 	bl	80084f4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8000de2:	88bb      	ldrh	r3, [r7, #4]
 8000de4:	0a1b      	lsrs	r3, r3, #8
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	743b      	strb	r3, [r7, #16]
 8000dec:	88bb      	ldrh	r3, [r7, #4]
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	747b      	strb	r3, [r7, #17]
 8000df2:	88bb      	ldrh	r3, [r7, #4]
 8000df4:	3301      	adds	r3, #1
 8000df6:	121b      	asrs	r3, r3, #8
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	74bb      	strb	r3, [r7, #18]
 8000dfc:	88bb      	ldrh	r3, [r7, #4]
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	3301      	adds	r3, #1
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8000e06:	f107 0110 	add.w	r1, r7, #16
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	2204      	movs	r2, #4
 8000e0e:	4821      	ldr	r0, [pc, #132]	@ (8000e94 <ILI9341_Draw_Pixel+0x18c>)
 8000e10:	f00a ff3f 	bl	800bc92 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000e14:	2201      	movs	r2, #1
 8000e16:	2110      	movs	r1, #16
 8000e18:	481d      	ldr	r0, [pc, #116]	@ (8000e90 <ILI9341_Draw_Pixel+0x188>)
 8000e1a:	f007 fb6b 	bl	80084f4 <HAL_GPIO_WritePin>

HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2102      	movs	r1, #2
 8000e22:	481b      	ldr	r0, [pc, #108]	@ (8000e90 <ILI9341_Draw_Pixel+0x188>)
 8000e24:	f007 fb66 	bl	80084f4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8000e28:	2200      	movs	r2, #0
 8000e2a:	2110      	movs	r1, #16
 8000e2c:	4818      	ldr	r0, [pc, #96]	@ (8000e90 <ILI9341_Draw_Pixel+0x188>)
 8000e2e:	f007 fb61 	bl	80084f4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8000e32:	202c      	movs	r0, #44	@ 0x2c
 8000e34:	f7ff fc86 	bl	8000744 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8000e38:	2201      	movs	r2, #1
 8000e3a:	2102      	movs	r1, #2
 8000e3c:	4814      	ldr	r0, [pc, #80]	@ (8000e90 <ILI9341_Draw_Pixel+0x188>)
 8000e3e:	f007 fb59 	bl	80084f4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8000e42:	2201      	movs	r2, #1
 8000e44:	2110      	movs	r1, #16
 8000e46:	4812      	ldr	r0, [pc, #72]	@ (8000e90 <ILI9341_Draw_Pixel+0x188>)
 8000e48:	f007 fb54 	bl	80084f4 <HAL_GPIO_WritePin>

HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2110      	movs	r1, #16
 8000e50:	480f      	ldr	r0, [pc, #60]	@ (8000e90 <ILI9341_Draw_Pixel+0x188>)
 8000e52:	f007 fb4f 	bl	80084f4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8000e56:	887b      	ldrh	r3, [r7, #2]
 8000e58:	0a1b      	lsrs	r3, r3, #8
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	733b      	strb	r3, [r7, #12]
 8000e60:	887b      	ldrh	r3, [r7, #2]
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8000e66:	f107 010c 	add.w	r1, r7, #12
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	2202      	movs	r2, #2
 8000e6e:	4809      	ldr	r0, [pc, #36]	@ (8000e94 <ILI9341_Draw_Pixel+0x18c>)
 8000e70:	f00a ff0f 	bl	800bc92 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000e74:	2201      	movs	r2, #1
 8000e76:	2110      	movs	r1, #16
 8000e78:	4805      	ldr	r0, [pc, #20]	@ (8000e90 <ILI9341_Draw_Pixel+0x188>)
 8000e7a:	f007 fb3b 	bl	80084f4 <HAL_GPIO_WritePin>
 8000e7e:	e000      	b.n	8000e82 <ILI9341_Draw_Pixel+0x17a>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8000e80:	bf00      	nop
	
}
 8000e82:	3718      	adds	r7, #24
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20000002 	.word	0x20000002
 8000e8c:	20000000 	.word	0x20000000
 8000e90:	40020000 	.word	0x40020000
 8000e94:	20000914 	.word	0x20000914

08000e98 <ILI9341_Draw_Rectangle>:


void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8000e98:	b590      	push	{r4, r7, lr}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4604      	mov	r4, r0
 8000ea0:	4608      	mov	r0, r1
 8000ea2:	4611      	mov	r1, r2
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4623      	mov	r3, r4
 8000ea8:	80fb      	strh	r3, [r7, #6]
 8000eaa:	4603      	mov	r3, r0
 8000eac:	80bb      	strh	r3, [r7, #4]
 8000eae:	460b      	mov	r3, r1
 8000eb0:	807b      	strh	r3, [r7, #2]
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8000eb6:	4b24      	ldr	r3, [pc, #144]	@ (8000f48 <ILI9341_Draw_Rectangle+0xb0>)
 8000eb8:	881b      	ldrh	r3, [r3, #0]
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	88fa      	ldrh	r2, [r7, #6]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d23d      	bcs.n	8000f3e <ILI9341_Draw_Rectangle+0xa6>
 8000ec2:	4b22      	ldr	r3, [pc, #136]	@ (8000f4c <ILI9341_Draw_Rectangle+0xb4>)
 8000ec4:	881b      	ldrh	r3, [r3, #0]
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	88ba      	ldrh	r2, [r7, #4]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d237      	bcs.n	8000f3e <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8000ece:	88fa      	ldrh	r2, [r7, #6]
 8000ed0:	887b      	ldrh	r3, [r7, #2]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	4a1c      	ldr	r2, [pc, #112]	@ (8000f48 <ILI9341_Draw_Rectangle+0xb0>)
 8000ed6:	8812      	ldrh	r2, [r2, #0]
 8000ed8:	b292      	uxth	r2, r2
 8000eda:	4293      	cmp	r3, r2
 8000edc:	dd05      	ble.n	8000eea <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8000ede:	4b1a      	ldr	r3, [pc, #104]	@ (8000f48 <ILI9341_Draw_Rectangle+0xb0>)
 8000ee0:	881b      	ldrh	r3, [r3, #0]
 8000ee2:	b29a      	uxth	r2, r3
 8000ee4:	88fb      	ldrh	r3, [r7, #6]
 8000ee6:	1ad3      	subs	r3, r2, r3
 8000ee8:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8000eea:	88ba      	ldrh	r2, [r7, #4]
 8000eec:	883b      	ldrh	r3, [r7, #0]
 8000eee:	4413      	add	r3, r2
 8000ef0:	4a16      	ldr	r2, [pc, #88]	@ (8000f4c <ILI9341_Draw_Rectangle+0xb4>)
 8000ef2:	8812      	ldrh	r2, [r2, #0]
 8000ef4:	b292      	uxth	r2, r2
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	dd05      	ble.n	8000f06 <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8000efa:	4b14      	ldr	r3, [pc, #80]	@ (8000f4c <ILI9341_Draw_Rectangle+0xb4>)
 8000efc:	881b      	ldrh	r3, [r3, #0]
 8000efe:	b29a      	uxth	r2, r3
 8000f00:	88bb      	ldrh	r3, [r7, #4]
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8000f06:	88fa      	ldrh	r2, [r7, #6]
 8000f08:	887b      	ldrh	r3, [r7, #2]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	b29c      	uxth	r4, r3
 8000f12:	88ba      	ldrh	r2, [r7, #4]
 8000f14:	883b      	ldrh	r3, [r7, #0]
 8000f16:	4413      	add	r3, r2
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	88b9      	ldrh	r1, [r7, #4]
 8000f20:	88f8      	ldrh	r0, [r7, #6]
 8000f22:	4622      	mov	r2, r4
 8000f24:	f7ff fc5c 	bl	80007e0 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8000f28:	883b      	ldrh	r3, [r7, #0]
 8000f2a:	887a      	ldrh	r2, [r7, #2]
 8000f2c:	fb02 f303 	mul.w	r3, r2, r3
 8000f30:	461a      	mov	r2, r3
 8000f32:	8b3b      	ldrh	r3, [r7, #24]
 8000f34:	4611      	mov	r1, r2
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff fe26 	bl	8000b88 <ILI9341_Draw_Colour_Burst>
 8000f3c:	e000      	b.n	8000f40 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8000f3e:	bf00      	nop
}
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd90      	pop	{r4, r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000002 	.word	0x20000002
 8000f4c:	20000000 	.word	0x20000000

08000f50 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8000f5e:	6839      	ldr	r1, [r7, #0]
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f001 fca2 	bl	80028aa <VL53L0X_get_offset_calibration_data_micro_meter>
 8000f66:	4603      	mov	r3, r0
 8000f68:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8000f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
	...

08000f78 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8000f78:	b5b0      	push	{r4, r5, r7, lr}
 8000f7a:	b096      	sub	sp, #88	@ 0x58
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000f80:	2300      	movs	r3, #0
 8000f82:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8000f86:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d107      	bne.n	8000f9e <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2188      	movs	r1, #136	@ 0x88
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f004 fe96 	bl	8005cc4 <VL53L0X_WrByte>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000fac:	f8a3 2152 	strh.w	r2, [r3, #338]	@ 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000fb6:	f8a3 2154 	strh.w	r2, [r3, #340]	@ 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a9e      	ldr	r2, [pc, #632]	@ (8001238 <VL53L0X_DataInit+0x2c0>)
 8000fbe:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a9d      	ldr	r2, [pc, #628]	@ (800123c <VL53L0X_DataInit+0x2c4>)
 8000fc6:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8000fd0:	f107 0310 	add.w	r3, r7, #16
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f000 fac0 	bl	800155c <VL53L0X_GetDeviceParameters>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8000fe2:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d112      	bne.n	8001010 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8000fea:	2300      	movs	r3, #0
 8000fec:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	f103 0410 	add.w	r4, r3, #16
 8000ff8:	f107 0510 	add.w	r5, r7, #16
 8000ffc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ffe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001000:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001002:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001004:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001006:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001008:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800100c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2264      	movs	r2, #100	@ 0x64
 8001014:	f8a3 2134 	strh.w	r2, [r3, #308]	@ 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f44f 7261 	mov.w	r2, #900	@ 0x384
 800101e:	f8a3 2136 	strh.w	r2, [r3, #310]	@ 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001028:	f8a3 2138 	strh.w	r2, [r3, #312]	@ 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8001032:	f8a3 213c 	strh.w	r2, [r3, #316]	@ 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2201      	movs	r2, #1
 800103a:	f883 2150 	strb.w	r2, [r3, #336]	@ 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800103e:	2201      	movs	r2, #1
 8001040:	2180      	movs	r1, #128	@ 0x80
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f004 fe3e 	bl	8005cc4 <VL53L0X_WrByte>
 8001048:	4603      	mov	r3, r0
 800104a:	461a      	mov	r2, r3
 800104c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001050:	4313      	orrs	r3, r2
 8001052:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8001056:	2201      	movs	r2, #1
 8001058:	21ff      	movs	r1, #255	@ 0xff
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f004 fe32 	bl	8005cc4 <VL53L0X_WrByte>
 8001060:	4603      	mov	r3, r0
 8001062:	461a      	mov	r2, r3
 8001064:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001068:	4313      	orrs	r3, r2
 800106a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800106e:	2200      	movs	r2, #0
 8001070:	2100      	movs	r1, #0
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f004 fe26 	bl	8005cc4 <VL53L0X_WrByte>
 8001078:	4603      	mov	r3, r0
 800107a:	461a      	mov	r2, r3
 800107c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001080:	4313      	orrs	r3, r2
 8001082:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8001086:	f107 030f 	add.w	r3, r7, #15
 800108a:	461a      	mov	r2, r3
 800108c:	2191      	movs	r1, #145	@ 0x91
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f004 fe9a 	bl	8005dc8 <VL53L0X_RdByte>
 8001094:	4603      	mov	r3, r0
 8001096:	461a      	mov	r2, r3
 8001098:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800109c:	4313      	orrs	r3, r2
 800109e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 80010a2:	7bfa      	ldrb	r2, [r7, #15]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f883 213a 	strb.w	r2, [r3, #314]	@ 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80010aa:	2201      	movs	r2, #1
 80010ac:	2100      	movs	r1, #0
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f004 fe08 	bl	8005cc4 <VL53L0X_WrByte>
 80010b4:	4603      	mov	r3, r0
 80010b6:	461a      	mov	r2, r3
 80010b8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80010bc:	4313      	orrs	r3, r2
 80010be:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80010c2:	2200      	movs	r2, #0
 80010c4:	21ff      	movs	r1, #255	@ 0xff
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f004 fdfc 	bl	8005cc4 <VL53L0X_WrByte>
 80010cc:	4603      	mov	r3, r0
 80010ce:	461a      	mov	r2, r3
 80010d0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80010d4:	4313      	orrs	r3, r2
 80010d6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80010da:	2200      	movs	r2, #0
 80010dc:	2180      	movs	r1, #128	@ 0x80
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f004 fdf0 	bl	8005cc4 <VL53L0X_WrByte>
 80010e4:	4603      	mov	r3, r0
 80010e6:	461a      	mov	r2, r3
 80010e8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80010ec:	4313      	orrs	r3, r2
 80010ee:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80010f2:	2300      	movs	r3, #0
 80010f4:	653b      	str	r3, [r7, #80]	@ 0x50
 80010f6:	e014      	b.n	8001122 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 80010f8:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d114      	bne.n	800112a <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8001100:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001102:	b29b      	uxth	r3, r3
 8001104:	2201      	movs	r2, #1
 8001106:	4619      	mov	r1, r3
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f000 fd31 	bl	8001b70 <VL53L0X_SetLimitCheckEnable>
 800110e:	4603      	mov	r3, r0
 8001110:	461a      	mov	r2, r3
 8001112:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001116:	4313      	orrs	r3, r2
 8001118:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800111c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800111e:	3301      	adds	r3, #1
 8001120:	653b      	str	r3, [r7, #80]	@ 0x50
 8001122:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001124:	2b05      	cmp	r3, #5
 8001126:	dde7      	ble.n	80010f8 <VL53L0X_DataInit+0x180>
 8001128:	e000      	b.n	800112c <VL53L0X_DataInit+0x1b4>
		else
			break;
 800112a:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 800112c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8001130:	2b00      	cmp	r3, #0
 8001132:	d107      	bne.n	8001144 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8001134:	2200      	movs	r2, #0
 8001136:	2102      	movs	r1, #2
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f000 fd19 	bl	8001b70 <VL53L0X_SetLimitCheckEnable>
 800113e:	4603      	mov	r3, r0
 8001140:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8001144:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8001148:	2b00      	cmp	r3, #0
 800114a:	d107      	bne.n	800115c <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800114c:	2200      	movs	r2, #0
 800114e:	2103      	movs	r1, #3
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f000 fd0d 	bl	8001b70 <VL53L0X_SetLimitCheckEnable>
 8001156:	4603      	mov	r3, r0
 8001158:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800115c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8001160:	2b00      	cmp	r3, #0
 8001162:	d107      	bne.n	8001174 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8001164:	2200      	movs	r2, #0
 8001166:	2104      	movs	r1, #4
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f000 fd01 	bl	8001b70 <VL53L0X_SetLimitCheckEnable>
 800116e:	4603      	mov	r3, r0
 8001170:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8001174:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8001178:	2b00      	cmp	r3, #0
 800117a:	d107      	bne.n	800118c <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800117c:	2200      	movs	r2, #0
 800117e:	2105      	movs	r1, #5
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f000 fcf5 	bl	8001b70 <VL53L0X_SetLimitCheckEnable>
 8001186:	4603      	mov	r3, r0
 8001188:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 800118c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8001190:	2b00      	cmp	r3, #0
 8001192:	d108      	bne.n	80011a6 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8001194:	f44f 1290 	mov.w	r2, #1179648	@ 0x120000
 8001198:	2100      	movs	r1, #0
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f000 fd98 	bl	8001cd0 <VL53L0X_SetLimitCheckValue>
 80011a0:	4603      	mov	r3, r0
 80011a2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80011a6:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d108      	bne.n	80011c0 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80011ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011b2:	2101      	movs	r1, #1
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f000 fd8b 	bl	8001cd0 <VL53L0X_SetLimitCheckValue>
 80011ba:	4603      	mov	r3, r0
 80011bc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80011c0:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d108      	bne.n	80011da <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80011c8:	f44f 120c 	mov.w	r2, #2293760	@ 0x230000
 80011cc:	2102      	movs	r1, #2
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f000 fd7e 	bl	8001cd0 <VL53L0X_SetLimitCheckValue>
 80011d4:	4603      	mov	r3, r0
 80011d6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80011da:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d107      	bne.n	80011f2 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80011e2:	2200      	movs	r2, #0
 80011e4:	2103      	movs	r1, #3
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f000 fd72 	bl	8001cd0 <VL53L0X_SetLimitCheckValue>
 80011ec:	4603      	mov	r3, r0
 80011ee:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80011f2:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d10f      	bne.n	800121a <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	22ff      	movs	r2, #255	@ 0xff
 80011fe:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8001202:	22ff      	movs	r2, #255	@ 0xff
 8001204:	2101      	movs	r1, #1
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f004 fd5c 	bl	8005cc4 <VL53L0X_WrByte>
 800120c:	4603      	mov	r3, r0
 800120e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2201      	movs	r2, #1
 8001216:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 800121a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800121e:	2b00      	cmp	r3, #0
 8001220:	d103      	bne.n	800122a <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 800122a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
}
 800122e:	4618      	mov	r0, r3
 8001230:	3758      	adds	r7, #88	@ 0x58
 8001232:	46bd      	mov	sp, r7
 8001234:	bdb0      	pop	{r4, r5, r7, pc}
 8001236:	bf00      	nop
 8001238:	00016b85 	.word	0x00016b85
 800123c:	000970a4 	.word	0x000970a4

08001240 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8001240:	b5b0      	push	{r4, r5, r7, lr}
 8001242:	b09e      	sub	sp, #120	@ 0x78
 8001244:	af02      	add	r7, sp, #8
 8001246:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001248:	2300      	movs	r3, #0
 800124a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 800124e:	f107 031c 	add.w	r3, r7, #28
 8001252:	2240      	movs	r2, #64	@ 0x40
 8001254:	2100      	movs	r1, #0
 8001256:	4618      	mov	r0, r3
 8001258:	f010 fab4 	bl	80117c4 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	uint32_t count = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	663b      	str	r3, [r7, #96]	@ 0x60
	uint8_t isApertureSpads = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 800127c:	2101      	movs	r1, #1
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f002 fa69 	bl	8003756 <VL53L0X_get_info_from_device>
 8001284:	4603      	mov	r3, r0
 8001286:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f893 3113 	ldrb.w	r3, [r3, #275]	@ 0x113
 8001290:	663b      	str	r3, [r7, #96]	@ 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8001298:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 800129c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d80d      	bhi.n	80012c0 <VL53L0X_StaticInit+0x80>
 80012a4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d102      	bne.n	80012b2 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 80012ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80012ae:	2b20      	cmp	r3, #32
 80012b0:	d806      	bhi.n	80012c0 <VL53L0X_StaticInit+0x80>
 80012b2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d10e      	bne.n	80012d8 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 80012ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80012bc:	2b0c      	cmp	r3, #12
 80012be:	d90b      	bls.n	80012d8 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 80012c0:	f107 0218 	add.w	r2, r7, #24
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	4619      	mov	r1, r3
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f001 fce8 	bl	8002ca0 <VL53L0X_perform_ref_spad_management>
 80012d0:	4603      	mov	r3, r0
 80012d2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 80012d6:	e009      	b.n	80012ec <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 80012d8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80012dc:	461a      	mov	r2, r3
 80012de:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f001 fee9 	bl	80030b8 <VL53L0X_set_reference_spads>
 80012e6:	4603      	mov	r3, r0
 80012e8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 80012ec:	4b93      	ldr	r3, [pc, #588]	@ (800153c <VL53L0X_StaticInit+0x2fc>)
 80012ee:	66bb      	str	r3, [r7, #104]	@ 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 80012f0:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d10f      	bne.n	8001318 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f893 3150 	ldrb.w	r3, [r3, #336]	@ 0x150
 80012fe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8001302:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001306:	2b00      	cmp	r3, #0
 8001308:	d104      	bne.n	8001314 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8001310:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001312:	e001      	b.n	8001318 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8001314:	4b89      	ldr	r3, [pc, #548]	@ (800153c <VL53L0X_StaticInit+0x2fc>)
 8001316:	66bb      	str	r3, [r7, #104]	@ 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8001318:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800131c:	2b00      	cmp	r3, #0
 800131e:	d106      	bne.n	800132e <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8001320:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f003 fdb8 	bl	8004e98 <VL53L0X_load_tuning_settings>
 8001328:	4603      	mov	r3, r0
 800132a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 800132e:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8001332:	2b00      	cmp	r3, #0
 8001334:	d10a      	bne.n	800134c <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8001336:	2300      	movs	r3, #0
 8001338:	9300      	str	r3, [sp, #0]
 800133a:	2304      	movs	r3, #4
 800133c:	2200      	movs	r2, #0
 800133e:	2100      	movs	r1, #0
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f001 f8e5 	bl	8002510 <VL53L0X_SetGpioConfig>
 8001346:	4603      	mov	r3, r0
 8001348:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800134c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8001350:	2b00      	cmp	r3, #0
 8001352:	d121      	bne.n	8001398 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8001354:	2201      	movs	r2, #1
 8001356:	21ff      	movs	r1, #255	@ 0xff
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f004 fcb3 	bl	8005cc4 <VL53L0X_WrByte>
 800135e:	4603      	mov	r3, r0
 8001360:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8001364:	f107 031a 	add.w	r3, r7, #26
 8001368:	461a      	mov	r2, r3
 800136a:	2184      	movs	r1, #132	@ 0x84
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f004 fd55 	bl	8005e1c <VL53L0X_RdWord>
 8001372:	4603      	mov	r3, r0
 8001374:	461a      	mov	r2, r3
 8001376:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800137a:	4313      	orrs	r3, r2
 800137c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8001380:	2200      	movs	r2, #0
 8001382:	21ff      	movs	r1, #255	@ 0xff
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f004 fc9d 	bl	8005cc4 <VL53L0X_WrByte>
 800138a:	4603      	mov	r3, r0
 800138c:	461a      	mov	r2, r3
 800138e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001392:	4313      	orrs	r3, r2
 8001394:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001398:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800139c:	2b00      	cmp	r3, #0
 800139e:	d104      	bne.n	80013aa <VL53L0X_StaticInit+0x16a>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 80013a0:	8b7b      	ldrh	r3, [r7, #26]
 80013a2:	011a      	lsls	r2, r3, #4
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 80013aa:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d108      	bne.n	80013c4 <VL53L0X_StaticInit+0x184>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80013b2:	f107 031c 	add.w	r3, r7, #28
 80013b6:	4619      	mov	r1, r3
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f000 f8cf 	bl	800155c <VL53L0X_GetDeviceParameters>
 80013be:	4603      	mov	r3, r0
 80013c0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 80013c4:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d110      	bne.n	80013ee <VL53L0X_StaticInit+0x1ae>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 80013cc:	f107 0319 	add.w	r3, r7, #25
 80013d0:	4619      	mov	r1, r3
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f000 f991 	bl	80016fa <VL53L0X_GetFractionEnable>
 80013d8:	4603      	mov	r3, r0
 80013da:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 80013de:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d103      	bne.n	80013ee <VL53L0X_StaticInit+0x1ae>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 80013e6:	7e7a      	ldrb	r2, [r7, #25]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 80013ee:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d10e      	bne.n	8001414 <VL53L0X_StaticInit+0x1d4>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f103 0410 	add.w	r4, r3, #16
 80013fc:	f107 051c 	add.w	r5, r7, #28
 8001400:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001402:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001404:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001406:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001408:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800140a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800140c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001410:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8001414:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8001418:	2b00      	cmp	r3, #0
 800141a:	d111      	bne.n	8001440 <VL53L0X_StaticInit+0x200>
		Status = VL53L0X_RdByte(Dev,
 800141c:	f107 0319 	add.w	r3, r7, #25
 8001420:	461a      	mov	r2, r3
 8001422:	2101      	movs	r1, #1
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f004 fccf 	bl	8005dc8 <VL53L0X_RdByte>
 800142a:	4603      	mov	r3, r0
 800142c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8001430:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8001434:	2b00      	cmp	r3, #0
 8001436:	d103      	bne.n	8001440 <VL53L0X_StaticInit+0x200>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8001438:	7e7a      	ldrb	r2, [r7, #25]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8001440:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8001444:	2b00      	cmp	r3, #0
 8001446:	d107      	bne.n	8001458 <VL53L0X_StaticInit+0x218>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8001448:	2200      	movs	r2, #0
 800144a:	2100      	movs	r1, #0
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f000 f9c9 	bl	80017e4 <VL53L0X_SetSequenceStepEnable>
 8001452:	4603      	mov	r3, r0
 8001454:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8001458:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800145c:	2b00      	cmp	r3, #0
 800145e:	d107      	bne.n	8001470 <VL53L0X_StaticInit+0x230>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8001460:	2200      	movs	r2, #0
 8001462:	2102      	movs	r1, #2
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f000 f9bd 	bl	80017e4 <VL53L0X_SetSequenceStepEnable>
 800146a:	4603      	mov	r3, r0
 800146c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8001470:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8001474:	2b00      	cmp	r3, #0
 8001476:	d103      	bne.n	8001480 <VL53L0X_StaticInit+0x240>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2203      	movs	r2, #3
 800147c:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8001480:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8001484:	2b00      	cmp	r3, #0
 8001486:	d109      	bne.n	800149c <VL53L0X_StaticInit+0x25c>
		Status = VL53L0X_GetVcselPulsePeriod(
 8001488:	f107 0313 	add.w	r3, r7, #19
 800148c:	461a      	mov	r2, r3
 800148e:	2100      	movs	r1, #0
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f000 f98f 	bl	80017b4 <VL53L0X_GetVcselPulsePeriod>
 8001496:	4603      	mov	r3, r0
 8001498:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800149c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d103      	bne.n	80014ac <VL53L0X_StaticInit+0x26c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80014a4:	7cfa      	ldrb	r2, [r7, #19]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80014ac:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d109      	bne.n	80014c8 <VL53L0X_StaticInit+0x288>
		Status = VL53L0X_GetVcselPulsePeriod(
 80014b4:	f107 0313 	add.w	r3, r7, #19
 80014b8:	461a      	mov	r2, r3
 80014ba:	2101      	movs	r1, #1
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f000 f979 	bl	80017b4 <VL53L0X_GetVcselPulsePeriod>
 80014c2:	4603      	mov	r3, r0
 80014c4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80014c8:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d103      	bne.n	80014d8 <VL53L0X_StaticInit+0x298>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80014d0:	7cfa      	ldrb	r2, [r7, #19]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80014d8:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d109      	bne.n	80014f4 <VL53L0X_StaticInit+0x2b4>
		Status = get_sequence_step_timeout(
 80014e0:	f107 030c 	add.w	r3, r7, #12
 80014e4:	461a      	mov	r2, r3
 80014e6:	2103      	movs	r1, #3
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f002 feb3 	bl	8004254 <get_sequence_step_timeout>
 80014ee:	4603      	mov	r3, r0
 80014f0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80014f4:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d103      	bne.n	8001504 <VL53L0X_StaticInit+0x2c4>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80014fc:	68fa      	ldr	r2, [r7, #12]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8001504:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8001508:	2b00      	cmp	r3, #0
 800150a:	d109      	bne.n	8001520 <VL53L0X_StaticInit+0x2e0>
		Status = get_sequence_step_timeout(
 800150c:	f107 030c 	add.w	r3, r7, #12
 8001510:	461a      	mov	r2, r3
 8001512:	2104      	movs	r1, #4
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f002 fe9d 	bl	8004254 <get_sequence_step_timeout>
 800151a:	4603      	mov	r3, r0
 800151c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001520:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8001524:	2b00      	cmp	r3, #0
 8001526:	d103      	bne.n	8001530 <VL53L0X_StaticInit+0x2f0>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8001528:	68fa      	ldr	r2, [r7, #12]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001530:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
}
 8001534:	4618      	mov	r0, r3
 8001536:	3770      	adds	r7, #112	@ 0x70
 8001538:	46bd      	mov	sp, r7
 800153a:	bdb0      	pop	{r4, r5, r7, pc}
 800153c:	20000004 	.word	0x20000004

08001540 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8001548:	239d      	movs	r3, #157	@ 0x9d
 800154a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 800154c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001550:	4618      	mov	r0, r3
 8001552:	3714      	adds	r7, #20
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001566:	2300      	movs	r3, #0
 8001568:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	4619      	mov	r1, r3
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f000 f8b0 	bl	80016d4 <VL53L0X_GetDeviceMode>
 8001574:	4603      	mov	r3, r0
 8001576:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8001578:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d107      	bne.n	8001590 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	3308      	adds	r3, #8
 8001584:	4619      	mov	r1, r3
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f000 fa76 	bl	8001a78 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 800158c:	4603      	mov	r3, r0
 800158e:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8001590:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d102      	bne.n	800159e <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	2200      	movs	r2, #0
 800159c:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800159e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d107      	bne.n	80015b6 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	3310      	adds	r3, #16
 80015aa:	4619      	mov	r1, r3
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f000 faac 	bl	8001b0a <VL53L0X_GetXTalkCompensationRateMegaCps>
 80015b2:	4603      	mov	r3, r0
 80015b4:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 80015b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d107      	bne.n	80015ce <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	3314      	adds	r3, #20
 80015c2:	4619      	mov	r1, r3
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7ff fcc3 	bl	8000f50 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 80015ca:	4603      	mov	r3, r0
 80015cc:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 80015ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d134      	bne.n	8001640 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80015d6:	2300      	movs	r3, #0
 80015d8:	60bb      	str	r3, [r7, #8]
 80015da:	e02a      	b.n	8001632 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80015dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d12a      	bne.n	800163a <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	b299      	uxth	r1, r3
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	3308      	adds	r3, #8
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	683a      	ldr	r2, [r7, #0]
 80015f0:	4413      	add	r3, r2
 80015f2:	3304      	adds	r3, #4
 80015f4:	461a      	mov	r2, r3
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f000 fbcc 	bl	8001d94 <VL53L0X_GetLimitCheckValue>
 80015fc:	4603      	mov	r3, r0
 80015fe:	461a      	mov	r2, r3
 8001600:	7bfb      	ldrb	r3, [r7, #15]
 8001602:	4313      	orrs	r3, r2
 8001604:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8001606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d117      	bne.n	800163e <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	b299      	uxth	r1, r3
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	3318      	adds	r3, #24
 8001616:	683a      	ldr	r2, [r7, #0]
 8001618:	4413      	add	r3, r2
 800161a:	461a      	mov	r2, r3
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f000 fb33 	bl	8001c88 <VL53L0X_GetLimitCheckEnable>
 8001622:	4603      	mov	r3, r0
 8001624:	461a      	mov	r2, r3
 8001626:	7bfb      	ldrb	r3, [r7, #15]
 8001628:	4313      	orrs	r3, r2
 800162a:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	3301      	adds	r3, #1
 8001630:	60bb      	str	r3, [r7, #8]
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	2b05      	cmp	r3, #5
 8001636:	ddd1      	ble.n	80015dc <VL53L0X_GetDeviceParameters+0x80>
 8001638:	e002      	b.n	8001640 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 800163a:	bf00      	nop
 800163c:	e000      	b.n	8001640 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800163e:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001640:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d107      	bne.n	8001658 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	333c      	adds	r3, #60	@ 0x3c
 800164c:	4619      	mov	r1, r3
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 fc2e 	bl	8001eb0 <VL53L0X_GetWrapAroundCheckEnable>
 8001654:	4603      	mov	r3, r0
 8001656:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8001658:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d107      	bne.n	8001670 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	3304      	adds	r3, #4
 8001664:	4619      	mov	r1, r3
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f000 f879 	bl	800175e <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 800166c:	4603      	mov	r3, r0
 800166e:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001670:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001674:	4618      	mov	r0, r3
 8001676:	3710      	adds	r7, #16
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	460b      	mov	r3, r1
 8001686:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001688:	2300      	movs	r3, #0
 800168a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 800168c:	78fb      	ldrb	r3, [r7, #3]
 800168e:	2b15      	cmp	r3, #21
 8001690:	bf8c      	ite	hi
 8001692:	2201      	movhi	r2, #1
 8001694:	2200      	movls	r2, #0
 8001696:	b2d2      	uxtb	r2, r2
 8001698:	2a00      	cmp	r2, #0
 800169a:	d10f      	bne.n	80016bc <VL53L0X_SetDeviceMode+0x40>
 800169c:	4a0c      	ldr	r2, [pc, #48]	@ (80016d0 <VL53L0X_SetDeviceMode+0x54>)
 800169e:	fa22 f303 	lsr.w	r3, r2, r3
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	bf14      	ite	ne
 80016aa:	2301      	movne	r3, #1
 80016ac:	2300      	moveq	r3, #0
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d003      	beq.n	80016bc <VL53L0X_SetDeviceMode+0x40>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	78fa      	ldrb	r2, [r7, #3]
 80016b8:	741a      	strb	r2, [r3, #16]
		break;
 80016ba:	e001      	b.n	80016c0 <VL53L0X_SetDeviceMode+0x44>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80016bc:	23f8      	movs	r3, #248	@ 0xf8
 80016be:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80016c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	0030000b 	.word	0x0030000b

080016d4 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80016de:	2300      	movs	r3, #0
 80016e0:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	7c1a      	ldrb	r2, [r3, #16]
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80016ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3714      	adds	r7, #20
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b084      	sub	sp, #16
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
 8001702:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001704:	2300      	movs	r3, #0
 8001706:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	2109      	movs	r1, #9
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f004 fb5b 	bl	8005dc8 <VL53L0X_RdByte>
 8001712:	4603      	mov	r3, r0
 8001714:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8001716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d106      	bne.n	800172c <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	b2da      	uxtb	r2, r3
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800172c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001730:	4618      	mov	r0, r3
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001742:	2300      	movs	r3, #0
 8001744:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8001746:	6839      	ldr	r1, [r7, #0]
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f003 fa13 	bl	8004b74 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800174e:	4603      	mov	r3, r0
 8001750:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8001752:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001756:	4618      	mov	r0, r3
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b084      	sub	sp, #16
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
 8001766:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001768:	2300      	movs	r3, #0
 800176a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 800176c:	6839      	ldr	r1, [r7, #0]
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f003 fae0 	bl	8004d34 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8001774:	4603      	mov	r3, r0
 8001776:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8001778:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	460b      	mov	r3, r1
 800178e:	70fb      	strb	r3, [r7, #3]
 8001790:	4613      	mov	r3, r2
 8001792:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001794:	2300      	movs	r3, #0
 8001796:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8001798:	78ba      	ldrb	r2, [r7, #2]
 800179a:	78fb      	ldrb	r3, [r7, #3]
 800179c:	4619      	mov	r1, r3
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f002 ff2a 	bl	80045f8 <VL53L0X_set_vcsel_pulse_period>
 80017a4:	4603      	mov	r3, r0
 80017a6:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80017a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	460b      	mov	r3, r1
 80017be:	607a      	str	r2, [r7, #4]
 80017c0:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80017c2:	2300      	movs	r3, #0
 80017c4:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80017c6:	7afb      	ldrb	r3, [r7, #11]
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	4619      	mov	r1, r3
 80017cc:	68f8      	ldr	r0, [r7, #12]
 80017ce:	f003 f99a 	bl	8004b06 <VL53L0X_get_vcsel_pulse_period>
 80017d2:	4603      	mov	r3, r0
 80017d4:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80017d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3718      	adds	r7, #24
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
	...

080017e4 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	460b      	mov	r3, r1
 80017ee:	70fb      	strb	r3, [r7, #3]
 80017f0:	4613      	mov	r3, r2
 80017f2:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80017f4:	2300      	movs	r3, #0
 80017f6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 80017fc:	2300      	movs	r3, #0
 80017fe:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8001800:	f107 030f 	add.w	r3, r7, #15
 8001804:	461a      	mov	r2, r3
 8001806:	2101      	movs	r1, #1
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f004 fadd 	bl	8005dc8 <VL53L0X_RdByte>
 800180e:	4603      	mov	r3, r0
 8001810:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8001812:	7bfb      	ldrb	r3, [r7, #15]
 8001814:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8001816:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d159      	bne.n	80018d2 <VL53L0X_SetSequenceStepEnable+0xee>
		if (SequenceStepEnabled == 1) {
 800181e:	78bb      	ldrb	r3, [r7, #2]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d12b      	bne.n	800187c <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8001824:	78fb      	ldrb	r3, [r7, #3]
 8001826:	2b04      	cmp	r3, #4
 8001828:	d825      	bhi.n	8001876 <VL53L0X_SetSequenceStepEnable+0x92>
 800182a:	a201      	add	r2, pc, #4	@ (adr r2, 8001830 <VL53L0X_SetSequenceStepEnable+0x4c>)
 800182c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001830:	08001845 	.word	0x08001845
 8001834:	0800184f 	.word	0x0800184f
 8001838:	08001859 	.word	0x08001859
 800183c:	08001863 	.word	0x08001863
 8001840:	0800186d 	.word	0x0800186d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8001844:	7dbb      	ldrb	r3, [r7, #22]
 8001846:	f043 0310 	orr.w	r3, r3, #16
 800184a:	75bb      	strb	r3, [r7, #22]
				break;
 800184c:	e041      	b.n	80018d2 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800184e:	7dbb      	ldrb	r3, [r7, #22]
 8001850:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 8001854:	75bb      	strb	r3, [r7, #22]
				break;
 8001856:	e03c      	b.n	80018d2 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8001858:	7dbb      	ldrb	r3, [r7, #22]
 800185a:	f043 0304 	orr.w	r3, r3, #4
 800185e:	75bb      	strb	r3, [r7, #22]
				break;
 8001860:	e037      	b.n	80018d2 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8001862:	7dbb      	ldrb	r3, [r7, #22]
 8001864:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001868:	75bb      	strb	r3, [r7, #22]
				break;
 800186a:	e032      	b.n	80018d2 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 800186c:	7dbb      	ldrb	r3, [r7, #22]
 800186e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001872:	75bb      	strb	r3, [r7, #22]
				break;
 8001874:	e02d      	b.n	80018d2 <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001876:	23fc      	movs	r3, #252	@ 0xfc
 8001878:	75fb      	strb	r3, [r7, #23]
 800187a:	e02a      	b.n	80018d2 <VL53L0X_SetSequenceStepEnable+0xee>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 800187c:	78fb      	ldrb	r3, [r7, #3]
 800187e:	2b04      	cmp	r3, #4
 8001880:	d825      	bhi.n	80018ce <VL53L0X_SetSequenceStepEnable+0xea>
 8001882:	a201      	add	r2, pc, #4	@ (adr r2, 8001888 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8001884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001888:	0800189d 	.word	0x0800189d
 800188c:	080018a7 	.word	0x080018a7
 8001890:	080018b1 	.word	0x080018b1
 8001894:	080018bb 	.word	0x080018bb
 8001898:	080018c5 	.word	0x080018c5
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 800189c:	7dbb      	ldrb	r3, [r7, #22]
 800189e:	f023 0310 	bic.w	r3, r3, #16
 80018a2:	75bb      	strb	r3, [r7, #22]
				break;
 80018a4:	e015      	b.n	80018d2 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 80018a6:	7dbb      	ldrb	r3, [r7, #22]
 80018a8:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 80018ac:	75bb      	strb	r3, [r7, #22]
				break;
 80018ae:	e010      	b.n	80018d2 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 80018b0:	7dbb      	ldrb	r3, [r7, #22]
 80018b2:	f023 0304 	bic.w	r3, r3, #4
 80018b6:	75bb      	strb	r3, [r7, #22]
				break;
 80018b8:	e00b      	b.n	80018d2 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 80018ba:	7dbb      	ldrb	r3, [r7, #22]
 80018bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80018c0:	75bb      	strb	r3, [r7, #22]
				break;
 80018c2:	e006      	b.n	80018d2 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 80018c4:	7dbb      	ldrb	r3, [r7, #22]
 80018c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80018ca:	75bb      	strb	r3, [r7, #22]
				break;
 80018cc:	e001      	b.n	80018d2 <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80018ce:	23fc      	movs	r3, #252	@ 0xfc
 80018d0:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	if (SequenceConfigNew != SequenceConfig) {
 80018d2:	7bfb      	ldrb	r3, [r7, #15]
 80018d4:	7dba      	ldrb	r2, [r7, #22]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d01e      	beq.n	8001918 <VL53L0X_SetSequenceStepEnable+0x134>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 80018da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d107      	bne.n	80018f2 <VL53L0X_SetSequenceStepEnable+0x10e>
			Status = VL53L0X_WrByte(Dev,
 80018e2:	7dbb      	ldrb	r3, [r7, #22]
 80018e4:	461a      	mov	r2, r3
 80018e6:	2101      	movs	r1, #1
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f004 f9eb 	bl	8005cc4 <VL53L0X_WrByte>
 80018ee:	4603      	mov	r3, r0
 80018f0:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 80018f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d103      	bne.n	8001902 <VL53L0X_SetSequenceStepEnable+0x11e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	7dba      	ldrb	r2, [r7, #22]
 80018fe:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8001902:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d106      	bne.n	8001918 <VL53L0X_SetSequenceStepEnable+0x134>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8001910:	6939      	ldr	r1, [r7, #16]
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7ff ff10 	bl	8001738 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8001918:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8001924:	b480      	push	{r7}
 8001926:	b087      	sub	sp, #28
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	607b      	str	r3, [r7, #4]
 800192e:	460b      	mov	r3, r1
 8001930:	72fb      	strb	r3, [r7, #11]
 8001932:	4613      	mov	r3, r2
 8001934:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001936:	2300      	movs	r3, #0
 8001938:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8001940:	7afb      	ldrb	r3, [r7, #11]
 8001942:	2b04      	cmp	r3, #4
 8001944:	d836      	bhi.n	80019b4 <sequence_step_enabled+0x90>
 8001946:	a201      	add	r2, pc, #4	@ (adr r2, 800194c <sequence_step_enabled+0x28>)
 8001948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800194c:	08001961 	.word	0x08001961
 8001950:	08001973 	.word	0x08001973
 8001954:	08001985 	.word	0x08001985
 8001958:	08001997 	.word	0x08001997
 800195c:	080019a9 	.word	0x080019a9
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8001960:	7abb      	ldrb	r3, [r7, #10]
 8001962:	111b      	asrs	r3, r3, #4
 8001964:	b2db      	uxtb	r3, r3
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	b2da      	uxtb	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	701a      	strb	r2, [r3, #0]
		break;
 8001970:	e022      	b.n	80019b8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8001972:	7abb      	ldrb	r3, [r7, #10]
 8001974:	10db      	asrs	r3, r3, #3
 8001976:	b2db      	uxtb	r3, r3
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	b2da      	uxtb	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	701a      	strb	r2, [r3, #0]
		break;
 8001982:	e019      	b.n	80019b8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8001984:	7abb      	ldrb	r3, [r7, #10]
 8001986:	109b      	asrs	r3, r3, #2
 8001988:	b2db      	uxtb	r3, r3
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	b2da      	uxtb	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	701a      	strb	r2, [r3, #0]
		break;
 8001994:	e010      	b.n	80019b8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8001996:	7abb      	ldrb	r3, [r7, #10]
 8001998:	119b      	asrs	r3, r3, #6
 800199a:	b2db      	uxtb	r3, r3
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	701a      	strb	r2, [r3, #0]
		break;
 80019a6:	e007      	b.n	80019b8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80019a8:	7abb      	ldrb	r3, [r7, #10]
 80019aa:	09db      	lsrs	r3, r3, #7
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	701a      	strb	r2, [r3, #0]
		break;
 80019b2:	e001      	b.n	80019b8 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80019b4:	23fc      	movs	r3, #252	@ 0xfc
 80019b6:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80019b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	371c      	adds	r7, #28
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80019d2:	2300      	movs	r3, #0
 80019d4:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80019da:	f107 030e 	add.w	r3, r7, #14
 80019de:	461a      	mov	r2, r3
 80019e0:	2101      	movs	r1, #1
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f004 f9f0 	bl	8005dc8 <VL53L0X_RdByte>
 80019e8:	4603      	mov	r3, r0
 80019ea:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 80019ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d107      	bne.n	8001a04 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 80019f4:	7bba      	ldrb	r2, [r7, #14]
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	2100      	movs	r1, #0
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7ff ff92 	bl	8001924 <sequence_step_enabled>
 8001a00:	4603      	mov	r3, r0
 8001a02:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8001a04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d108      	bne.n	8001a1e <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8001a0c:	7bba      	ldrb	r2, [r7, #14]
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	3302      	adds	r3, #2
 8001a12:	2101      	movs	r1, #1
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f7ff ff85 	bl	8001924 <sequence_step_enabled>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8001a1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d108      	bne.n	8001a38 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8001a26:	7bba      	ldrb	r2, [r7, #14]
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	2102      	movs	r1, #2
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f7ff ff78 	bl	8001924 <sequence_step_enabled>
 8001a34:	4603      	mov	r3, r0
 8001a36:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8001a38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d108      	bne.n	8001a52 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8001a40:	7bba      	ldrb	r2, [r7, #14]
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	3303      	adds	r3, #3
 8001a46:	2103      	movs	r1, #3
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7ff ff6b 	bl	8001924 <sequence_step_enabled>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8001a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d108      	bne.n	8001a6c <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8001a5a:	7bba      	ldrb	r2, [r7, #14]
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	3304      	adds	r3, #4
 8001a60:	2104      	movs	r1, #4
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7ff ff5e 	bl	8001924 <sequence_step_enabled>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001a6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3710      	adds	r7, #16
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001a82:	2300      	movs	r3, #0
 8001a84:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8001a86:	f107 030c 	add.w	r3, r7, #12
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	21f8      	movs	r1, #248	@ 0xf8
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f004 f9c4 	bl	8005e1c <VL53L0X_RdWord>
 8001a94:	4603      	mov	r3, r0
 8001a96:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8001a98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d108      	bne.n	8001ab2 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8001aa0:	f107 0308 	add.w	r3, r7, #8
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	2104      	movs	r1, #4
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f004 f9ed 	bl	8005e88 <VL53L0X_RdDWord>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10c      	bne.n	8001ad4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8001aba:	89bb      	ldrh	r3, [r7, #12]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d005      	beq.n	8001acc <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	89ba      	ldrh	r2, [r7, #12]
 8001ac4:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001ad4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3710      	adds	r7, #16
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001aea:	2300      	movs	r3, #0
 8001aec:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	7f1b      	ldrb	r3, [r3, #28]
 8001af2:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	7bba      	ldrb	r2, [r7, #14]
 8001af8:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8001afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3714      	adds	r7, #20
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b086      	sub	sp, #24
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
 8001b12:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001b14:	2300      	movs	r3, #0
 8001b16:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8001b18:	f107 030e 	add.w	r3, r7, #14
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	2120      	movs	r1, #32
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f004 f97b 	bl	8005e1c <VL53L0X_RdWord>
 8001b26:	4603      	mov	r3, r0
 8001b28:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8001b2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d118      	bne.n	8001b64 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8001b32:	89fb      	ldrh	r3, [r7, #14]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d109      	bne.n	8001b4c <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
 8001b3c:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	771a      	strb	r2, [r3, #28]
 8001b4a:	e00b      	b.n	8001b64 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8001b4c:	89fb      	ldrh	r3, [r7, #14]
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2201      	movs	r2, #1
 8001b62:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001b64:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	807b      	strh	r3, [r7, #2]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001b80:	2300      	movs	r3, #0
 8001b82:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8001b90:	887b      	ldrh	r3, [r7, #2]
 8001b92:	2b05      	cmp	r3, #5
 8001b94:	d902      	bls.n	8001b9c <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001b96:	23fc      	movs	r3, #252	@ 0xfc
 8001b98:	75fb      	strb	r3, [r7, #23]
 8001b9a:	e05b      	b.n	8001c54 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8001b9c:	787b      	ldrb	r3, [r7, #1]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d106      	bne.n	8001bb0 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8001baa:	2301      	movs	r3, #1
 8001bac:	73bb      	strb	r3, [r7, #14]
 8001bae:	e00a      	b.n	8001bc6 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001bb0:	887b      	ldrh	r3, [r7, #2]
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	330c      	adds	r3, #12
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	4413      	add	r3, r2
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8001bc6:	887b      	ldrh	r3, [r7, #2]
 8001bc8:	2b05      	cmp	r3, #5
 8001bca:	d841      	bhi.n	8001c50 <VL53L0X_SetLimitCheckEnable+0xe0>
 8001bcc:	a201      	add	r2, pc, #4	@ (adr r2, 8001bd4 <VL53L0X_SetLimitCheckEnable+0x64>)
 8001bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bd2:	bf00      	nop
 8001bd4:	08001bed 	.word	0x08001bed
 8001bd8:	08001bf7 	.word	0x08001bf7
 8001bdc:	08001c0d 	.word	0x08001c0d
 8001be0:	08001c17 	.word	0x08001c17
 8001be4:	08001c21 	.word	0x08001c21
 8001be8:	08001c39 	.word	0x08001c39

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	7bfa      	ldrb	r2, [r7, #15]
 8001bf0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8001bf4:	e02e      	b.n	8001c54 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	2144      	movs	r1, #68	@ 0x44
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f004 f883 	bl	8005d0c <VL53L0X_WrWord>
 8001c06:	4603      	mov	r3, r0
 8001c08:	75fb      	strb	r3, [r7, #23]

			break;
 8001c0a:	e023      	b.n	8001c54 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	7bfa      	ldrb	r2, [r7, #15]
 8001c10:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8001c14:	e01e      	b.n	8001c54 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	7bfa      	ldrb	r2, [r7, #15]
 8001c1a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8001c1e:	e019      	b.n	8001c54 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8001c20:	7bbb      	ldrb	r3, [r7, #14]
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8001c26:	7b7b      	ldrb	r3, [r7, #13]
 8001c28:	22fe      	movs	r2, #254	@ 0xfe
 8001c2a:	2160      	movs	r1, #96	@ 0x60
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f004 f897 	bl	8005d60 <VL53L0X_UpdateByte>
 8001c32:	4603      	mov	r3, r0
 8001c34:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8001c36:	e00d      	b.n	8001c54 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8001c38:	7bbb      	ldrb	r3, [r7, #14]
 8001c3a:	011b      	lsls	r3, r3, #4
 8001c3c:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8001c3e:	7b7b      	ldrb	r3, [r7, #13]
 8001c40:	22ef      	movs	r2, #239	@ 0xef
 8001c42:	2160      	movs	r1, #96	@ 0x60
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f004 f88b 	bl	8005d60 <VL53L0X_UpdateByte>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8001c4e:	e001      	b.n	8001c54 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001c50:	23fc      	movs	r3, #252	@ 0xfc
 8001c52:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001c54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d10f      	bne.n	8001c7c <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8001c5c:	787b      	ldrb	r3, [r7, #1]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d106      	bne.n	8001c70 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001c62:	887b      	ldrh	r3, [r7, #2]
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	4413      	add	r3, r2
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8001c6e:	e005      	b.n	8001c7c <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001c70:	887b      	ldrh	r3, [r7, #2]
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	4413      	add	r3, r2
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001c7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3718      	adds	r7, #24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b087      	sub	sp, #28
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	460b      	mov	r3, r1
 8001c92:	607a      	str	r2, [r7, #4]
 8001c94:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001c96:	2300      	movs	r3, #0
 8001c98:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8001c9a:	897b      	ldrh	r3, [r7, #10]
 8001c9c:	2b05      	cmp	r3, #5
 8001c9e:	d905      	bls.n	8001cac <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001ca0:	23fc      	movs	r3, #252	@ 0xfc
 8001ca2:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	701a      	strb	r2, [r3, #0]
 8001caa:	e008      	b.n	8001cbe <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001cac:	897b      	ldrh	r3, [r7, #10]
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001cb6:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	7dba      	ldrb	r2, [r7, #22]
 8001cbc:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001cbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	371c      	adds	r7, #28
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
	...

08001cd0 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	460b      	mov	r3, r1
 8001cda:	607a      	str	r2, [r7, #4]
 8001cdc:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8001ce2:	897b      	ldrh	r3, [r7, #10]
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001cec:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8001cee:	7dbb      	ldrb	r3, [r7, #22]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d107      	bne.n	8001d04 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001cf4:	897b      	ldrh	r3, [r7, #10]
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	330c      	adds	r3, #12
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	4413      	add	r3, r2
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	e040      	b.n	8001d86 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8001d04:	897b      	ldrh	r3, [r7, #10]
 8001d06:	2b05      	cmp	r3, #5
 8001d08:	d830      	bhi.n	8001d6c <VL53L0X_SetLimitCheckValue+0x9c>
 8001d0a:	a201      	add	r2, pc, #4	@ (adr r2, 8001d10 <VL53L0X_SetLimitCheckValue+0x40>)
 8001d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d10:	08001d29 	.word	0x08001d29
 8001d14:	08001d31 	.word	0x08001d31
 8001d18:	08001d47 	.word	0x08001d47
 8001d1c:	08001d4f 	.word	0x08001d4f
 8001d20:	08001d57 	.word	0x08001d57
 8001d24:	08001d57 	.word	0x08001d57

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	635a      	str	r2, [r3, #52]	@ 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8001d2e:	e01f      	b.n	8001d70 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	461a      	mov	r2, r3
 8001d38:	2144      	movs	r1, #68	@ 0x44
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f003 ffe6 	bl	8005d0c <VL53L0X_WrWord>
 8001d40:	4603      	mov	r3, r0
 8001d42:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8001d44:	e014      	b.n	8001d70 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	63da      	str	r2, [r3, #60]	@ 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8001d4c:	e010      	b.n	8001d70 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	641a      	str	r2, [r3, #64]	@ 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8001d54:	e00c      	b.n	8001d70 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	2164      	movs	r1, #100	@ 0x64
 8001d60:	68f8      	ldr	r0, [r7, #12]
 8001d62:	f003 ffd3 	bl	8005d0c <VL53L0X_WrWord>
 8001d66:	4603      	mov	r3, r0
 8001d68:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8001d6a:	e001      	b.n	8001d70 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001d6c:	23fc      	movs	r3, #252	@ 0xfc
 8001d6e:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8001d70:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d106      	bne.n	8001d86 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001d78:	897b      	ldrh	r3, [r7, #10]
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	330c      	adds	r3, #12
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	4413      	add	r3, r2
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001d86:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3718      	adds	r7, #24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop

08001d94 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b088      	sub	sp, #32
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	607a      	str	r2, [r7, #4]
 8001da0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001da2:	2300      	movs	r3, #0
 8001da4:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8001da6:	2300      	movs	r3, #0
 8001da8:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8001daa:	897b      	ldrh	r3, [r7, #10]
 8001dac:	2b05      	cmp	r3, #5
 8001dae:	d847      	bhi.n	8001e40 <VL53L0X_GetLimitCheckValue+0xac>
 8001db0:	a201      	add	r2, pc, #4	@ (adr r2, 8001db8 <VL53L0X_GetLimitCheckValue+0x24>)
 8001db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001db6:	bf00      	nop
 8001db8:	08001dd1 	.word	0x08001dd1
 8001dbc:	08001ddd 	.word	0x08001ddd
 8001dc0:	08001e03 	.word	0x08001e03
 8001dc4:	08001e0f 	.word	0x08001e0f
 8001dc8:	08001e1b 	.word	0x08001e1b
 8001dcc:	08001e1b 	.word	0x08001e1b

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dd4:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	77bb      	strb	r3, [r7, #30]
		break;
 8001dda:	e033      	b.n	8001e44 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8001ddc:	f107 0316 	add.w	r3, r7, #22
 8001de0:	461a      	mov	r2, r3
 8001de2:	2144      	movs	r1, #68	@ 0x44
 8001de4:	68f8      	ldr	r0, [r7, #12]
 8001de6:	f004 f819 	bl	8005e1c <VL53L0X_RdWord>
 8001dea:	4603      	mov	r3, r0
 8001dec:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8001dee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d102      	bne.n	8001dfc <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8001df6:	8afb      	ldrh	r3, [r7, #22]
 8001df8:	025b      	lsls	r3, r3, #9
 8001dfa:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	77bb      	strb	r3, [r7, #30]
		break;
 8001e00:	e020      	b.n	8001e44 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e06:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	77bb      	strb	r3, [r7, #30]
		break;
 8001e0c:	e01a      	b.n	8001e44 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e12:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	77bb      	strb	r3, [r7, #30]
		break;
 8001e18:	e014      	b.n	8001e44 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8001e1a:	f107 0316 	add.w	r3, r7, #22
 8001e1e:	461a      	mov	r2, r3
 8001e20:	2164      	movs	r1, #100	@ 0x64
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	f003 fffa 	bl	8005e1c <VL53L0X_RdWord>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8001e2c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d102      	bne.n	8001e3a <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8001e34:	8afb      	ldrh	r3, [r7, #22]
 8001e36:	025b      	lsls	r3, r3, #9
 8001e38:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	77bb      	strb	r3, [r7, #30]
		break;
 8001e3e:	e001      	b.n	8001e44 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001e40:	23fc      	movs	r3, #252	@ 0xfc
 8001e42:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001e44:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d12a      	bne.n	8001ea2 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8001e4c:	7fbb      	ldrb	r3, [r7, #30]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d124      	bne.n	8001e9c <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d110      	bne.n	8001e7a <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8001e58:	897b      	ldrh	r3, [r7, #10]
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	330c      	adds	r3, #12
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8001e6c:	897b      	ldrh	r3, [r7, #10]
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	4413      	add	r3, r2
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8001e78:	e013      	b.n	8001ea2 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8001e80:	897b      	ldrh	r3, [r7, #10]
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	330c      	adds	r3, #12
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8001e8e:	897b      	ldrh	r3, [r7, #10]
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	4413      	add	r3, r2
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8001e9a:	e002      	b.n	8001ea2 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001ea2:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3720      	adds	r7, #32
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop

08001eb0 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8001ebe:	f107 030e 	add.w	r3, r7, #14
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f003 ff7e 	bl	8005dc8 <VL53L0X_RdByte>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8001ed0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d10e      	bne.n	8001ef6 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8001ed8:	7bba      	ldrb	r2, [r7, #14]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
		if (data & (0x01 << 7))
 8001ee0:	7bbb      	ldrb	r3, [r7, #14]
 8001ee2:	b25b      	sxtb	r3, r3
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	da03      	bge.n	8001ef0 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	2201      	movs	r2, #1
 8001eec:	701a      	strb	r2, [r3, #0]
 8001eee:	e002      	b.n	8001ef6 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8001ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d104      	bne.n	8001f08 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	781a      	ldrb	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001f08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8001f20:	f107 030e 	add.w	r3, r7, #14
 8001f24:	4619      	mov	r1, r3
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7ff fbd4 	bl	80016d4 <VL53L0X_GetDeviceMode>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8001f30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d107      	bne.n	8001f48 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8001f38:	7bbb      	ldrb	r3, [r7, #14]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d104      	bne.n	8001f48 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f898 	bl	8002074 <VL53L0X_StartMeasurement>
 8001f44:	4603      	mov	r3, r0
 8001f46:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8001f48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d104      	bne.n	8001f5a <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f001 fb33 	bl	80035bc <VL53L0X_measurement_poll_for_completion>
 8001f56:	4603      	mov	r3, r0
 8001f58:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8001f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d106      	bne.n	8001f70 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8001f62:	7bbb      	ldrb	r3, [r7, #14]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d103      	bne.n	8001f70 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2203      	movs	r2, #3
 8001f6c:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8001f70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3710      	adds	r7, #16
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	68b9      	ldr	r1, [r7, #8]
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f001 fad5 	bl	8003542 <VL53L0X_perform_ref_calibration>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8001f9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3718      	adds	r7, #24
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f893 30da 	ldrb.w	r3, [r3, #218]	@ 0xda
 8001fbe:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8001fc0:	7dbb      	ldrb	r3, [r7, #22]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d005      	beq.n	8001fd2 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8001fc6:	7dbb      	ldrb	r3, [r7, #22]
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d002      	beq.n	8001fd2 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8001fcc:	7dbb      	ldrb	r3, [r7, #22]
 8001fce:	2b03      	cmp	r3, #3
 8001fd0:	d147      	bne.n	8002062 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8001fd2:	f107 030c 	add.w	r3, r7, #12
 8001fd6:	f107 0210 	add.w	r2, r7, #16
 8001fda:	2101      	movs	r1, #1
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 fbb9 	bl	8002754 <VL53L0X_GetInterruptThresholds>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	f5b3 0f7f 	cmp.w	r3, #16711680	@ 0xff0000
 8001fec:	d803      	bhi.n	8001ff6 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8001fee:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8001ff0:	f5b3 0f7f 	cmp.w	r3, #16711680	@ 0xff0000
 8001ff4:	d935      	bls.n	8002062 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8001ff6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d131      	bne.n	8002062 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8001ffe:	78fb      	ldrb	r3, [r7, #3]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d006      	beq.n	8002012 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8002004:	491a      	ldr	r1, [pc, #104]	@ (8002070 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f002 ff46 	bl	8004e98 <VL53L0X_load_tuning_settings>
 800200c:	4603      	mov	r3, r0
 800200e:	75fb      	strb	r3, [r7, #23]
 8002010:	e027      	b.n	8002062 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8002012:	2204      	movs	r2, #4
 8002014:	21ff      	movs	r1, #255	@ 0xff
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f003 fe54 	bl	8005cc4 <VL53L0X_WrByte>
 800201c:	4603      	mov	r3, r0
 800201e:	461a      	mov	r2, r3
 8002020:	7dfb      	ldrb	r3, [r7, #23]
 8002022:	4313      	orrs	r3, r2
 8002024:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8002026:	2200      	movs	r2, #0
 8002028:	2170      	movs	r1, #112	@ 0x70
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f003 fe4a 	bl	8005cc4 <VL53L0X_WrByte>
 8002030:	4603      	mov	r3, r0
 8002032:	461a      	mov	r2, r3
 8002034:	7dfb      	ldrb	r3, [r7, #23]
 8002036:	4313      	orrs	r3, r2
 8002038:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800203a:	2200      	movs	r2, #0
 800203c:	21ff      	movs	r1, #255	@ 0xff
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f003 fe40 	bl	8005cc4 <VL53L0X_WrByte>
 8002044:	4603      	mov	r3, r0
 8002046:	461a      	mov	r2, r3
 8002048:	7dfb      	ldrb	r3, [r7, #23]
 800204a:	4313      	orrs	r3, r2
 800204c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800204e:	2200      	movs	r2, #0
 8002050:	2180      	movs	r1, #128	@ 0x80
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f003 fe36 	bl	8005cc4 <VL53L0X_WrByte>
 8002058:	4603      	mov	r3, r0
 800205a:	461a      	mov	r2, r3
 800205c:	7dfb      	ldrb	r3, [r7, #23]
 800205e:	4313      	orrs	r3, r2
 8002060:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8002062:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8002066:	4618      	mov	r0, r3
 8002068:	3718      	adds	r7, #24
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	200000f8 	.word	0x200000f8

08002074 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800207c:	2300      	movs	r3, #0
 800207e:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8002080:	2301      	movs	r3, #1
 8002082:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8002084:	f107 030e 	add.w	r3, r7, #14
 8002088:	4619      	mov	r1, r3
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7ff fb22 	bl	80016d4 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8002090:	2201      	movs	r2, #1
 8002092:	2180      	movs	r1, #128	@ 0x80
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f003 fe15 	bl	8005cc4 <VL53L0X_WrByte>
 800209a:	4603      	mov	r3, r0
 800209c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800209e:	2201      	movs	r2, #1
 80020a0:	21ff      	movs	r1, #255	@ 0xff
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f003 fe0e 	bl	8005cc4 <VL53L0X_WrByte>
 80020a8:	4603      	mov	r3, r0
 80020aa:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 80020ac:	2200      	movs	r2, #0
 80020ae:	2100      	movs	r1, #0
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f003 fe07 	bl	8005cc4 <VL53L0X_WrByte>
 80020b6:	4603      	mov	r3, r0
 80020b8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 313a 	ldrb.w	r3, [r3, #314]	@ 0x13a
 80020c0:	461a      	mov	r2, r3
 80020c2:	2191      	movs	r1, #145	@ 0x91
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f003 fdfd 	bl	8005cc4 <VL53L0X_WrByte>
 80020ca:	4603      	mov	r3, r0
 80020cc:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 80020ce:	2201      	movs	r2, #1
 80020d0:	2100      	movs	r1, #0
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f003 fdf6 	bl	8005cc4 <VL53L0X_WrByte>
 80020d8:	4603      	mov	r3, r0
 80020da:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80020dc:	2200      	movs	r2, #0
 80020de:	21ff      	movs	r1, #255	@ 0xff
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f003 fdef 	bl	8005cc4 <VL53L0X_WrByte>
 80020e6:	4603      	mov	r3, r0
 80020e8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 80020ea:	2200      	movs	r2, #0
 80020ec:	2180      	movs	r1, #128	@ 0x80
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f003 fde8 	bl	8005cc4 <VL53L0X_WrByte>
 80020f4:	4603      	mov	r3, r0
 80020f6:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 80020f8:	7bbb      	ldrb	r3, [r7, #14]
 80020fa:	2b03      	cmp	r3, #3
 80020fc:	d054      	beq.n	80021a8 <VL53L0X_StartMeasurement+0x134>
 80020fe:	2b03      	cmp	r3, #3
 8002100:	dc6c      	bgt.n	80021dc <VL53L0X_StartMeasurement+0x168>
 8002102:	2b00      	cmp	r3, #0
 8002104:	d002      	beq.n	800210c <VL53L0X_StartMeasurement+0x98>
 8002106:	2b01      	cmp	r3, #1
 8002108:	d034      	beq.n	8002174 <VL53L0X_StartMeasurement+0x100>
 800210a:	e067      	b.n	80021dc <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 800210c:	2201      	movs	r2, #1
 800210e:	2100      	movs	r1, #0
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f003 fdd7 	bl	8005cc4 <VL53L0X_WrByte>
 8002116:	4603      	mov	r3, r0
 8002118:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800211a:	7bfb      	ldrb	r3, [r7, #15]
 800211c:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 800211e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d15d      	bne.n	80021e2 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8002126:	2300      	movs	r3, #0
 8002128:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d008      	beq.n	8002142 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8002130:	f107 030d 	add.w	r3, r7, #13
 8002134:	461a      	mov	r2, r3
 8002136:	2100      	movs	r1, #0
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f003 fe45 	bl	8005dc8 <VL53L0X_RdByte>
 800213e:	4603      	mov	r3, r0
 8002140:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	3301      	adds	r3, #1
 8002146:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8002148:	7b7a      	ldrb	r2, [r7, #13]
 800214a:	7bfb      	ldrb	r3, [r7, #15]
 800214c:	4013      	ands	r3, r2
 800214e:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8002150:	7bfa      	ldrb	r2, [r7, #15]
 8002152:	429a      	cmp	r2, r3
 8002154:	d107      	bne.n	8002166 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8002156:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d103      	bne.n	8002166 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002164:	d3e1      	bcc.n	800212a <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800216c:	d339      	bcc.n	80021e2 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 800216e:	23f9      	movs	r3, #249	@ 0xf9
 8002170:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8002172:	e036      	b.n	80021e2 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8002174:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d105      	bne.n	8002188 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800217c:	2101      	movs	r1, #1
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7ff ff12 	bl	8001fa8 <VL53L0X_CheckAndLoadInterruptSettings>
 8002184:	4603      	mov	r3, r0
 8002186:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8002188:	2202      	movs	r2, #2
 800218a:	2100      	movs	r1, #0
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f003 fd99 	bl	8005cc4 <VL53L0X_WrByte>
 8002192:	4603      	mov	r3, r0
 8002194:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8002196:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d123      	bne.n	80021e6 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2204      	movs	r2, #4
 80021a2:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
		}
		break;
 80021a6:	e01e      	b.n	80021e6 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 80021a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d105      	bne.n	80021bc <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80021b0:	2101      	movs	r1, #1
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7ff fef8 	bl	8001fa8 <VL53L0X_CheckAndLoadInterruptSettings>
 80021b8:	4603      	mov	r3, r0
 80021ba:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80021bc:	2204      	movs	r2, #4
 80021be:	2100      	movs	r1, #0
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f003 fd7f 	bl	8005cc4 <VL53L0X_WrByte>
 80021c6:	4603      	mov	r3, r0
 80021c8:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 80021ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10b      	bne.n	80021ea <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2204      	movs	r2, #4
 80021d6:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
		}
		break;
 80021da:	e006      	b.n	80021ea <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80021dc:	23f8      	movs	r3, #248	@ 0xf8
 80021de:	75fb      	strb	r3, [r7, #23]
 80021e0:	e004      	b.n	80021ec <VL53L0X_StartMeasurement+0x178>
		break;
 80021e2:	bf00      	nop
 80021e4:	e002      	b.n	80021ec <VL53L0X_StartMeasurement+0x178>
		break;
 80021e6:	bf00      	nop
 80021e8:	e000      	b.n	80021ec <VL53L0X_StartMeasurement+0x178>
		break;
 80021ea:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 80021ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002202:	2300      	movs	r3, #0
 8002204:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f893 30da 	ldrb.w	r3, [r3, #218]	@ 0xda
 800220c:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800220e:	7bbb      	ldrb	r3, [r7, #14]
 8002210:	2b04      	cmp	r3, #4
 8002212:	d112      	bne.n	800223a <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8002214:	f107 0308 	add.w	r3, r7, #8
 8002218:	4619      	mov	r1, r3
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 fb0e 	bl	800283c <VL53L0X_GetInterruptMaskStatus>
 8002220:	4603      	mov	r3, r0
 8002222:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	2b04      	cmp	r3, #4
 8002228:	d103      	bne.n	8002232 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	2201      	movs	r2, #1
 800222e:	701a      	strb	r2, [r3, #0]
 8002230:	e01c      	b.n	800226c <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	2200      	movs	r2, #0
 8002236:	701a      	strb	r2, [r3, #0]
 8002238:	e018      	b.n	800226c <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800223a:	f107 030d 	add.w	r3, r7, #13
 800223e:	461a      	mov	r2, r3
 8002240:	2114      	movs	r1, #20
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f003 fdc0 	bl	8005dc8 <VL53L0X_RdByte>
 8002248:	4603      	mov	r3, r0
 800224a:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800224c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d10b      	bne.n	800226c <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8002254:	7b7b      	ldrb	r3, [r7, #13]
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	2201      	movs	r2, #1
 8002262:	701a      	strb	r2, [r3, #0]
 8002264:	e002      	b.n	800226c <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	2200      	movs	r2, #0
 800226a:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800226c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8002278:	b5b0      	push	{r4, r5, r7, lr}
 800227a:	b096      	sub	sp, #88	@ 0x58
 800227c:	af02      	add	r7, sp, #8
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002282:	2300      	movs	r3, #0
 8002284:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8002288:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800228c:	230c      	movs	r3, #12
 800228e:	2114      	movs	r1, #20
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f003 fceb 	bl	8005c6c <VL53L0X_ReadMulti>
 8002296:	4603      	mov	r3, r0
 8002298:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 800229c:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f040 80c8 	bne.w	8002436 <VL53L0X_GetRangingMeasurementData+0x1be>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	2200      	movs	r2, #0
 80022aa:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 80022b2:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80022b6:	021b      	lsls	r3, r3, #8
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 80022be:	4413      	add	r3, r2
 80022c0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	2200      	movs	r2, #0
 80022c8:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 80022ca:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80022ce:	021b      	lsls	r3, r3, #8
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80022d6:	4413      	add	r3, r2
 80022d8:	b29b      	uxth	r3, r3
 80022da:	025b      	lsls	r3, r3, #9
 80022dc:	647b      	str	r3, [r7, #68]	@ 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80022e2:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 80022e4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80022e8:	021b      	lsls	r3, r3, #8
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 80022f0:	4413      	add	r3, r2
 80022f2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 80022f6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80022fa:	025a      	lsls	r2, r3, #9
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8002300:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8002304:	021b      	lsls	r3, r3, #8
 8002306:	b29b      	uxth	r3, r3
 8002308:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800230c:	4413      	add	r3, r2
 800230e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8002318:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 800231a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800231e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f8b3 3152 	ldrh.w	r3, [r3, #338]	@ 0x152
 8002328:	87bb      	strh	r3, [r7, #60]	@ 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8002330:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8002334:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002336:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800233a:	d046      	beq.n	80023ca <VL53L0X_GetRangingMeasurementData+0x152>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800233c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800233e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8002342:	fb02 f303 	mul.w	r3, r2, r3
 8002346:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800234a:	4a58      	ldr	r2, [pc, #352]	@ (80024ac <VL53L0X_GetRangingMeasurementData+0x234>)
 800234c:	fb82 1203 	smull	r1, r2, r2, r3
 8002350:	1192      	asrs	r2, r2, #6
 8002352:	17db      	asrs	r3, r3, #31
 8002354:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8002356:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	873b      	strh	r3, [r7, #56]	@ 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	7f1b      	ldrb	r3, [r3, #28]
 8002364:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8002368:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800236c:	2b00      	cmp	r3, #0
 800236e:	d02c      	beq.n	80023ca <VL53L0X_GetRangingMeasurementData+0x152>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8002370:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002372:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8002376:	fb02 f303 	mul.w	r3, r2, r3
 800237a:	121a      	asrs	r2, r3, #8
					<= 0) {
 800237c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
				if ((SignalRate
 800237e:	429a      	cmp	r2, r3
 8002380:	d10d      	bne.n	800239e <VL53L0X_GetRangingMeasurementData+0x126>
					if (RangeFractionalEnable)
 8002382:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002386:	2b00      	cmp	r3, #0
 8002388:	d004      	beq.n	8002394 <VL53L0X_GetRangingMeasurementData+0x11c>
						XtalkRangeMilliMeter = 8888;
 800238a:	f242 23b8 	movw	r3, #8888	@ 0x22b8
 800238e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8002392:	e016      	b.n	80023c2 <VL53L0X_GetRangingMeasurementData+0x14a>
					else
						XtalkRangeMilliMeter = 8888
 8002394:	f648 23e0 	movw	r3, #35552	@ 0x8ae0
 8002398:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800239c:	e011      	b.n	80023c2 <VL53L0X_GetRangingMeasurementData+0x14a>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800239e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80023a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80023a4:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 80023a8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80023aa:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 80023ae:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 80023b2:	121b      	asrs	r3, r3, #8
 80023b4:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 80023b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023b8:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 80023ba:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 80023be:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 80023c2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80023c6:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
			}

		}

		if (RangeFractionalEnable) {
 80023ca:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00d      	beq.n	80023ee <VL53L0X_GetRangingMeasurementData+0x176>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 80023d2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80023d6:	089b      	lsrs	r3, r3, #2
 80023d8:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 80023de:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	019b      	lsls	r3, r3, #6
 80023e6:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	75da      	strb	r2, [r3, #23]
 80023ec:	e006      	b.n	80023fc <VL53L0X_GetRangingMeasurementData+0x184>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 80023f4:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	2200      	movs	r2, #0
 80023fa:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 80023fc:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8002400:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 8002404:	f107 0336 	add.w	r3, r7, #54	@ 0x36
 8002408:	9301      	str	r3, [sp, #4]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	9300      	str	r3, [sp, #0]
 800240e:	4613      	mov	r3, r2
 8002410:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f003 f9de 	bl	80057d4 <VL53L0X_get_pal_range_status>
 8002418:	4603      	mov	r3, r0
 800241a:	461a      	mov	r2, r3
 800241c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002420:	4313      	orrs	r3, r2
 8002422:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8002426:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 800242a:	2b00      	cmp	r3, #0
 800242c:	d103      	bne.n	8002436 <VL53L0X_GetRangingMeasurementData+0x1be>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800242e:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002436:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 800243a:	2b00      	cmp	r3, #0
 800243c:	d12f      	bne.n	800249e <VL53L0X_GetRangingMeasurementData+0x226>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f107 040c 	add.w	r4, r7, #12
 8002444:	f103 0550 	add.w	r5, r3, #80	@ 0x50
 8002448:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800244a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800244c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002450:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8002458:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800245e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8002466:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800246c:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8002472:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8002478:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800247e:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8002484:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f103 0450 	add.w	r4, r3, #80	@ 0x50
 800248e:	f107 050c 	add.w	r5, r7, #12
 8002492:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002494:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002496:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800249a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800249e:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3750      	adds	r7, #80	@ 0x50
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bdb0      	pop	{r4, r5, r7, pc}
 80024aa:	bf00      	nop
 80024ac:	10624dd3 	.word	0x10624dd3

080024b0 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80024ba:	2300      	movs	r3, #0
 80024bc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80024be:	2100      	movs	r1, #0
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f7ff f8db 	bl	800167c <VL53L0X_SetDeviceMode>
 80024c6:	4603      	mov	r3, r0
 80024c8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80024ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d104      	bne.n	80024dc <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7ff fd1e 	bl	8001f14 <VL53L0X_PerformSingleMeasurement>
 80024d8:	4603      	mov	r3, r0
 80024da:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80024dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d105      	bne.n	80024f0 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 80024e4:	6839      	ldr	r1, [r7, #0]
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7ff fec6 	bl	8002278 <VL53L0X_GetRangingMeasurementData>
 80024ec:	4603      	mov	r3, r0
 80024ee:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 80024f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d105      	bne.n	8002504 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80024f8:	2100      	movs	r1, #0
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 f95e 	bl	80027bc <VL53L0X_ClearInterruptMask>
 8002500:	4603      	mov	r3, r0
 8002502:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8002504:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002508:	4618      	mov	r0, r3
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	4608      	mov	r0, r1
 800251a:	4611      	mov	r1, r2
 800251c:	461a      	mov	r2, r3
 800251e:	4603      	mov	r3, r0
 8002520:	70fb      	strb	r3, [r7, #3]
 8002522:	460b      	mov	r3, r1
 8002524:	70bb      	strb	r3, [r7, #2]
 8002526:	4613      	mov	r3, r2
 8002528:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800252a:	2300      	movs	r3, #0
 800252c:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800252e:	78fb      	ldrb	r3, [r7, #3]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d002      	beq.n	800253a <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8002534:	23f6      	movs	r3, #246	@ 0xf6
 8002536:	73fb      	strb	r3, [r7, #15]
 8002538:	e105      	b.n	8002746 <VL53L0X_SetGpioConfig+0x236>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800253a:	78bb      	ldrb	r3, [r7, #2]
 800253c:	2b14      	cmp	r3, #20
 800253e:	d110      	bne.n	8002562 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8002540:	7e3b      	ldrb	r3, [r7, #24]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d102      	bne.n	800254c <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8002546:	2310      	movs	r3, #16
 8002548:	73bb      	strb	r3, [r7, #14]
 800254a:	e001      	b.n	8002550 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 800254c:	2301      	movs	r3, #1
 800254e:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8002550:	7bbb      	ldrb	r3, [r7, #14]
 8002552:	461a      	mov	r2, r3
 8002554:	2184      	movs	r1, #132	@ 0x84
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f003 fbb4 	bl	8005cc4 <VL53L0X_WrByte>
 800255c:	4603      	mov	r3, r0
 800255e:	73fb      	strb	r3, [r7, #15]
 8002560:	e0f1      	b.n	8002746 <VL53L0X_SetGpioConfig+0x236>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8002562:	78bb      	ldrb	r3, [r7, #2]
 8002564:	2b15      	cmp	r3, #21
 8002566:	f040 8097 	bne.w	8002698 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800256a:	2201      	movs	r2, #1
 800256c:	21ff      	movs	r1, #255	@ 0xff
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f003 fba8 	bl	8005cc4 <VL53L0X_WrByte>
 8002574:	4603      	mov	r3, r0
 8002576:	461a      	mov	r2, r3
 8002578:	7bfb      	ldrb	r3, [r7, #15]
 800257a:	4313      	orrs	r3, r2
 800257c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800257e:	2200      	movs	r2, #0
 8002580:	2100      	movs	r1, #0
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f003 fb9e 	bl	8005cc4 <VL53L0X_WrByte>
 8002588:	4603      	mov	r3, r0
 800258a:	461a      	mov	r2, r3
 800258c:	7bfb      	ldrb	r3, [r7, #15]
 800258e:	4313      	orrs	r3, r2
 8002590:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8002592:	2200      	movs	r2, #0
 8002594:	21ff      	movs	r1, #255	@ 0xff
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f003 fb94 	bl	8005cc4 <VL53L0X_WrByte>
 800259c:	4603      	mov	r3, r0
 800259e:	461a      	mov	r2, r3
 80025a0:	7bfb      	ldrb	r3, [r7, #15]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80025a6:	2201      	movs	r2, #1
 80025a8:	2180      	movs	r1, #128	@ 0x80
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f003 fb8a 	bl	8005cc4 <VL53L0X_WrByte>
 80025b0:	4603      	mov	r3, r0
 80025b2:	461a      	mov	r2, r3
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 80025ba:	2202      	movs	r2, #2
 80025bc:	2185      	movs	r1, #133	@ 0x85
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f003 fb80 	bl	8005cc4 <VL53L0X_WrByte>
 80025c4:	4603      	mov	r3, r0
 80025c6:	461a      	mov	r2, r3
 80025c8:	7bfb      	ldrb	r3, [r7, #15]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 80025ce:	2204      	movs	r2, #4
 80025d0:	21ff      	movs	r1, #255	@ 0xff
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f003 fb76 	bl	8005cc4 <VL53L0X_WrByte>
 80025d8:	4603      	mov	r3, r0
 80025da:	461a      	mov	r2, r3
 80025dc:	7bfb      	ldrb	r3, [r7, #15]
 80025de:	4313      	orrs	r3, r2
 80025e0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 80025e2:	2200      	movs	r2, #0
 80025e4:	21cd      	movs	r1, #205	@ 0xcd
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f003 fb6c 	bl	8005cc4 <VL53L0X_WrByte>
 80025ec:	4603      	mov	r3, r0
 80025ee:	461a      	mov	r2, r3
 80025f0:	7bfb      	ldrb	r3, [r7, #15]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 80025f6:	2211      	movs	r2, #17
 80025f8:	21cc      	movs	r1, #204	@ 0xcc
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f003 fb62 	bl	8005cc4 <VL53L0X_WrByte>
 8002600:	4603      	mov	r3, r0
 8002602:	461a      	mov	r2, r3
 8002604:	7bfb      	ldrb	r3, [r7, #15]
 8002606:	4313      	orrs	r3, r2
 8002608:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800260a:	2207      	movs	r2, #7
 800260c:	21ff      	movs	r1, #255	@ 0xff
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f003 fb58 	bl	8005cc4 <VL53L0X_WrByte>
 8002614:	4603      	mov	r3, r0
 8002616:	461a      	mov	r2, r3
 8002618:	7bfb      	ldrb	r3, [r7, #15]
 800261a:	4313      	orrs	r3, r2
 800261c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800261e:	2200      	movs	r2, #0
 8002620:	21be      	movs	r1, #190	@ 0xbe
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f003 fb4e 	bl	8005cc4 <VL53L0X_WrByte>
 8002628:	4603      	mov	r3, r0
 800262a:	461a      	mov	r2, r3
 800262c:	7bfb      	ldrb	r3, [r7, #15]
 800262e:	4313      	orrs	r3, r2
 8002630:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8002632:	2206      	movs	r2, #6
 8002634:	21ff      	movs	r1, #255	@ 0xff
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f003 fb44 	bl	8005cc4 <VL53L0X_WrByte>
 800263c:	4603      	mov	r3, r0
 800263e:	461a      	mov	r2, r3
 8002640:	7bfb      	ldrb	r3, [r7, #15]
 8002642:	4313      	orrs	r3, r2
 8002644:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8002646:	2209      	movs	r2, #9
 8002648:	21cc      	movs	r1, #204	@ 0xcc
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f003 fb3a 	bl	8005cc4 <VL53L0X_WrByte>
 8002650:	4603      	mov	r3, r0
 8002652:	461a      	mov	r2, r3
 8002654:	7bfb      	ldrb	r3, [r7, #15]
 8002656:	4313      	orrs	r3, r2
 8002658:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800265a:	2200      	movs	r2, #0
 800265c:	21ff      	movs	r1, #255	@ 0xff
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f003 fb30 	bl	8005cc4 <VL53L0X_WrByte>
 8002664:	4603      	mov	r3, r0
 8002666:	461a      	mov	r2, r3
 8002668:	7bfb      	ldrb	r3, [r7, #15]
 800266a:	4313      	orrs	r3, r2
 800266c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800266e:	2201      	movs	r2, #1
 8002670:	21ff      	movs	r1, #255	@ 0xff
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f003 fb26 	bl	8005cc4 <VL53L0X_WrByte>
 8002678:	4603      	mov	r3, r0
 800267a:	461a      	mov	r2, r3
 800267c:	7bfb      	ldrb	r3, [r7, #15]
 800267e:	4313      	orrs	r3, r2
 8002680:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002682:	2200      	movs	r2, #0
 8002684:	2100      	movs	r1, #0
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f003 fb1c 	bl	8005cc4 <VL53L0X_WrByte>
 800268c:	4603      	mov	r3, r0
 800268e:	461a      	mov	r2, r3
 8002690:	7bfb      	ldrb	r3, [r7, #15]
 8002692:	4313      	orrs	r3, r2
 8002694:	73fb      	strb	r3, [r7, #15]
 8002696:	e056      	b.n	8002746 <VL53L0X_SetGpioConfig+0x236>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8002698:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d120      	bne.n	80026e2 <VL53L0X_SetGpioConfig+0x1d2>
			switch (Functionality) {
 80026a0:	787b      	ldrb	r3, [r7, #1]
 80026a2:	2b04      	cmp	r3, #4
 80026a4:	d81b      	bhi.n	80026de <VL53L0X_SetGpioConfig+0x1ce>
 80026a6:	a201      	add	r2, pc, #4	@ (adr r2, 80026ac <VL53L0X_SetGpioConfig+0x19c>)
 80026a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ac:	080026c1 	.word	0x080026c1
 80026b0:	080026c7 	.word	0x080026c7
 80026b4:	080026cd 	.word	0x080026cd
 80026b8:	080026d3 	.word	0x080026d3
 80026bc:	080026d9 	.word	0x080026d9
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 80026c0:	2300      	movs	r3, #0
 80026c2:	73bb      	strb	r3, [r7, #14]
				break;
 80026c4:	e00d      	b.n	80026e2 <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 80026c6:	2301      	movs	r3, #1
 80026c8:	73bb      	strb	r3, [r7, #14]
				break;
 80026ca:	e00a      	b.n	80026e2 <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 80026cc:	2302      	movs	r3, #2
 80026ce:	73bb      	strb	r3, [r7, #14]
				break;
 80026d0:	e007      	b.n	80026e2 <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 80026d2:	2303      	movs	r3, #3
 80026d4:	73bb      	strb	r3, [r7, #14]
				break;
 80026d6:	e004      	b.n	80026e2 <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 80026d8:	2304      	movs	r3, #4
 80026da:	73bb      	strb	r3, [r7, #14]
				break;
 80026dc:	e001      	b.n	80026e2 <VL53L0X_SetGpioConfig+0x1d2>
			default:
				Status =
 80026de:	23f5      	movs	r3, #245	@ 0xf5
 80026e0:	73fb      	strb	r3, [r7, #15]
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}

		if (Status == VL53L0X_ERROR_NONE)
 80026e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d107      	bne.n	80026fa <VL53L0X_SetGpioConfig+0x1ea>
			Status = VL53L0X_WrByte(Dev,
 80026ea:	7bbb      	ldrb	r3, [r7, #14]
 80026ec:	461a      	mov	r2, r3
 80026ee:	210a      	movs	r1, #10
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f003 fae7 	bl	8005cc4 <VL53L0X_WrByte>
 80026f6:	4603      	mov	r3, r0
 80026f8:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 80026fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10f      	bne.n	8002722 <VL53L0X_SetGpioConfig+0x212>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8002702:	7e3b      	ldrb	r3, [r7, #24]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d102      	bne.n	800270e <VL53L0X_SetGpioConfig+0x1fe>
				data = 0;
 8002708:	2300      	movs	r3, #0
 800270a:	73bb      	strb	r3, [r7, #14]
 800270c:	e001      	b.n	8002712 <VL53L0X_SetGpioConfig+0x202>
			else
				data = (uint8_t)(1 << 4);
 800270e:	2310      	movs	r3, #16
 8002710:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8002712:	7bbb      	ldrb	r3, [r7, #14]
 8002714:	22ef      	movs	r2, #239	@ 0xef
 8002716:	2184      	movs	r1, #132	@ 0x84
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f003 fb21 	bl	8005d60 <VL53L0X_UpdateByte>
 800271e:	4603      	mov	r3, r0
 8002720:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8002722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d103      	bne.n	8002732 <VL53L0X_SetGpioConfig+0x222>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	787a      	ldrb	r2, [r7, #1]
 800272e:	f883 20da 	strb.w	r2, [r3, #218]	@ 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8002732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d105      	bne.n	8002746 <VL53L0X_SetGpioConfig+0x236>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800273a:	2100      	movs	r1, #0
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 f83d 	bl	80027bc <VL53L0X_ClearInterruptMask>
 8002742:	4603      	mov	r3, r0
 8002744:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002746:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800274a:	4618      	mov	r0, r3
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop

08002754 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	607a      	str	r2, [r7, #4]
 800275e:	603b      	str	r3, [r7, #0]
 8002760:	460b      	mov	r3, r1
 8002762:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002764:	2300      	movs	r3, #0
 8002766:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8002768:	f107 0314 	add.w	r3, r7, #20
 800276c:	461a      	mov	r2, r3
 800276e:	210e      	movs	r1, #14
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f003 fb53 	bl	8005e1c <VL53L0X_RdWord>
 8002776:	4603      	mov	r3, r0
 8002778:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800277a:	8abb      	ldrh	r3, [r7, #20]
 800277c:	045a      	lsls	r2, r3, #17
 800277e:	4b0e      	ldr	r3, [pc, #56]	@ (80027b8 <VL53L0X_GetInterruptThresholds+0x64>)
 8002780:	4013      	ands	r3, r2
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8002786:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10e      	bne.n	80027ac <VL53L0X_GetInterruptThresholds+0x58>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800278e:	f107 0314 	add.w	r3, r7, #20
 8002792:	461a      	mov	r2, r3
 8002794:	210c      	movs	r1, #12
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f003 fb40 	bl	8005e1c <VL53L0X_RdWord>
 800279c:	4603      	mov	r3, r0
 800279e:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80027a0:	8abb      	ldrh	r3, [r7, #20]
 80027a2:	045a      	lsls	r2, r3, #17
 80027a4:	4b04      	ldr	r3, [pc, #16]	@ (80027b8 <VL53L0X_GetInterruptThresholds+0x64>)
 80027a6:	4013      	ands	r3, r2
		*pThresholdHigh =
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80027ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3718      	adds	r7, #24
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	1ffe0000 	.word	0x1ffe0000

080027bc <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80027c6:	2300      	movs	r3, #0
 80027c8:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 80027ca:	2300      	movs	r3, #0
 80027cc:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 80027ce:	2201      	movs	r2, #1
 80027d0:	210b      	movs	r1, #11
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f003 fa76 	bl	8005cc4 <VL53L0X_WrByte>
 80027d8:	4603      	mov	r3, r0
 80027da:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 80027dc:	2200      	movs	r2, #0
 80027de:	210b      	movs	r1, #11
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f003 fa6f 	bl	8005cc4 <VL53L0X_WrByte>
 80027e6:	4603      	mov	r3, r0
 80027e8:	461a      	mov	r2, r3
 80027ea:	7bfb      	ldrb	r3, [r7, #15]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 80027f0:	f107 030d 	add.w	r3, r7, #13
 80027f4:	461a      	mov	r2, r3
 80027f6:	2113      	movs	r1, #19
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f003 fae5 	bl	8005dc8 <VL53L0X_RdByte>
 80027fe:	4603      	mov	r3, r0
 8002800:	461a      	mov	r2, r3
 8002802:	7bfb      	ldrb	r3, [r7, #15]
 8002804:	4313      	orrs	r3, r2
 8002806:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8002808:	7bbb      	ldrb	r3, [r7, #14]
 800280a:	3301      	adds	r3, #1
 800280c:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800280e:	7b7b      	ldrb	r3, [r7, #13]
 8002810:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8002814:	2b00      	cmp	r3, #0
 8002816:	d006      	beq.n	8002826 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8002818:	7bbb      	ldrb	r3, [r7, #14]
 800281a:	2b02      	cmp	r3, #2
 800281c:	d803      	bhi.n	8002826 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800281e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d0d3      	beq.n	80027ce <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8002826:	7bbb      	ldrb	r3, [r7, #14]
 8002828:	2b02      	cmp	r3, #2
 800282a:	d901      	bls.n	8002830 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800282c:	23f4      	movs	r3, #244	@ 0xf4
 800282e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8002830:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002834:	4618      	mov	r0, r3
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002846:	2300      	movs	r3, #0
 8002848:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800284a:	f107 030e 	add.w	r3, r7, #14
 800284e:	461a      	mov	r2, r3
 8002850:	2113      	movs	r1, #19
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f003 fab8 	bl	8005dc8 <VL53L0X_RdByte>
 8002858:	4603      	mov	r3, r0
 800285a:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 800285c:	7bbb      	ldrb	r3, [r7, #14]
 800285e:	f003 0207 	and.w	r2, r3, #7
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8002866:	7bbb      	ldrb	r3, [r7, #14]
 8002868:	f003 0318 	and.w	r3, r3, #24
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8002870:	23fa      	movs	r3, #250	@ 0xfa
 8002872:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8002874:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002878:	4618      	mov	r0, r3
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800288c:	2300      	movs	r3, #0
 800288e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	68b9      	ldr	r1, [r7, #8]
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f000 fa03 	bl	8002ca0 <VL53L0X_perform_ref_spad_management>
 800289a:	4603      	mov	r3, r0
 800289c:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800289e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3718      	adds	r7, #24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b084      	sub	sp, #16
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
 80028b2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80028b4:	2300      	movs	r3, #0
 80028b6:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 80028b8:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80028bc:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 80028be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028c2:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 80028c4:	f107 0308 	add.w	r3, r7, #8
 80028c8:	461a      	mov	r2, r3
 80028ca:	2128      	movs	r1, #40	@ 0x28
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f003 faa5 	bl	8005e1c <VL53L0X_RdWord>
 80028d2:	4603      	mov	r3, r0
 80028d4:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 80028d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d11e      	bne.n	800291c <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 80028de:	893b      	ldrh	r3, [r7, #8]
 80028e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 80028e8:	893b      	ldrh	r3, [r7, #8]
 80028ea:	461a      	mov	r2, r3
 80028ec:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	dd0b      	ble.n	800290c <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 80028f4:	893a      	ldrh	r2, [r7, #8]
 80028f6:	897b      	ldrh	r3, [r7, #10]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	b21b      	sxth	r3, r3
 80028fe:	461a      	mov	r2, r3
					* 250;
 8002900:	23fa      	movs	r3, #250	@ 0xfa
 8002902:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	601a      	str	r2, [r3, #0]
 800290a:	e007      	b.n	800291c <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800290c:	893b      	ldrh	r3, [r7, #8]
 800290e:	b21b      	sxth	r3, r3
 8002910:	461a      	mov	r2, r3
 8002912:	23fa      	movs	r3, #250	@ 0xfa
 8002914:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800291c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002920:	4618      	mov	r0, r3
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8002928:	b480      	push	{r7}
 800292a:	b08b      	sub	sp, #44	@ 0x2c
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
 8002934:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8002936:	2308      	movs	r3, #8
 8002938:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800293a:	2300      	movs	r3, #0
 800293c:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	f04f 32ff 	mov.w	r2, #4294967295
 8002944:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	fbb2 f3f3 	udiv	r3, r2, r3
 800294e:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	fbb3 f2f2 	udiv	r2, r3, r2
 8002958:	69b9      	ldr	r1, [r7, #24]
 800295a:	fb01 f202 	mul.w	r2, r1, r2
 800295e:	1a9b      	subs	r3, r3, r2
 8002960:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	627b      	str	r3, [r7, #36]	@ 0x24
 8002966:	e030      	b.n	80029ca <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8002968:	2300      	movs	r3, #0
 800296a:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002970:	4413      	add	r3, r2
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8002976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	429a      	cmp	r2, r3
 800297c:	d11e      	bne.n	80029bc <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800297e:	7ffa      	ldrb	r2, [r7, #31]
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	fa42 f303 	asr.w	r3, r2, r3
 8002986:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800298c:	e016      	b.n	80029bc <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800298e:	7ffb      	ldrb	r3, [r7, #31]
 8002990:	f003 0301 	and.w	r3, r3, #1
 8002994:	2b00      	cmp	r3, #0
 8002996:	d00b      	beq.n	80029b0 <get_next_good_spad+0x88>
				success = 1;
 8002998:	2301      	movs	r3, #1
 800299a:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800299c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	fb03 f202 	mul.w	r2, r3, r2
 80029a4:	6a3b      	ldr	r3, [r7, #32]
 80029a6:	4413      	add	r3, r2
 80029a8:	461a      	mov	r2, r3
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	601a      	str	r2, [r3, #0]
				break;
 80029ae:	e009      	b.n	80029c4 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 80029b0:	7ffb      	ldrb	r3, [r7, #31]
 80029b2:	085b      	lsrs	r3, r3, #1
 80029b4:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 80029b6:	6a3b      	ldr	r3, [r7, #32]
 80029b8:	3301      	adds	r3, #1
 80029ba:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 80029bc:	6a3a      	ldr	r2, [r7, #32]
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d3e4      	bcc.n	800298e <get_next_good_spad+0x66>
				coarseIndex++) {
 80029c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c6:	3301      	adds	r3, #1
 80029c8:	627b      	str	r3, [r7, #36]	@ 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80029ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d202      	bcs.n	80029d8 <get_next_good_spad+0xb0>
 80029d2:	7fbb      	ldrb	r3, [r7, #30]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d0c7      	beq.n	8002968 <get_next_good_spad+0x40>
		}
	}
}
 80029d8:	bf00      	nop
 80029da:	372c      	adds	r7, #44	@ 0x2c
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 80029ec:	2301      	movs	r3, #1
 80029ee:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	099b      	lsrs	r3, r3, #6
 80029f4:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 80029f6:	4a07      	ldr	r2, [pc, #28]	@ (8002a14 <is_aperture+0x30>)
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <is_aperture+0x22>
		isAperture = 0;
 8002a02:	2300      	movs	r3, #0
 8002a04:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8002a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3714      	adds	r7, #20
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr
 8002a14:	200002b0 	.word	0x200002b0

08002a18 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b089      	sub	sp, #36	@ 0x24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8002a24:	2300      	movs	r3, #0
 8002a26:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8002a28:	2308      	movs	r3, #8
 8002a2a:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a34:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	fbb3 f2f2 	udiv	r2, r3, r2
 8002a3e:	69b9      	ldr	r1, [r7, #24]
 8002a40:	fb01 f202 	mul.w	r2, r1, r2
 8002a44:	1a9b      	subs	r3, r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d302      	bcc.n	8002a56 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8002a50:	23ce      	movs	r3, #206	@ 0xce
 8002a52:	77fb      	strb	r3, [r7, #31]
 8002a54:	e010      	b.n	8002a78 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	b25a      	sxtb	r2, r3
 8002a60:	2101      	movs	r1, #1
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	fa01 f303 	lsl.w	r3, r1, r3
 8002a68:	b25b      	sxtb	r3, r3
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	b259      	sxtb	r1, r3
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	4413      	add	r3, r2
 8002a74:	b2ca      	uxtb	r2, r1
 8002a76:	701a      	strb	r2, [r3, #0]

	return status;
 8002a78:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3724      	adds	r7, #36	@ 0x24
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8002a92:	2306      	movs	r3, #6
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	21b0      	movs	r1, #176	@ 0xb0
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f003 f8b7 	bl	8005c0c <VL53L0X_WriteMulti>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8002aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b084      	sub	sp, #16
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
 8002ab6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8002ab8:	2306      	movs	r3, #6
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	21b0      	movs	r1, #176	@ 0xb0
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f003 f8d4 	bl	8005c6c <VL53L0X_ReadMulti>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8002ac8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3710      	adds	r7, #16
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b08c      	sub	sp, #48	@ 0x30
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	607a      	str	r2, [r7, #4]
 8002ade:	603b      	str	r3, [r7, #0]
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8002aea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002aec:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8002aee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002af0:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8002af2:	2300      	movs	r3, #0
 8002af4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002af6:	e02b      	b.n	8002b50 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8002af8:	f107 031c 	add.w	r3, r7, #28
 8002afc:	6a3a      	ldr	r2, [r7, #32]
 8002afe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f7ff ff11 	bl	8002928 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b0c:	d103      	bne.n	8002b16 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8002b0e:	23ce      	movs	r3, #206	@ 0xce
 8002b10:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			break;
 8002b14:	e020      	b.n	8002b58 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	461a      	mov	r2, r3
 8002b1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b1c:	4413      	add	r3, r2
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff ff60 	bl	80029e4 <is_aperture>
 8002b24:	4603      	mov	r3, r0
 8002b26:	461a      	mov	r2, r3
 8002b28:	7afb      	ldrb	r3, [r7, #11]
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d003      	beq.n	8002b36 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8002b2e:	23ce      	movs	r3, #206	@ 0xce
 8002b30:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			break;
 8002b34:	e010      	b.n	8002b58 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8002b3a:	6a3a      	ldr	r2, [r7, #32]
 8002b3c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002b3e:	6838      	ldr	r0, [r7, #0]
 8002b40:	f7ff ff6a 	bl	8002a18 <enable_spad_bit>
		currentSpad++;
 8002b44:	6a3b      	ldr	r3, [r7, #32]
 8002b46:	3301      	adds	r3, #1
 8002b48:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8002b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d3cf      	bcc.n	8002af8 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8002b58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b5a:	6a3a      	ldr	r2, [r7, #32]
 8002b5c:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8002b5e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d106      	bne.n	8002b74 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8002b66:	6839      	ldr	r1, [r7, #0]
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f7ff ff8d 	bl	8002a88 <set_ref_spad_map>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8002b74:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d121      	bne.n	8002bc0 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8002b7c:	f107 0314 	add.w	r3, r7, #20
 8002b80:	4619      	mov	r1, r3
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f7ff ff93 	bl	8002aae <get_ref_spad_map>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

		i = 0;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8002b92:	e011      	b.n	8002bb8 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b98:	4413      	add	r3, r2
 8002b9a:	781a      	ldrb	r2, [r3, #0]
 8002b9c:	f107 0114 	add.w	r1, r7, #20
 8002ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba2:	440b      	add	r3, r1
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d003      	beq.n	8002bb2 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8002baa:	23ce      	movs	r3, #206	@ 0xce
 8002bac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				break;
 8002bb0:	e006      	b.n	8002bc0 <enable_ref_spads+0xec>
			}
			i++;
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	627b      	str	r3, [r7, #36]	@ 0x24
		while (i < size) {
 8002bb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d3e9      	bcc.n	8002b94 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8002bc0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3730      	adds	r7, #48	@ 0x30
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b08a      	sub	sp, #40	@ 0x28
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8002be8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8002bec:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d107      	bne.n	8002c04 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8002bf4:	22c0      	movs	r2, #192	@ 0xc0
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f003 f863 	bl	8005cc4 <VL53L0X_WrByte>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8002c04:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d108      	bne.n	8002c1e <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8002c0c:	f107 0308 	add.w	r3, r7, #8
 8002c10:	4619      	mov	r1, r3
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f7ff fc4c 	bl	80024b0 <VL53L0X_PerformSingleRangingMeasurement>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8002c1e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d107      	bne.n	8002c36 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002c26:	2201      	movs	r2, #1
 8002c28:	21ff      	movs	r1, #255	@ 0xff
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f003 f84a 	bl	8005cc4 <VL53L0X_WrByte>
 8002c30:	4603      	mov	r3, r0
 8002c32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (status == VL53L0X_ERROR_NONE)
 8002c36:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d107      	bne.n	8002c4e <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	21b6      	movs	r1, #182	@ 0xb6
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f003 f8ea 	bl	8005e1c <VL53L0X_RdWord>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8002c4e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d107      	bne.n	8002c66 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002c56:	2200      	movs	r2, #0
 8002c58:	21ff      	movs	r1, #255	@ 0xff
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f003 f832 	bl	8005cc4 <VL53L0X_WrByte>
 8002c60:	4603      	mov	r3, r0
 8002c62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8002c66:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d112      	bne.n	8002c94 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8002c6e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002c72:	461a      	mov	r2, r3
 8002c74:	2101      	movs	r1, #1
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f003 f824 	bl	8005cc4 <VL53L0X_WrByte>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8002c82:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d104      	bne.n	8002c94 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002c90:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
	}

	return status;
 8002c94:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3728      	adds	r7, #40	@ 0x28
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8002ca0:	b590      	push	{r4, r7, lr}
 8002ca2:	b09d      	sub	sp, #116	@ 0x74
 8002ca4:	af06      	add	r7, sp, #24
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002cac:	2300      	movs	r3, #0
 8002cae:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8002cb2:	23b4      	movs	r3, #180	@ 0xb4
 8002cb4:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
	uint32_t minimumSpadCount = 3;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t maxSpadCount = 44;
 8002cbc:	232c      	movs	r3, #44	@ 0x2c
 8002cbe:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t currentSpadIndex = 0;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	653b      	str	r3, [r7, #80]	@ 0x50
	uint32_t lastSpadIndex = 0;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8002ccc:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8002cd0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t index = 0;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint32_t spadArraySize = 6;
 8002cda:	2306      	movs	r3, #6
 8002cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t signalRateDiff = 0;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t lastSignalRateDiff = 0;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	647b      	str	r3, [r7, #68]	@ 0x44
	uint8_t complete = 0;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	uint8_t VhvSettings = 0;
 8002cec:	2300      	movs	r3, #0
 8002cee:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f8b3 313c 	ldrh.w	r3, [r3, #316]	@ 0x13c
 8002d04:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8002d06:	2300      	movs	r3, #0
 8002d08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d0a:	e009      	b.n	8002d20 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d10:	4413      	add	r3, r2
 8002d12:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8002d16:	2200      	movs	r2, #0
 8002d18:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8002d1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d3f1      	bcc.n	8002d0c <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002d28:	2201      	movs	r2, #1
 8002d2a:	21ff      	movs	r1, #255	@ 0xff
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f002 ffc9 	bl	8005cc4 <VL53L0X_WrByte>
 8002d32:	4603      	mov	r3, r0
 8002d34:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8002d38:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d107      	bne.n	8002d50 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8002d40:	2200      	movs	r2, #0
 8002d42:	214f      	movs	r1, #79	@ 0x4f
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f002 ffbd 	bl	8005cc4 <VL53L0X_WrByte>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8002d50:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d107      	bne.n	8002d68 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8002d58:	222c      	movs	r2, #44	@ 0x2c
 8002d5a:	214e      	movs	r1, #78	@ 0x4e
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f002 ffb1 	bl	8005cc4 <VL53L0X_WrByte>
 8002d62:	4603      	mov	r3, r0
 8002d64:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8002d68:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d107      	bne.n	8002d80 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002d70:	2200      	movs	r2, #0
 8002d72:	21ff      	movs	r1, #255	@ 0xff
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f002 ffa5 	bl	8005cc4 <VL53L0X_WrByte>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8002d80:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d109      	bne.n	8002d9c <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8002d88:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	21b6      	movs	r1, #182	@ 0xb6
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f002 ff97 	bl	8005cc4 <VL53L0X_WrByte>
 8002d96:	4603      	mov	r3, r0
 8002d98:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8002d9c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d107      	bne.n	8002db4 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8002da4:	2200      	movs	r2, #0
 8002da6:	2180      	movs	r1, #128	@ 0x80
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f002 ff8b 	bl	8005cc4 <VL53L0X_WrByte>
 8002dae:	4603      	mov	r3, r0
 8002db0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8002db4:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10a      	bne.n	8002dd2 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8002dbc:	f107 0210 	add.w	r2, r7, #16
 8002dc0:	f107 0111 	add.w	r1, r7, #17
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f000 fbbb 	bl	8003542 <VL53L0X_perform_ref_calibration>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8002dd2:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d121      	bne.n	8002e1e <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	653b      	str	r3, [r7, #80]	@ 0x50
		lastSpadIndex = currentSpadIndex;
 8002dde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002de0:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8002de2:	2300      	movs	r3, #0
 8002de4:	64fb      	str	r3, [r7, #76]	@ 0x4c
		Status = enable_ref_spads(Dev,
 8002de6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002de8:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f503 7492 	add.w	r4, r3, #292	@ 0x124
		Status = enable_ref_spads(Dev,
 8002df6:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8002dfa:	f107 0218 	add.w	r2, r7, #24
 8002dfe:	9204      	str	r2, [sp, #16]
 8002e00:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002e02:	9203      	str	r2, [sp, #12]
 8002e04:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002e06:	9202      	str	r2, [sp, #8]
 8002e08:	9301      	str	r3, [sp, #4]
 8002e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e0c:	9300      	str	r3, [sp, #0]
 8002e0e:	4623      	mov	r3, r4
 8002e10:	4602      	mov	r2, r0
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f7ff fe5e 	bl	8002ad4 <enable_ref_spads>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002e1e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d174      	bne.n	8002f10 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	653b      	str	r3, [r7, #80]	@ 0x50

		Status = perform_ref_signal_measurement(Dev,
 8002e2a:	f107 0312 	add.w	r3, r7, #18
 8002e2e:	4619      	mov	r1, r3
 8002e30:	68f8      	ldr	r0, [r7, #12]
 8002e32:	f7ff fecb 	bl	8002bcc <perform_ref_signal_measurement>
 8002e36:	4603      	mov	r3, r0
 8002e38:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8002e3c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d161      	bne.n	8002f08 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8002e44:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8002e46:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d25d      	bcs.n	8002f08 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e50:	e009      	b.n	8002e66 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e56:	4413      	add	r3, r2
 8002e58:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8002e60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e62:	3301      	adds	r3, #1
 8002e64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d3f1      	bcc.n	8002e52 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8002e6e:	e002      	b.n	8002e76 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8002e70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e72:	3301      	adds	r3, #1
 8002e74:	653b      	str	r3, [r7, #80]	@ 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8002e76:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8002e7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e7c:	4413      	add	r3, r2
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff fdb0 	bl	80029e4 <is_aperture>
 8002e84:	4603      	mov	r3, r0
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d103      	bne.n	8002e92 <VL53L0X_perform_ref_spad_management+0x1f2>
 8002e8a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d3ee      	bcc.n	8002e70 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8002e92:	2301      	movs	r3, #1
 8002e94:	64fb      	str	r3, [r7, #76]	@ 0x4c

			Status = enable_ref_spads(Dev,
 8002e96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e98:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f503 7492 	add.w	r4, r3, #292	@ 0x124
			Status = enable_ref_spads(Dev,
 8002ea6:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8002eaa:	f107 0218 	add.w	r2, r7, #24
 8002eae:	9204      	str	r2, [sp, #16]
 8002eb0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002eb2:	9203      	str	r2, [sp, #12]
 8002eb4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002eb6:	9202      	str	r2, [sp, #8]
 8002eb8:	9301      	str	r3, [sp, #4]
 8002eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ebc:	9300      	str	r3, [sp, #0]
 8002ebe:	4623      	mov	r3, r4
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f7ff fe06 	bl	8002ad4 <enable_ref_spads>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8002ece:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d11b      	bne.n	8002f0e <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	653b      	str	r3, [r7, #80]	@ 0x50
				Status = perform_ref_signal_measurement(Dev,
 8002eda:	f107 0312 	add.w	r3, r7, #18
 8002ede:	4619      	mov	r1, r3
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f7ff fe73 	bl	8002bcc <perform_ref_signal_measurement>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8002eec:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d10c      	bne.n	8002f0e <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8002ef4:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8002ef6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d208      	bcs.n	8002f0e <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8002efc:	2301      	movs	r3, #1
 8002efe:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
					refSpadCount_int = minimumSpadCount;
 8002f02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f04:	63fb      	str	r3, [r7, #60]	@ 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8002f06:	e002      	b.n	8002f0e <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f0c:	e000      	b.n	8002f10 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8002f0e:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8002f10:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f040 80af 	bne.w	8003078 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8002f1a:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8002f1c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	f240 80aa 	bls.w	8003078 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8002f24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f26:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		refSpadCount_int	= minimumSpadCount;
 8002f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f503 7192 	add.w	r1, r3, #292	@ 0x124
 8002f34:	f107 031c 	add.w	r3, r7, #28
 8002f38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f00e fca2 	bl	8011884 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8002f40:	8a7b      	ldrh	r3, [r7, #18]
 8002f42:	461a      	mov	r2, r3
 8002f44:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	bfb8      	it	lt
 8002f4c:	425b      	neglt	r3, r3
 8002f4e:	647b      	str	r3, [r7, #68]	@ 0x44
			targetRefRate);
		complete = 0;
 8002f50:	2300      	movs	r3, #0
 8002f52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

		while (!complete) {
 8002f56:	e086      	b.n	8003066 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
			get_next_good_spad(
 8002f5e:	f107 0314 	add.w	r3, r7, #20
 8002f62:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002f64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f66:	f7ff fcdf 	bl	8002928 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f70:	d103      	bne.n	8002f7a <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8002f72:	23ce      	movs	r3, #206	@ 0xce
 8002f74:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
				break;
 8002f78:	e07e      	b.n	8003078 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8002f7a:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	4413      	add	r3, r2
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7ff fd2e 	bl	80029e4 <is_aperture>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d003      	beq.n	8002f9a <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8002f92:	2301      	movs	r3, #1
 8002f94:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
				break;
 8002f98:	e06e      	b.n	8003078 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8002f9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c

			currentSpadIndex = nextGoodSpad;
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	653b      	str	r3, [r7, #80]	@ 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f503 7392 	add.w	r3, r3, #292	@ 0x124
			Status = enable_spad_bit(
 8002faa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002fac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7ff fd32 	bl	8002a18 <enable_spad_bit>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8002fba:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10c      	bne.n	8002fdc <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8002fc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	653b      	str	r3, [r7, #80]	@ 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f503 7392 	add.w	r3, r3, #292	@ 0x124
				Status = set_ref_spad_map(Dev,
 8002fce:	4619      	mov	r1, r3
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f7ff fd59 	bl	8002a88 <set_ref_spad_map>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8002fdc:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d146      	bne.n	8003072 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8002fe4:	f107 0312 	add.w	r3, r7, #18
 8002fe8:	4619      	mov	r1, r3
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f7ff fdee 	bl	8002bcc <perform_ref_signal_measurement>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8002ff6:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d13b      	bne.n	8003076 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8002ffe:	8a7b      	ldrh	r3, [r7, #18]
 8003000:	461a      	mov	r2, r3
 8003002:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	bfb8      	it	lt
 800300a:	425b      	neglt	r3, r3
 800300c:	627b      	str	r3, [r7, #36]	@ 0x24

			if (peakSignalRateRef > targetRefRate) {
 800300e:	8a7b      	ldrh	r3, [r7, #18]
 8003010:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8003012:	429a      	cmp	r2, r3
 8003014:	d21c      	bcs.n	8003050 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8003016:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003018:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800301a:	429a      	cmp	r2, r3
 800301c:	d914      	bls.n	8003048 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800301e:	f107 031c 	add.w	r3, r7, #28
 8003022:	4619      	mov	r1, r3
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f7ff fd2f 	bl	8002a88 <set_ref_spad_map>
 800302a:	4603      	mov	r3, r0
 800302c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f503 7392 	add.w	r3, r3, #292	@ 0x124
					memcpy(
 8003036:	f107 011c 	add.w	r1, r7, #28
 800303a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800303c:	4618      	mov	r0, r3
 800303e:	f00e fc21 	bl	8011884 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8003042:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003044:	3b01      	subs	r3, #1
 8003046:	63fb      	str	r3, [r7, #60]	@ 0x3c
				}
				complete = 1;
 8003048:	2301      	movs	r3, #1
 800304a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800304e:	e00a      	b.n	8003066 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8003050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003052:	647b      	str	r3, [r7, #68]	@ 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f503 7192 	add.w	r1, r3, #292	@ 0x124
				memcpy(lastSpadArray,
 800305a:	f107 031c 	add.w	r3, r7, #28
 800305e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003060:	4618      	mov	r0, r3
 8003062:	f00e fc0f 	bl	8011884 <memcpy>
		while (!complete) {
 8003066:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800306a:	2b00      	cmp	r3, #0
 800306c:	f43f af74 	beq.w	8002f58 <VL53L0X_perform_ref_spad_management+0x2b8>
 8003070:	e002      	b.n	8003078 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8003072:	bf00      	nop
 8003074:	e000      	b.n	8003078 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8003076:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003078:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800307c:	2b00      	cmp	r3, #0
 800307e:	d115      	bne.n	80030ac <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003084:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800308c:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	b2da      	uxtb	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	781a      	ldrb	r2, [r3, #0]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 80030ac:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	375c      	adds	r7, #92	@ 0x5c
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd90      	pop	{r4, r7, pc}

080030b8 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 80030b8:	b590      	push	{r4, r7, lr}
 80030ba:	b093      	sub	sp, #76	@ 0x4c
 80030bc:	af06      	add	r7, sp, #24
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	4613      	mov	r3, r2
 80030c4:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80030c6:	2300      	movs	r3, #0
 80030c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint32_t currentSpadIndex = 0;
 80030cc:	2300      	movs	r3, #0
 80030ce:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint8_t startSelect = 0xB4;
 80030d0:	23b4      	movs	r3, #180	@ 0xb4
 80030d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint32_t spadArraySize = 6;
 80030d6:	2306      	movs	r3, #6
 80030d8:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 80030da:	232c      	movs	r3, #44	@ 0x2c
 80030dc:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80030de:	2201      	movs	r2, #1
 80030e0:	21ff      	movs	r1, #255	@ 0xff
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f002 fdee 	bl	8005cc4 <VL53L0X_WrByte>
 80030e8:	4603      	mov	r3, r0
 80030ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 80030ee:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d107      	bne.n	8003106 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 80030f6:	2200      	movs	r2, #0
 80030f8:	214f      	movs	r1, #79	@ 0x4f
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f002 fde2 	bl	8005cc4 <VL53L0X_WrByte>
 8003100:	4603      	mov	r3, r0
 8003102:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8003106:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800310a:	2b00      	cmp	r3, #0
 800310c:	d107      	bne.n	800311e <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800310e:	222c      	movs	r2, #44	@ 0x2c
 8003110:	214e      	movs	r1, #78	@ 0x4e
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f002 fdd6 	bl	8005cc4 <VL53L0X_WrByte>
 8003118:	4603      	mov	r3, r0
 800311a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800311e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003122:	2b00      	cmp	r3, #0
 8003124:	d107      	bne.n	8003136 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003126:	2200      	movs	r2, #0
 8003128:	21ff      	movs	r1, #255	@ 0xff
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f002 fdca 	bl	8005cc4 <VL53L0X_WrByte>
 8003130:	4603      	mov	r3, r0
 8003132:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8003136:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800313a:	2b00      	cmp	r3, #0
 800313c:	d109      	bne.n	8003152 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800313e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003142:	461a      	mov	r2, r3
 8003144:	21b6      	movs	r1, #182	@ 0xb6
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f002 fdbc 	bl	8005cc4 <VL53L0X_WrByte>
 800314c:	4603      	mov	r3, r0
 800314e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8003152:	2300      	movs	r3, #0
 8003154:	627b      	str	r3, [r7, #36]	@ 0x24
 8003156:	e009      	b.n	800316c <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315c:	4413      	add	r3, r2
 800315e:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8003162:	2200      	movs	r2, #0
 8003164:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8003166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003168:	3301      	adds	r3, #1
 800316a:	627b      	str	r3, [r7, #36]	@ 0x24
 800316c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	429a      	cmp	r2, r3
 8003172:	d3f1      	bcc.n	8003158 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8003174:	79fb      	ldrb	r3, [r7, #7]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d011      	beq.n	800319e <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800317a:	e002      	b.n	8003182 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800317c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800317e:	3301      	adds	r3, #1
 8003180:	62bb      	str	r3, [r7, #40]	@ 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8003182:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8003186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003188:	4413      	add	r3, r2
 800318a:	4618      	mov	r0, r3
 800318c:	f7ff fc2a 	bl	80029e4 <is_aperture>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d103      	bne.n	800319e <VL53L0X_set_reference_spads+0xe6>
 8003196:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	429a      	cmp	r2, r3
 800319c:	d3ee      	bcc.n	800317c <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f503 7492 	add.w	r4, r3, #292	@ 0x124
	Status = enable_ref_spads(Dev,
 80031aa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80031ae:	79f9      	ldrb	r1, [r7, #7]
 80031b0:	f107 0214 	add.w	r2, r7, #20
 80031b4:	9204      	str	r2, [sp, #16]
 80031b6:	68ba      	ldr	r2, [r7, #8]
 80031b8:	9203      	str	r2, [sp, #12]
 80031ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031bc:	9202      	str	r2, [sp, #8]
 80031be:	9301      	str	r3, [sp, #4]
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	9300      	str	r3, [sp, #0]
 80031c4:	4623      	mov	r3, r4
 80031c6:	4602      	mov	r2, r0
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f7ff fc83 	bl	8002ad4 <enable_ref_spads>
 80031ce:	4603      	mov	r3, r0
 80031d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 80031d4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d10c      	bne.n	80031f6 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	79fa      	ldrb	r2, [r7, #7]
 80031f2:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 80031f6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3734      	adds	r7, #52	@ 0x34
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd90      	pop	{r4, r7, pc}

08003202 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b084      	sub	sp, #16
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
 800320a:	460b      	mov	r3, r1
 800320c:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800320e:	2300      	movs	r3, #0
 8003210:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10a      	bne.n	8003230 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800321a:	78fb      	ldrb	r3, [r7, #3]
 800321c:	f043 0301 	orr.w	r3, r3, #1
 8003220:	b2db      	uxtb	r3, r3
 8003222:	461a      	mov	r2, r3
 8003224:	2100      	movs	r1, #0
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f002 fd4c 	bl	8005cc4 <VL53L0X_WrByte>
 800322c:	4603      	mov	r3, r0
 800322e:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8003230:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d104      	bne.n	8003242 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 f9bf 	bl	80035bc <VL53L0X_measurement_poll_for_completion>
 800323e:	4603      	mov	r3, r0
 8003240:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d105      	bne.n	8003256 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800324a:	2100      	movs	r1, #0
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f7ff fab5 	bl	80027bc <VL53L0X_ClearInterruptMask>
 8003252:	4603      	mov	r3, r0
 8003254:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d106      	bne.n	800326c <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800325e:	2200      	movs	r2, #0
 8003260:	2100      	movs	r1, #0
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f002 fd2e 	bl	8005cc4 <VL53L0X_WrByte>
 8003268:	4603      	mov	r3, r0
 800326a:	73fb      	strb	r3, [r7, #15]

	return Status;
 800326c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003270:	4618      	mov	r0, r3
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	4608      	mov	r0, r1
 8003282:	4611      	mov	r1, r2
 8003284:	461a      	mov	r2, r3
 8003286:	4603      	mov	r3, r0
 8003288:	70fb      	strb	r3, [r7, #3]
 800328a:	460b      	mov	r3, r1
 800328c:	70bb      	strb	r3, [r7, #2]
 800328e:	4613      	mov	r3, r2
 8003290:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003292:	2300      	movs	r3, #0
 8003294:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8003296:	2300      	movs	r3, #0
 8003298:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800329a:	2201      	movs	r2, #1
 800329c:	21ff      	movs	r1, #255	@ 0xff
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f002 fd10 	bl	8005cc4 <VL53L0X_WrByte>
 80032a4:	4603      	mov	r3, r0
 80032a6:	461a      	mov	r2, r3
 80032a8:	7bfb      	ldrb	r3, [r7, #15]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80032ae:	2200      	movs	r2, #0
 80032b0:	2100      	movs	r1, #0
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f002 fd06 	bl	8005cc4 <VL53L0X_WrByte>
 80032b8:	4603      	mov	r3, r0
 80032ba:	461a      	mov	r2, r3
 80032bc:	7bfb      	ldrb	r3, [r7, #15]
 80032be:	4313      	orrs	r3, r2
 80032c0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80032c2:	2200      	movs	r2, #0
 80032c4:	21ff      	movs	r1, #255	@ 0xff
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f002 fcfc 	bl	8005cc4 <VL53L0X_WrByte>
 80032cc:	4603      	mov	r3, r0
 80032ce:	461a      	mov	r2, r3
 80032d0:	7bfb      	ldrb	r3, [r7, #15]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 80032d6:	78fb      	ldrb	r3, [r7, #3]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d01e      	beq.n	800331a <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 80032dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d009      	beq.n	80032f8 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	21cb      	movs	r1, #203	@ 0xcb
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f002 fd6d 	bl	8005dc8 <VL53L0X_RdByte>
 80032ee:	4603      	mov	r3, r0
 80032f0:	461a      	mov	r2, r3
 80032f2:	7bfb      	ldrb	r3, [r7, #15]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 80032f8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d02a      	beq.n	8003356 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8003300:	f107 030e 	add.w	r3, r7, #14
 8003304:	461a      	mov	r2, r3
 8003306:	21ee      	movs	r1, #238	@ 0xee
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f002 fd5d 	bl	8005dc8 <VL53L0X_RdByte>
 800330e:	4603      	mov	r3, r0
 8003310:	461a      	mov	r2, r3
 8003312:	7bfb      	ldrb	r3, [r7, #15]
 8003314:	4313      	orrs	r3, r2
 8003316:	73fb      	strb	r3, [r7, #15]
 8003318:	e01d      	b.n	8003356 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800331a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00a      	beq.n	8003338 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8003322:	78bb      	ldrb	r3, [r7, #2]
 8003324:	461a      	mov	r2, r3
 8003326:	21cb      	movs	r1, #203	@ 0xcb
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f002 fccb 	bl	8005cc4 <VL53L0X_WrByte>
 800332e:	4603      	mov	r3, r0
 8003330:	461a      	mov	r2, r3
 8003332:	7bfb      	ldrb	r3, [r7, #15]
 8003334:	4313      	orrs	r3, r2
 8003336:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8003338:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00a      	beq.n	8003356 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8003340:	787b      	ldrb	r3, [r7, #1]
 8003342:	2280      	movs	r2, #128	@ 0x80
 8003344:	21ee      	movs	r1, #238	@ 0xee
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f002 fd0a 	bl	8005d60 <VL53L0X_UpdateByte>
 800334c:	4603      	mov	r3, r0
 800334e:	461a      	mov	r2, r3
 8003350:	7bfb      	ldrb	r3, [r7, #15]
 8003352:	4313      	orrs	r3, r2
 8003354:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003356:	2201      	movs	r2, #1
 8003358:	21ff      	movs	r1, #255	@ 0xff
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f002 fcb2 	bl	8005cc4 <VL53L0X_WrByte>
 8003360:	4603      	mov	r3, r0
 8003362:	461a      	mov	r2, r3
 8003364:	7bfb      	ldrb	r3, [r7, #15]
 8003366:	4313      	orrs	r3, r2
 8003368:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800336a:	2201      	movs	r2, #1
 800336c:	2100      	movs	r1, #0
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f002 fca8 	bl	8005cc4 <VL53L0X_WrByte>
 8003374:	4603      	mov	r3, r0
 8003376:	461a      	mov	r2, r3
 8003378:	7bfb      	ldrb	r3, [r7, #15]
 800337a:	4313      	orrs	r3, r2
 800337c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800337e:	2200      	movs	r2, #0
 8003380:	21ff      	movs	r1, #255	@ 0xff
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f002 fc9e 	bl	8005cc4 <VL53L0X_WrByte>
 8003388:	4603      	mov	r3, r0
 800338a:	461a      	mov	r2, r3
 800338c:	7bfb      	ldrb	r3, [r7, #15]
 800338e:	4313      	orrs	r3, r2
 8003390:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8003392:	7bbb      	ldrb	r3, [r7, #14]
 8003394:	f023 0310 	bic.w	r3, r3, #16
 8003398:	b2da      	uxtb	r2, r3
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	701a      	strb	r2, [r3, #0]

	return Status;
 800339e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b08a      	sub	sp, #40	@ 0x28
 80033ae:	af04      	add	r7, sp, #16
 80033b0:	60f8      	str	r0, [r7, #12]
 80033b2:	60b9      	str	r1, [r7, #8]
 80033b4:	4611      	mov	r1, r2
 80033b6:	461a      	mov	r2, r3
 80033b8:	460b      	mov	r3, r1
 80033ba:	71fb      	strb	r3, [r7, #7]
 80033bc:	4613      	mov	r3, r2
 80033be:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80033c0:	2300      	movs	r3, #0
 80033c2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80033c4:	2300      	movs	r3, #0
 80033c6:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80033c8:	2300      	movs	r3, #0
 80033ca:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80033cc:	2300      	movs	r3, #0
 80033ce:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 80033d0:	2300      	movs	r3, #0
 80033d2:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80033d4:	79bb      	ldrb	r3, [r7, #6]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d003      	beq.n	80033e2 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 80033e0:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 80033e2:	2201      	movs	r2, #1
 80033e4:	2101      	movs	r1, #1
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f002 fc6c 	bl	8005cc4 <VL53L0X_WrByte>
 80033ec:	4603      	mov	r3, r0
 80033ee:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80033f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d105      	bne.n	8003404 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 80033f8:	2140      	movs	r1, #64	@ 0x40
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	f7ff ff01 	bl	8003202 <VL53L0X_perform_single_ref_calibration>
 8003400:	4603      	mov	r3, r0
 8003402:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8003404:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d115      	bne.n	8003438 <VL53L0X_perform_vhv_calibration+0x8e>
 800340c:	79fb      	ldrb	r3, [r7, #7]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d112      	bne.n	8003438 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8003412:	7d39      	ldrb	r1, [r7, #20]
 8003414:	7d7a      	ldrb	r2, [r7, #21]
 8003416:	2300      	movs	r3, #0
 8003418:	9303      	str	r3, [sp, #12]
 800341a:	2301      	movs	r3, #1
 800341c:	9302      	str	r3, [sp, #8]
 800341e:	f107 0313 	add.w	r3, r7, #19
 8003422:	9301      	str	r3, [sp, #4]
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	460b      	mov	r3, r1
 800342a:	2101      	movs	r1, #1
 800342c:	68f8      	ldr	r0, [r7, #12]
 800342e:	f7ff ff23 	bl	8003278 <VL53L0X_ref_calibration_io>
 8003432:	4603      	mov	r3, r0
 8003434:	75fb      	strb	r3, [r7, #23]
 8003436:	e002      	b.n	800343e <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	2200      	movs	r2, #0
 800343c:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800343e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d112      	bne.n	800346c <VL53L0X_perform_vhv_calibration+0xc2>
 8003446:	79bb      	ldrb	r3, [r7, #6]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00f      	beq.n	800346c <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800344c:	7dbb      	ldrb	r3, [r7, #22]
 800344e:	461a      	mov	r2, r3
 8003450:	2101      	movs	r1, #1
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f002 fc36 	bl	8005cc4 <VL53L0X_WrByte>
 8003458:	4603      	mov	r3, r0
 800345a:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800345c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d103      	bne.n	800346c <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	7dba      	ldrb	r2, [r7, #22]
 8003468:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	return Status;
 800346c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003470:	4618      	mov	r0, r3
 8003472:	3718      	adds	r7, #24
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b08a      	sub	sp, #40	@ 0x28
 800347c:	af04      	add	r7, sp, #16
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	4611      	mov	r1, r2
 8003484:	461a      	mov	r2, r3
 8003486:	460b      	mov	r3, r1
 8003488:	71fb      	strb	r3, [r7, #7]
 800348a:	4613      	mov	r3, r2
 800348c:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800348e:	2300      	movs	r3, #0
 8003490:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8003492:	2300      	movs	r3, #0
 8003494:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8003496:	2300      	movs	r3, #0
 8003498:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800349a:	2300      	movs	r3, #0
 800349c:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800349e:	79bb      	ldrb	r3, [r7, #6]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 80034aa:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 80034ac:	2202      	movs	r2, #2
 80034ae:	2101      	movs	r1, #1
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f002 fc07 	bl	8005cc4 <VL53L0X_WrByte>
 80034b6:	4603      	mov	r3, r0
 80034b8:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80034ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d105      	bne.n	80034ce <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 80034c2:	2100      	movs	r1, #0
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f7ff fe9c 	bl	8003202 <VL53L0X_perform_single_ref_calibration>
 80034ca:	4603      	mov	r3, r0
 80034cc:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80034ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d115      	bne.n	8003502 <VL53L0X_perform_phase_calibration+0x8a>
 80034d6:	79fb      	ldrb	r3, [r7, #7]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d112      	bne.n	8003502 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80034dc:	7d39      	ldrb	r1, [r7, #20]
 80034de:	7d7a      	ldrb	r2, [r7, #21]
 80034e0:	2301      	movs	r3, #1
 80034e2:	9303      	str	r3, [sp, #12]
 80034e4:	2300      	movs	r3, #0
 80034e6:	9302      	str	r3, [sp, #8]
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	9301      	str	r3, [sp, #4]
 80034ec:	f107 0313 	add.w	r3, r7, #19
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	460b      	mov	r3, r1
 80034f4:	2101      	movs	r1, #1
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f7ff febe 	bl	8003278 <VL53L0X_ref_calibration_io>
 80034fc:	4603      	mov	r3, r0
 80034fe:	75fb      	strb	r3, [r7, #23]
 8003500:	e002      	b.n	8003508 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	2200      	movs	r2, #0
 8003506:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8003508:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d112      	bne.n	8003536 <VL53L0X_perform_phase_calibration+0xbe>
 8003510:	79bb      	ldrb	r3, [r7, #6]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00f      	beq.n	8003536 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003516:	7dbb      	ldrb	r3, [r7, #22]
 8003518:	461a      	mov	r2, r3
 800351a:	2101      	movs	r1, #1
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f002 fbd1 	bl	8005cc4 <VL53L0X_WrByte>
 8003522:	4603      	mov	r3, r0
 8003524:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8003526:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d103      	bne.n	8003536 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	7dba      	ldrb	r2, [r7, #22]
 8003532:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	return Status;
 8003536:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800353a:	4618      	mov	r0, r3
 800353c:	3718      	adds	r7, #24
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b086      	sub	sp, #24
 8003546:	af00      	add	r7, sp, #0
 8003548:	60f8      	str	r0, [r7, #12]
 800354a:	60b9      	str	r1, [r7, #8]
 800354c:	607a      	str	r2, [r7, #4]
 800354e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003550:	2300      	movs	r3, #0
 8003552:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8003554:	2300      	movs	r3, #0
 8003556:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800355e:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8003560:	78fa      	ldrb	r2, [r7, #3]
 8003562:	2300      	movs	r3, #0
 8003564:	68b9      	ldr	r1, [r7, #8]
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f7ff ff1f 	bl	80033aa <VL53L0X_perform_vhv_calibration>
 800356c:	4603      	mov	r3, r0
 800356e:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8003570:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d107      	bne.n	8003588 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8003578:	78fa      	ldrb	r2, [r7, #3]
 800357a:	2300      	movs	r3, #0
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f7ff ff7a 	bl	8003478 <VL53L0X_perform_phase_calibration>
 8003584:	4603      	mov	r3, r0
 8003586:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8003588:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d10f      	bne.n	80035b0 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003590:	7dbb      	ldrb	r3, [r7, #22]
 8003592:	461a      	mov	r2, r3
 8003594:	2101      	movs	r1, #1
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f002 fb94 	bl	8005cc4 <VL53L0X_WrByte>
 800359c:	4603      	mov	r3, r0
 800359e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80035a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d103      	bne.n	80035b0 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	7dba      	ldrb	r2, [r7, #22]
 80035ac:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	return Status;
 80035b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3718      	adds	r7, #24
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80035c4:	2300      	movs	r3, #0
 80035c6:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 80035c8:	2300      	movs	r3, #0
 80035ca:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 80035cc:	2300      	movs	r3, #0
 80035ce:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80035d0:	f107 030f 	add.w	r3, r7, #15
 80035d4:	4619      	mov	r1, r3
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f7fe fe0e 	bl	80021f8 <VL53L0X_GetMeasurementDataReady>
 80035dc:	4603      	mov	r3, r0
 80035de:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 80035e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d110      	bne.n	800360a <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 80035e8:	7bfb      	ldrb	r3, [r7, #15]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d00f      	beq.n	800360e <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	3301      	adds	r3, #1
 80035f2:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80035fa:	d302      	bcc.n	8003602 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 80035fc:	23f9      	movs	r3, #249	@ 0xf9
 80035fe:	75fb      	strb	r3, [r7, #23]
			break;
 8003600:	e006      	b.n	8003610 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f002 fc7c 	bl	8005f00 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8003608:	e7e2      	b.n	80035d0 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800360a:	bf00      	nop
 800360c:	e000      	b.n	8003610 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800360e:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8003610:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003614:	4618      	mov	r0, r3
 8003616:	3718      	adds	r7, #24
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	4603      	mov	r3, r0
 8003624:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8003626:	2300      	movs	r3, #0
 8003628:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800362a:	79fb      	ldrb	r3, [r7, #7]
 800362c:	3301      	adds	r3, #1
 800362e:	b2db      	uxtb	r3, r3
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8003634:	7bfb      	ldrb	r3, [r7, #15]
}
 8003636:	4618      	mov	r0, r3
 8003638:	3714      	adds	r7, #20
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 8003642:	b480      	push	{r7}
 8003644:	b085      	sub	sp, #20
 8003646:	af00      	add	r7, sp, #0
 8003648:	4603      	mov	r3, r0
 800364a:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 800364c:	2300      	movs	r3, #0
 800364e:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8003650:	79fb      	ldrb	r3, [r7, #7]
 8003652:	085b      	lsrs	r3, r3, #1
 8003654:	b2db      	uxtb	r3, r3
 8003656:	3b01      	subs	r3, #1
 8003658:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800365a:	7bfb      	ldrb	r3, [r7, #15]
}
 800365c:	4618      	mov	r0, r3
 800365e:	3714      	adds	r7, #20
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8003670:	2300      	movs	r3, #0
 8003672:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8003674:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003678:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800367a:	e002      	b.n	8003682 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	089b      	lsrs	r3, r3, #2
 8003680:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8003682:	68ba      	ldr	r2, [r7, #8]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	429a      	cmp	r2, r3
 8003688:	d8f8      	bhi.n	800367c <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800368a:	e017      	b.n	80036bc <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	4413      	add	r3, r2
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	429a      	cmp	r2, r3
 8003696:	d30b      	bcc.n	80036b0 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	4413      	add	r3, r2
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	085b      	lsrs	r3, r3, #1
 80036a8:	68ba      	ldr	r2, [r7, #8]
 80036aa:	4413      	add	r3, r2
 80036ac:	60fb      	str	r3, [r7, #12]
 80036ae:	e002      	b.n	80036b6 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	085b      	lsrs	r3, r3, #1
 80036b4:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	089b      	lsrs	r3, r3, #2
 80036ba:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1e4      	bne.n	800368c <VL53L0X_isqrt+0x24>
	}

	return res;
 80036c2:	68fb      	ldr	r3, [r7, #12]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3714      	adds	r7, #20
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80036d8:	2300      	movs	r3, #0
 80036da:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 80036dc:	2200      	movs	r2, #0
 80036de:	2183      	movs	r1, #131	@ 0x83
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f002 faef 	bl	8005cc4 <VL53L0X_WrByte>
 80036e6:	4603      	mov	r3, r0
 80036e8:	461a      	mov	r2, r3
 80036ea:	7dfb      	ldrb	r3, [r7, #23]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 80036f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d11e      	bne.n	8003736 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 80036f8:	2300      	movs	r3, #0
 80036fa:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 80036fc:	f107 030f 	add.w	r3, r7, #15
 8003700:	461a      	mov	r2, r3
 8003702:	2183      	movs	r1, #131	@ 0x83
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f002 fb5f 	bl	8005dc8 <VL53L0X_RdByte>
 800370a:	4603      	mov	r3, r0
 800370c:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800370e:	7bfb      	ldrb	r3, [r7, #15]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d10a      	bne.n	800372a <VL53L0X_device_read_strobe+0x5a>
 8003714:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d106      	bne.n	800372a <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	3301      	adds	r3, #1
 8003720:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003728:	d3e8      	bcc.n	80036fc <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003730:	d301      	bcc.n	8003736 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8003732:	23f9      	movs	r3, #249	@ 0xf9
 8003734:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8003736:	2201      	movs	r2, #1
 8003738:	2183      	movs	r1, #131	@ 0x83
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f002 fac2 	bl	8005cc4 <VL53L0X_WrByte>
 8003740:	4603      	mov	r3, r0
 8003742:	461a      	mov	r2, r3
 8003744:	7dfb      	ldrb	r3, [r7, #23]
 8003746:	4313      	orrs	r3, r2
 8003748:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800374a:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800374e:	4618      	mov	r0, r3
 8003750:	3718      	adds	r7, #24
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b098      	sub	sp, #96	@ 0x60
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
 800375e:	460b      	mov	r3, r1
 8003760:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003762:	2300      	movs	r3, #0
 8003764:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8003768:	2300      	movs	r3, #0
 800376a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	uint8_t ReferenceSpadType = 0;
 800376e:	2300      	movs	r3, #0
 8003770:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
	uint32_t PartUIDUpper = 0;
 8003774:	2300      	movs	r3, #0
 8003776:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t PartUIDLower = 0;
 8003778:	2300      	movs	r3, #0
 800377a:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800377c:	2300      	movs	r3, #0
 800377e:	64bb      	str	r3, [r7, #72]	@ 0x48
	int16_t OffsetMicroMeters = 0;
 8003780:	2300      	movs	r3, #0
 8003782:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8003786:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 800378a:	647b      	str	r3, [r7, #68]	@ 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800378c:	2300      	movs	r3, #0
 800378e:	657b      	str	r3, [r7, #84]	@ 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8003790:	2300      	movs	r3, #0
 8003792:	653b      	str	r3, [r7, #80]	@ 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8003794:	2300      	movs	r3, #0
 8003796:	643b      	str	r3, [r7, #64]	@ 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800379e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 80037a2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80037a6:	2b07      	cmp	r3, #7
 80037a8:	f000 8408 	beq.w	8003fbc <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80037ac:	2201      	movs	r2, #1
 80037ae:	2180      	movs	r1, #128	@ 0x80
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f002 fa87 	bl	8005cc4 <VL53L0X_WrByte>
 80037b6:	4603      	mov	r3, r0
 80037b8:	461a      	mov	r2, r3
 80037ba:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80037be:	4313      	orrs	r3, r2
 80037c0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80037c4:	2201      	movs	r2, #1
 80037c6:	21ff      	movs	r1, #255	@ 0xff
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f002 fa7b 	bl	8005cc4 <VL53L0X_WrByte>
 80037ce:	4603      	mov	r3, r0
 80037d0:	461a      	mov	r2, r3
 80037d2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80037d6:	4313      	orrs	r3, r2
 80037d8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80037dc:	2200      	movs	r2, #0
 80037de:	2100      	movs	r1, #0
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f002 fa6f 	bl	8005cc4 <VL53L0X_WrByte>
 80037e6:	4603      	mov	r3, r0
 80037e8:	461a      	mov	r2, r3
 80037ea:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80037ee:	4313      	orrs	r3, r2
 80037f0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80037f4:	2206      	movs	r2, #6
 80037f6:	21ff      	movs	r1, #255	@ 0xff
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f002 fa63 	bl	8005cc4 <VL53L0X_WrByte>
 80037fe:	4603      	mov	r3, r0
 8003800:	461a      	mov	r2, r3
 8003802:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003806:	4313      	orrs	r3, r2
 8003808:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800380c:	f107 0337 	add.w	r3, r7, #55	@ 0x37
 8003810:	461a      	mov	r2, r3
 8003812:	2183      	movs	r1, #131	@ 0x83
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f002 fad7 	bl	8005dc8 <VL53L0X_RdByte>
 800381a:	4603      	mov	r3, r0
 800381c:	461a      	mov	r2, r3
 800381e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003822:	4313      	orrs	r3, r2
 8003824:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8003828:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800382c:	f043 0304 	orr.w	r3, r3, #4
 8003830:	b2db      	uxtb	r3, r3
 8003832:	461a      	mov	r2, r3
 8003834:	2183      	movs	r1, #131	@ 0x83
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f002 fa44 	bl	8005cc4 <VL53L0X_WrByte>
 800383c:	4603      	mov	r3, r0
 800383e:	461a      	mov	r2, r3
 8003840:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003844:	4313      	orrs	r3, r2
 8003846:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800384a:	2207      	movs	r2, #7
 800384c:	21ff      	movs	r1, #255	@ 0xff
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f002 fa38 	bl	8005cc4 <VL53L0X_WrByte>
 8003854:	4603      	mov	r3, r0
 8003856:	461a      	mov	r2, r3
 8003858:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800385c:	4313      	orrs	r3, r2
 800385e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8003862:	2201      	movs	r2, #1
 8003864:	2181      	movs	r1, #129	@ 0x81
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f002 fa2c 	bl	8005cc4 <VL53L0X_WrByte>
 800386c:	4603      	mov	r3, r0
 800386e:	461a      	mov	r2, r3
 8003870:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003874:	4313      	orrs	r3, r2
 8003876:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f002 fb40 	bl	8005f00 <VL53L0X_PollingDelay>
 8003880:	4603      	mov	r3, r0
 8003882:	461a      	mov	r2, r3
 8003884:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003888:	4313      	orrs	r3, r2
 800388a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800388e:	2201      	movs	r2, #1
 8003890:	2180      	movs	r1, #128	@ 0x80
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f002 fa16 	bl	8005cc4 <VL53L0X_WrByte>
 8003898:	4603      	mov	r3, r0
 800389a:	461a      	mov	r2, r3
 800389c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80038a0:	4313      	orrs	r3, r2
 80038a2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		if (((option & 1) == 1) &&
 80038a6:	78fb      	ldrb	r3, [r7, #3]
 80038a8:	f003 0301 	and.w	r3, r3, #1
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f000 8098 	beq.w	80039e2 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80038b2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80038b6:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f040 8091 	bne.w	80039e2 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 80038c0:	226b      	movs	r2, #107	@ 0x6b
 80038c2:	2194      	movs	r1, #148	@ 0x94
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f002 f9fd 	bl	8005cc4 <VL53L0X_WrByte>
 80038ca:	4603      	mov	r3, r0
 80038cc:	461a      	mov	r2, r3
 80038ce:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80038d2:	4313      	orrs	r3, r2
 80038d4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f7ff fef9 	bl	80036d0 <VL53L0X_device_read_strobe>
 80038de:	4603      	mov	r3, r0
 80038e0:	461a      	mov	r2, r3
 80038e2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80038e6:	4313      	orrs	r3, r2
 80038e8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80038ec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80038f0:	461a      	mov	r2, r3
 80038f2:	2190      	movs	r1, #144	@ 0x90
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f002 fac7 	bl	8005e88 <VL53L0X_RdDWord>
 80038fa:	4603      	mov	r3, r0
 80038fc:	461a      	mov	r2, r3
 80038fe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003902:	4313      	orrs	r3, r2
 8003904:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8003908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800390a:	0a1b      	lsrs	r3, r3, #8
 800390c:	b2db      	uxtb	r3, r3
 800390e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003912:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8003916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003918:	0bdb      	lsrs	r3, r3, #15
 800391a:	b2db      	uxtb	r3, r3
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8003924:	2224      	movs	r2, #36	@ 0x24
 8003926:	2194      	movs	r1, #148	@ 0x94
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f002 f9cb 	bl	8005cc4 <VL53L0X_WrByte>
 800392e:	4603      	mov	r3, r0
 8003930:	461a      	mov	r2, r3
 8003932:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003936:	4313      	orrs	r3, r2
 8003938:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f7ff fec7 	bl	80036d0 <VL53L0X_device_read_strobe>
 8003942:	4603      	mov	r3, r0
 8003944:	461a      	mov	r2, r3
 8003946:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800394a:	4313      	orrs	r3, r2
 800394c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003950:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003954:	461a      	mov	r2, r3
 8003956:	2190      	movs	r1, #144	@ 0x90
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f002 fa95 	bl	8005e88 <VL53L0X_RdDWord>
 800395e:	4603      	mov	r3, r0
 8003960:	461a      	mov	r2, r3
 8003962:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003966:	4313      	orrs	r3, r2
 8003968:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800396c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800396e:	0e1b      	lsrs	r3, r3, #24
 8003970:	b2db      	uxtb	r3, r3
 8003972:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8003974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003976:	0c1b      	lsrs	r3, r3, #16
 8003978:	b2db      	uxtb	r3, r3
 800397a:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800397c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800397e:	0a1b      	lsrs	r3, r3, #8
 8003980:	b2db      	uxtb	r3, r3
 8003982:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8003984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003986:	b2db      	uxtb	r3, r3
 8003988:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800398a:	2225      	movs	r2, #37	@ 0x25
 800398c:	2194      	movs	r1, #148	@ 0x94
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f002 f998 	bl	8005cc4 <VL53L0X_WrByte>
 8003994:	4603      	mov	r3, r0
 8003996:	461a      	mov	r2, r3
 8003998:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800399c:	4313      	orrs	r3, r2
 800399e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7ff fe94 	bl	80036d0 <VL53L0X_device_read_strobe>
 80039a8:	4603      	mov	r3, r0
 80039aa:	461a      	mov	r2, r3
 80039ac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80039b0:	4313      	orrs	r3, r2
 80039b2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80039b6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80039ba:	461a      	mov	r2, r3
 80039bc:	2190      	movs	r1, #144	@ 0x90
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f002 fa62 	bl	8005e88 <VL53L0X_RdDWord>
 80039c4:	4603      	mov	r3, r0
 80039c6:	461a      	mov	r2, r3
 80039c8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80039cc:	4313      	orrs	r3, r2
 80039ce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 80039d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d4:	0e1b      	lsrs	r3, r3, #24
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 80039da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039dc:	0c1b      	lsrs	r3, r3, #16
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 80039e2:	78fb      	ldrb	r3, [r7, #3]
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 8189 	beq.w	8003d00 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80039ee:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80039f2:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f040 8182 	bne.w	8003d00 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 80039fc:	2202      	movs	r2, #2
 80039fe:	2194      	movs	r1, #148	@ 0x94
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f002 f95f 	bl	8005cc4 <VL53L0X_WrByte>
 8003a06:	4603      	mov	r3, r0
 8003a08:	461a      	mov	r2, r3
 8003a0a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f7ff fe5b 	bl	80036d0 <VL53L0X_device_read_strobe>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003a22:	4313      	orrs	r3, r2
 8003a24:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8003a28:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	2190      	movs	r1, #144	@ 0x90
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f002 f9c9 	bl	8005dc8 <VL53L0X_RdByte>
 8003a36:	4603      	mov	r3, r0
 8003a38:	461a      	mov	r2, r3
 8003a3a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8003a44:	227b      	movs	r2, #123	@ 0x7b
 8003a46:	2194      	movs	r1, #148	@ 0x94
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f002 f93b 	bl	8005cc4 <VL53L0X_WrByte>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	461a      	mov	r2, r3
 8003a52:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003a56:	4313      	orrs	r3, r2
 8003a58:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f7ff fe37 	bl	80036d0 <VL53L0X_device_read_strobe>
 8003a62:	4603      	mov	r3, r0
 8003a64:	461a      	mov	r2, r3
 8003a66:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8003a70:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 8003a74:	461a      	mov	r2, r3
 8003a76:	2190      	movs	r1, #144	@ 0x90
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f002 f9a5 	bl	8005dc8 <VL53L0X_RdByte>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	461a      	mov	r2, r3
 8003a82:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003a86:	4313      	orrs	r3, r2
 8003a88:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8003a8c:	2277      	movs	r2, #119	@ 0x77
 8003a8e:	2194      	movs	r1, #148	@ 0x94
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f002 f917 	bl	8005cc4 <VL53L0X_WrByte>
 8003a96:	4603      	mov	r3, r0
 8003a98:	461a      	mov	r2, r3
 8003a9a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f7ff fe13 	bl	80036d0 <VL53L0X_device_read_strobe>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	461a      	mov	r2, r3
 8003aae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003ab8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003abc:	461a      	mov	r2, r3
 8003abe:	2190      	movs	r1, #144	@ 0x90
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f002 f9e1 	bl	8005e88 <VL53L0X_RdDWord>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	461a      	mov	r2, r3
 8003aca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8003ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ad6:	0e5b      	lsrs	r3, r3, #25
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8003ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ae4:	0c9b      	lsrs	r3, r3, #18
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8003af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003af2:	0adb      	lsrs	r3, r3, #11
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8003afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b00:	091b      	lsrs	r3, r3, #4
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8003b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	00db      	lsls	r3, r3, #3
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	f003 0378 	and.w	r3, r3, #120	@ 0x78
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8003b1e:	2278      	movs	r2, #120	@ 0x78
 8003b20:	2194      	movs	r1, #148	@ 0x94
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f002 f8ce 	bl	8005cc4 <VL53L0X_WrByte>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003b30:	4313      	orrs	r3, r2
 8003b32:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7ff fdca 	bl	80036d0 <VL53L0X_device_read_strobe>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	461a      	mov	r2, r3
 8003b40:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003b44:	4313      	orrs	r3, r2
 8003b46:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003b4a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003b4e:	461a      	mov	r2, r3
 8003b50:	2190      	movs	r1, #144	@ 0x90
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f002 f998 	bl	8005e88 <VL53L0X_RdDWord>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003b60:	4313      	orrs	r3, r2
 8003b62:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8003b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b68:	0f5b      	lsrs	r3, r3, #29
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b70:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8003b72:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003b76:	4413      	add	r3, r2
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8003b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b7e:	0d9b      	lsrs	r3, r3, #22
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8003b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b8c:	0bdb      	lsrs	r3, r3, #15
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8003b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b9a:	0a1b      	lsrs	r3, r3, #8
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8003ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba8:	085b      	lsrs	r3, r3, #1
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8003bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	019b      	lsls	r3, r3, #6
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8003bc6:	2279      	movs	r2, #121	@ 0x79
 8003bc8:	2194      	movs	r1, #148	@ 0x94
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f002 f87a 	bl	8005cc4 <VL53L0X_WrByte>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7ff fd76 	bl	80036d0 <VL53L0X_device_read_strobe>
 8003be4:	4603      	mov	r3, r0
 8003be6:	461a      	mov	r2, r3
 8003be8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003bec:	4313      	orrs	r3, r2
 8003bee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003bf2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	2190      	movs	r1, #144	@ 0x90
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f002 f944 	bl	8005e88 <VL53L0X_RdDWord>
 8003c00:	4603      	mov	r3, r0
 8003c02:	461a      	mov	r2, r3
 8003c04:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8003c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c10:	0e9b      	lsrs	r3, r3, #26
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c18:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8003c1a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003c1e:	4413      	add	r3, r2
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8003c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c26:	0cdb      	lsrs	r3, r3, #19
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8003c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c34:	0b1b      	lsrs	r3, r3, #12
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8003c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c42:	095b      	lsrs	r3, r3, #5
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8003c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8003c60:	227a      	movs	r2, #122	@ 0x7a
 8003c62:	2194      	movs	r1, #148	@ 0x94
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f002 f82d 	bl	8005cc4 <VL53L0X_WrByte>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003c72:	4313      	orrs	r3, r2
 8003c74:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f7ff fd29 	bl	80036d0 <VL53L0X_device_read_strobe>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	461a      	mov	r2, r3
 8003c82:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003c86:	4313      	orrs	r3, r2
 8003c88:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003c8c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003c90:	461a      	mov	r2, r3
 8003c92:	2190      	movs	r1, #144	@ 0x90
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f002 f8f7 	bl	8005e88 <VL53L0X_RdDWord>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8003ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003caa:	0f9b      	lsrs	r3, r3, #30
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cb2:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8003cb4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003cb8:	4413      	add	r3, r2
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8003cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc0:	0ddb      	lsrs	r3, r3, #23
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8003ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cce:	0c1b      	lsrs	r3, r3, #16
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8003cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cdc:	0a5b      	lsrs	r3, r3, #9
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8003cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cec:	089b      	lsrs	r3, r3, #2
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			ProductId[18] = '\0';
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

		}

		if (((option & 4) == 4) &&
 8003d00:	78fb      	ldrb	r3, [r7, #3]
 8003d02:	f003 0304 	and.w	r3, r3, #4
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f000 80f1 	beq.w	8003eee <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8003d0c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003d10:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f040 80ea 	bne.w	8003eee <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8003d1a:	227b      	movs	r2, #123	@ 0x7b
 8003d1c:	2194      	movs	r1, #148	@ 0x94
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f001 ffd0 	bl	8005cc4 <VL53L0X_WrByte>
 8003d24:	4603      	mov	r3, r0
 8003d26:	461a      	mov	r2, r3
 8003d28:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7ff fccc 	bl	80036d0 <VL53L0X_device_read_strobe>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003d40:	4313      	orrs	r3, r2
 8003d42:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8003d46:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	2190      	movs	r1, #144	@ 0x90
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f002 f89a 	bl	8005e88 <VL53L0X_RdDWord>
 8003d54:	4603      	mov	r3, r0
 8003d56:	461a      	mov	r2, r3
 8003d58:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8003d62:	227c      	movs	r2, #124	@ 0x7c
 8003d64:	2194      	movs	r1, #148	@ 0x94
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f001 ffac 	bl	8005cc4 <VL53L0X_WrByte>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	461a      	mov	r2, r3
 8003d70:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003d74:	4313      	orrs	r3, r2
 8003d76:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f7ff fca8 	bl	80036d0 <VL53L0X_device_read_strobe>
 8003d80:	4603      	mov	r3, r0
 8003d82:	461a      	mov	r2, r3
 8003d84:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8003d8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d92:	461a      	mov	r2, r3
 8003d94:	2190      	movs	r1, #144	@ 0x90
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f002 f876 	bl	8005e88 <VL53L0X_RdDWord>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	461a      	mov	r2, r3
 8003da0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003da4:	4313      	orrs	r3, r2
 8003da6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8003daa:	2273      	movs	r2, #115	@ 0x73
 8003dac:	2194      	movs	r1, #148	@ 0x94
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f001 ff88 	bl	8005cc4 <VL53L0X_WrByte>
 8003db4:	4603      	mov	r3, r0
 8003db6:	461a      	mov	r2, r3
 8003db8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f7ff fc84 	bl	80036d0 <VL53L0X_device_read_strobe>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	461a      	mov	r2, r3
 8003dcc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003dd6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003dda:	461a      	mov	r2, r3
 8003ddc:	2190      	movs	r1, #144	@ 0x90
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f002 f852 	bl	8005e88 <VL53L0X_RdDWord>
 8003de4:	4603      	mov	r3, r0
 8003de6:	461a      	mov	r2, r3
 8003de8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003dec:	4313      	orrs	r3, r2
 8003dee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8003df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df4:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	653b      	str	r3, [r7, #80]	@ 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8003dfa:	2274      	movs	r2, #116	@ 0x74
 8003dfc:	2194      	movs	r1, #148	@ 0x94
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f001 ff60 	bl	8005cc4 <VL53L0X_WrByte>
 8003e04:	4603      	mov	r3, r0
 8003e06:	461a      	mov	r2, r3
 8003e08:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f7ff fc5c 	bl	80036d0 <VL53L0X_device_read_strobe>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003e20:	4313      	orrs	r3, r2
 8003e22:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003e26:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	2190      	movs	r1, #144	@ 0x90
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f002 f82a 	bl	8005e88 <VL53L0X_RdDWord>
 8003e34:	4603      	mov	r3, r0
 8003e36:	461a      	mov	r2, r3
 8003e38:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8003e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e44:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8003e46:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	653b      	str	r3, [r7, #80]	@ 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8003e4c:	2275      	movs	r2, #117	@ 0x75
 8003e4e:	2194      	movs	r1, #148	@ 0x94
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f001 ff37 	bl	8005cc4 <VL53L0X_WrByte>
 8003e56:	4603      	mov	r3, r0
 8003e58:	461a      	mov	r2, r3
 8003e5a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f7ff fc33 	bl	80036d0 <VL53L0X_device_read_strobe>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003e72:	4313      	orrs	r3, r2
 8003e74:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003e78:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	2190      	movs	r1, #144	@ 0x90
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f002 f801 	bl	8005e88 <VL53L0X_RdDWord>
 8003e86:	4603      	mov	r3, r0
 8003e88:	461a      	mov	r2, r3
 8003e8a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8003e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e96:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	657b      	str	r3, [r7, #84]	@ 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8003e9c:	2276      	movs	r2, #118	@ 0x76
 8003e9e:	2194      	movs	r1, #148	@ 0x94
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f001 ff0f 	bl	8005cc4 <VL53L0X_WrByte>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f7ff fc0b 	bl	80036d0 <VL53L0X_device_read_strobe>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003ec8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003ecc:	461a      	mov	r2, r3
 8003ece:	2190      	movs	r1, #144	@ 0x90
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f001 ffd9 	bl	8005e88 <VL53L0X_RdDWord>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	461a      	mov	r2, r3
 8003eda:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8003ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee6:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8003ee8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003eea:	4313      	orrs	r3, r2
 8003eec:	657b      	str	r3, [r7, #84]	@ 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8003eee:	2200      	movs	r2, #0
 8003ef0:	2181      	movs	r1, #129	@ 0x81
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f001 fee6 	bl	8005cc4 <VL53L0X_WrByte>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	461a      	mov	r2, r3
 8003efc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003f00:	4313      	orrs	r3, r2
 8003f02:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8003f06:	2206      	movs	r2, #6
 8003f08:	21ff      	movs	r1, #255	@ 0xff
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f001 feda 	bl	8005cc4 <VL53L0X_WrByte>
 8003f10:	4603      	mov	r3, r0
 8003f12:	461a      	mov	r2, r3
 8003f14:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8003f1e:	f107 0337 	add.w	r3, r7, #55	@ 0x37
 8003f22:	461a      	mov	r2, r3
 8003f24:	2183      	movs	r1, #131	@ 0x83
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f001 ff4e 	bl	8005dc8 <VL53L0X_RdByte>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	461a      	mov	r2, r3
 8003f30:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003f34:	4313      	orrs	r3, r2
 8003f36:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8003f3a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003f3e:	f023 0304 	bic.w	r3, r3, #4
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	461a      	mov	r2, r3
 8003f46:	2183      	movs	r1, #131	@ 0x83
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f001 febb 	bl	8005cc4 <VL53L0X_WrByte>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	461a      	mov	r2, r3
 8003f52:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003f56:	4313      	orrs	r3, r2
 8003f58:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	21ff      	movs	r1, #255	@ 0xff
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f001 feaf 	bl	8005cc4 <VL53L0X_WrByte>
 8003f66:	4603      	mov	r3, r0
 8003f68:	461a      	mov	r2, r3
 8003f6a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8003f74:	2201      	movs	r2, #1
 8003f76:	2100      	movs	r1, #0
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f001 fea3 	bl	8005cc4 <VL53L0X_WrByte>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	461a      	mov	r2, r3
 8003f82:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003f86:	4313      	orrs	r3, r2
 8003f88:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	21ff      	movs	r1, #255	@ 0xff
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f001 fe97 	bl	8005cc4 <VL53L0X_WrByte>
 8003f96:	4603      	mov	r3, r0
 8003f98:	461a      	mov	r2, r3
 8003f9a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	2180      	movs	r1, #128	@ 0x80
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f001 fe8b 	bl	8005cc4 <VL53L0X_WrByte>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8003fbc:	f997 305f 	ldrsb.w	r3, [r7, #95]	@ 0x5f
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f040 808f 	bne.w	80040e4 <VL53L0X_get_info_from_device+0x98e>
 8003fc6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003fca:	2b07      	cmp	r3, #7
 8003fcc:	f000 808a 	beq.w	80040e4 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8003fd0:	78fb      	ldrb	r3, [r7, #3]
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d024      	beq.n	8004024 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8003fda:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003fde:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d11e      	bne.n	8004024 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f897 205e 	ldrb.w	r2, [r7, #94]	@ 0x5e
 8003fec:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f897 205d 	ldrb.w	r2, [r7, #93]	@ 0x5d
 8003ff6:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ffe:	e00e      	b.n	800401e <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8004000:	f107 0208 	add.w	r2, r7, #8
 8004004:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004006:	4413      	add	r3, r2
 8004008:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800400e:	4413      	add	r3, r2
 8004010:	f503 7395 	add.w	r3, r3, #298	@ 0x12a
 8004014:	460a      	mov	r2, r1
 8004016:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8004018:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800401a:	3301      	adds	r3, #1
 800401c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800401e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004020:	2b05      	cmp	r3, #5
 8004022:	dded      	ble.n	8004000 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8004024:	78fb      	ldrb	r3, [r7, #3]
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d018      	beq.n	8004060 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800402e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004032:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8004036:	2b00      	cmp	r3, #0
 8004038:	d112      	bne.n	8004060 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800403a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f883 20f1 	strb.w	r2, [r3, #241]	@ 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004044:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f883 20f2 	strb.w	r2, [r3, #242]	@ 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	33f3      	adds	r3, #243	@ 0xf3
 8004052:	63bb      	str	r3, [r7, #56]	@ 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8004054:	f107 0310 	add.w	r3, r7, #16
 8004058:	4619      	mov	r1, r3
 800405a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800405c:	f00d fc0a 	bl	8011874 <strcpy>

		}

		if (((option & 4) == 4) &&
 8004060:	78fb      	ldrb	r3, [r7, #3]
 8004062:	f003 0304 	and.w	r3, r3, #4
 8004066:	2b00      	cmp	r3, #0
 8004068:	d030      	beq.n	80040cc <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800406a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800406e:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8004072:	2b00      	cmp	r3, #0
 8004074:	d12a      	bne.n	80040cc <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004076:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800407e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8004086:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004088:	025b      	lsls	r3, r3, #9
 800408a:	643b      	str	r3, [r7, #64]	@ 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004090:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8004094:	2300      	movs	r3, #0
 8004096:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800409a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800409c:	2b00      	cmp	r3, #0
 800409e:	d011      	beq.n	80040c4 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 80040a0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80040a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	64bb      	str	r3, [r7, #72]	@ 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 80040a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040aa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80040ae:	fb02 f303 	mul.w	r3, r2, r3
 80040b2:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 80040b4:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
					OffsetMicroMeters *= -1;
 80040b8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80040bc:	425b      	negs	r3, r3
 80040be:	b29b      	uxth	r3, r3
 80040c0:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
			}

			PALDevDataSet(Dev,
 80040c4:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	@ 0x5a
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 80040cc:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80040d0:	78fb      	ldrb	r3, [r7, #3]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 80040da:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80040e4:	f997 305f 	ldrsb.w	r3, [r7, #95]	@ 0x5f
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3760      	adds	r7, #96	@ 0x60
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b087      	sub	sp, #28
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	460b      	mov	r3, r1
 80040fa:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 80040fc:	f240 6277 	movw	r2, #1655	@ 0x677
 8004100:	f04f 0300 	mov.w	r3, #0
 8004104:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8004108:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 800410c:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800410e:	78fb      	ldrb	r3, [r7, #3]
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	fb02 f303 	mul.w	r3, r2, r3
 800411c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800411e:	68bb      	ldr	r3, [r7, #8]
}
 8004120:	4618      	mov	r0, r3
 8004122:	371c      	adds	r7, #28
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800412c:	b480      	push	{r7}
 800412e:	b087      	sub	sp, #28
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8004134:	2300      	movs	r3, #0
 8004136:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8004138:	2300      	movs	r3, #0
 800413a:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800413c:	2300      	movs	r3, #0
 800413e:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d015      	beq.n	8004172 <VL53L0X_encode_timeout+0x46>
		ls_byte = timeout_macro_clks - 1;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	3b01      	subs	r3, #1
 800414a:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800414c:	e005      	b.n	800415a <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	085b      	lsrs	r3, r3, #1
 8004152:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8004154:	89fb      	ldrh	r3, [r7, #14]
 8004156:	3301      	adds	r3, #1
 8004158:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	2bff      	cmp	r3, #255	@ 0xff
 800415e:	d8f6      	bhi.n	800414e <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8004160:	89fb      	ldrh	r3, [r7, #14]
 8004162:	021b      	lsls	r3, r3, #8
 8004164:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	b29b      	uxth	r3, r3
 800416a:	b2db      	uxtb	r3, r3
 800416c:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800416e:	4413      	add	r3, r2
 8004170:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8004172:	8afb      	ldrh	r3, [r7, #22]

}
 8004174:	4618      	mov	r0, r3
 8004176:	371c      	adds	r7, #28
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	4603      	mov	r3, r0
 8004188:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800418a:	2300      	movs	r3, #0
 800418c:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800418e:	88fb      	ldrh	r3, [r7, #6]
 8004190:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8004192:	88fa      	ldrh	r2, [r7, #6]
 8004194:	0a12      	lsrs	r2, r2, #8
 8004196:	b292      	uxth	r2, r2
 8004198:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800419a:	3301      	adds	r3, #1
 800419c:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800419e:	68fb      	ldr	r3, [r7, #12]
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3714      	adds	r7, #20
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b088      	sub	sp, #32
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	4613      	mov	r3, r2
 80041b8:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 80041ba:	2300      	movs	r3, #0
 80041bc:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 80041be:	79fb      	ldrb	r3, [r7, #7]
 80041c0:	4619      	mov	r1, r3
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f7ff ff94 	bl	80040f0 <VL53L0X_calc_macro_period_ps>
 80041c8:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80041d0:	4a0a      	ldr	r2, [pc, #40]	@ (80041fc <VL53L0X_calc_timeout_mclks+0x50>)
 80041d2:	fba2 2303 	umull	r2, r3, r2, r3
 80041d6:	099b      	lsrs	r3, r3, #6
 80041d8:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80041e0:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	085b      	lsrs	r3, r3, #1
 80041e8:	441a      	add	r2, r3
	timeout_period_mclks =
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f0:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 80041f2:	69fb      	ldr	r3, [r7, #28]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3720      	adds	r7, #32
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	10624dd3 	.word	0x10624dd3

08004200 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	460b      	mov	r3, r1
 800420a:	807b      	strh	r3, [r7, #2]
 800420c:	4613      	mov	r3, r2
 800420e:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8004210:	2300      	movs	r3, #0
 8004212:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8004214:	787b      	ldrb	r3, [r7, #1]
 8004216:	4619      	mov	r1, r3
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f7ff ff69 	bl	80040f0 <VL53L0X_calc_macro_period_ps>
 800421e:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8004226:	4a0a      	ldr	r2, [pc, #40]	@ (8004250 <VL53L0X_calc_timeout_us+0x50>)
 8004228:	fba2 2303 	umull	r2, r3, r2, r3
 800422c:	099b      	lsrs	r3, r3, #6
 800422e:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8004230:	887b      	ldrh	r3, [r7, #2]
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	fb02 f303 	mul.w	r3, r2, r3
 8004238:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
	actual_timeout_period_us =
 800423c:	4a04      	ldr	r2, [pc, #16]	@ (8004250 <VL53L0X_calc_timeout_us+0x50>)
 800423e:	fba2 2303 	umull	r2, r3, r2, r3
 8004242:	099b      	lsrs	r3, r3, #6
 8004244:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8004246:	697b      	ldr	r3, [r7, #20]
}
 8004248:	4618      	mov	r0, r3
 800424a:	3718      	adds	r7, #24
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	10624dd3 	.word	0x10624dd3

08004254 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b08c      	sub	sp, #48	@ 0x30
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	460b      	mov	r3, r1
 800425e:	607a      	str	r2, [r7, #4]
 8004260:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004262:	2300      	movs	r3, #0
 8004264:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8004268:	2300      	movs	r3, #0
 800426a:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800426e:	2300      	movs	r3, #0
 8004270:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8004272:	2300      	movs	r3, #0
 8004274:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8004276:	2300      	movs	r3, #0
 8004278:	84bb      	strh	r3, [r7, #36]	@ 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800427a:	7afb      	ldrb	r3, [r7, #11]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d005      	beq.n	800428c <get_sequence_step_timeout+0x38>
 8004280:	7afb      	ldrb	r3, [r7, #11]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d002      	beq.n	800428c <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8004286:	7afb      	ldrb	r3, [r7, #11]
 8004288:	2b02      	cmp	r3, #2
 800428a:	d127      	bne.n	80042dc <get_sequence_step_timeout+0x88>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800428c:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 8004290:	461a      	mov	r2, r3
 8004292:	2100      	movs	r1, #0
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f7fd fa8d 	bl	80017b4 <VL53L0X_GetVcselPulsePeriod>
 800429a:	4603      	mov	r3, r0
 800429c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 80042a0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d109      	bne.n	80042bc <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 80042a8:	f107 0320 	add.w	r3, r7, #32
 80042ac:	461a      	mov	r2, r3
 80042ae:	2146      	movs	r1, #70	@ 0x46
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f001 fd89 	bl	8005dc8 <VL53L0X_RdByte>
 80042b6:	4603      	mov	r3, r0
 80042b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 80042bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7ff ff5d 	bl	8004180 <VL53L0X_decode_timeout>
 80042c6:	4603      	mov	r3, r0
 80042c8:	847b      	strh	r3, [r7, #34]	@ 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80042ca:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 80042ce:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80042d0:	4619      	mov	r1, r3
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f7ff ff94 	bl	8004200 <VL53L0X_calc_timeout_us>
 80042d8:	62b8      	str	r0, [r7, #40]	@ 0x28
 80042da:	e092      	b.n	8004402 <get_sequence_step_timeout+0x1ae>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80042dc:	7afb      	ldrb	r3, [r7, #11]
 80042de:	2b03      	cmp	r3, #3
 80042e0:	d135      	bne.n	800434e <get_sequence_step_timeout+0xfa>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80042e2:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 80042e6:	461a      	mov	r2, r3
 80042e8:	2100      	movs	r1, #0
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f7fd fa62 	bl	80017b4 <VL53L0X_GetVcselPulsePeriod>
 80042f0:	4603      	mov	r3, r0
 80042f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 80042f6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f040 8081 	bne.w	8004402 <get_sequence_step_timeout+0x1ae>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8004300:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 8004304:	461a      	mov	r2, r3
 8004306:	2100      	movs	r1, #0
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f7fd fa53 	bl	80017b4 <VL53L0X_GetVcselPulsePeriod>
 800430e:	4603      	mov	r3, r0
 8004310:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8004314:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004318:	2b00      	cmp	r3, #0
 800431a:	d109      	bne.n	8004330 <get_sequence_step_timeout+0xdc>
				Status = VL53L0X_RdWord(Dev,
 800431c:	f107 031e 	add.w	r3, r7, #30
 8004320:	461a      	mov	r2, r3
 8004322:	2151      	movs	r1, #81	@ 0x51
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f001 fd79 	bl	8005e1c <VL53L0X_RdWord>
 800432a:	4603      	mov	r3, r0
 800432c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8004330:	8bfb      	ldrh	r3, [r7, #30]
 8004332:	4618      	mov	r0, r3
 8004334:	f7ff ff24 	bl	8004180 <VL53L0X_decode_timeout>
 8004338:	4603      	mov	r3, r0
 800433a:	84fb      	strh	r3, [r7, #38]	@ 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800433c:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8004340:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004342:	4619      	mov	r1, r3
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f7ff ff5b 	bl	8004200 <VL53L0X_calc_timeout_us>
 800434a:	62b8      	str	r0, [r7, #40]	@ 0x28
 800434c:	e059      	b.n	8004402 <get_sequence_step_timeout+0x1ae>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800434e:	7afb      	ldrb	r3, [r7, #11]
 8004350:	2b04      	cmp	r3, #4
 8004352:	d156      	bne.n	8004402 <get_sequence_step_timeout+0x1ae>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8004354:	f107 0314 	add.w	r3, r7, #20
 8004358:	4619      	mov	r1, r3
 800435a:	68f8      	ldr	r0, [r7, #12]
 800435c:	f7fd fb34 	bl	80019c8 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8004360:	2300      	movs	r3, #0
 8004362:	84fb      	strh	r3, [r7, #38]	@ 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8004364:	7dfb      	ldrb	r3, [r7, #23]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d01d      	beq.n	80043a6 <get_sequence_step_timeout+0x152>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800436a:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 800436e:	461a      	mov	r2, r3
 8004370:	2100      	movs	r1, #0
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f7fd fa1e 	bl	80017b4 <VL53L0X_GetVcselPulsePeriod>
 8004378:	4603      	mov	r3, r0
 800437a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800437e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004382:	2b00      	cmp	r3, #0
 8004384:	d10f      	bne.n	80043a6 <get_sequence_step_timeout+0x152>
				Status = VL53L0X_RdWord(Dev,
 8004386:	f107 031e 	add.w	r3, r7, #30
 800438a:	461a      	mov	r2, r3
 800438c:	2151      	movs	r1, #81	@ 0x51
 800438e:	68f8      	ldr	r0, [r7, #12]
 8004390:	f001 fd44 	bl	8005e1c <VL53L0X_RdWord>
 8004394:	4603      	mov	r3, r0
 8004396:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800439a:	8bfb      	ldrh	r3, [r7, #30]
 800439c:	4618      	mov	r0, r3
 800439e:	f7ff feef 	bl	8004180 <VL53L0X_decode_timeout>
 80043a2:	4603      	mov	r3, r0
 80043a4:	84fb      	strh	r3, [r7, #38]	@ 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 80043a6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d109      	bne.n	80043c2 <get_sequence_step_timeout+0x16e>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80043ae:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 80043b2:	461a      	mov	r2, r3
 80043b4:	2101      	movs	r1, #1
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f7fd f9fc 	bl	80017b4 <VL53L0X_GetVcselPulsePeriod>
 80043bc:	4603      	mov	r3, r0
 80043be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 80043c2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d10f      	bne.n	80043ea <get_sequence_step_timeout+0x196>
			Status = VL53L0X_RdWord(Dev,
 80043ca:	f107 031c 	add.w	r3, r7, #28
 80043ce:	461a      	mov	r2, r3
 80043d0:	2171      	movs	r1, #113	@ 0x71
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f001 fd22 	bl	8005e1c <VL53L0X_RdWord>
 80043d8:	4603      	mov	r3, r0
 80043da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 80043de:	8bbb      	ldrh	r3, [r7, #28]
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7ff fecd 	bl	8004180 <VL53L0X_decode_timeout>
 80043e6:	4603      	mov	r3, r0
 80043e8:	84bb      	strh	r3, [r7, #36]	@ 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 80043ea:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80043ec:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80043f2:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 80043f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80043f8:	4619      	mov	r1, r3
 80043fa:	68f8      	ldr	r0, [r7, #12]
 80043fc:	f7ff ff00 	bl	8004200 <VL53L0X_calc_timeout_us>
 8004400:	62b8      	str	r0, [r7, #40]	@ 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004406:	601a      	str	r2, [r3, #0]

	return Status;
 8004408:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800440c:	4618      	mov	r0, r3
 800440e:	3730      	adds	r7, #48	@ 0x30
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b08a      	sub	sp, #40	@ 0x28
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	460b      	mov	r3, r1
 800441e:	607a      	str	r2, [r7, #4]
 8004420:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004422:	2300      	movs	r3, #0
 8004424:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8004428:	7afb      	ldrb	r3, [r7, #11]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d005      	beq.n	800443a <set_sequence_step_timeout+0x26>
 800442e:	7afb      	ldrb	r3, [r7, #11]
 8004430:	2b01      	cmp	r3, #1
 8004432:	d002      	beq.n	800443a <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8004434:	7afb      	ldrb	r3, [r7, #11]
 8004436:	2b02      	cmp	r3, #2
 8004438:	d138      	bne.n	80044ac <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800443a:	f107 031b 	add.w	r3, r7, #27
 800443e:	461a      	mov	r2, r3
 8004440:	2100      	movs	r1, #0
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f7fd f9b6 	bl	80017b4 <VL53L0X_GetVcselPulsePeriod>
 8004448:	4603      	mov	r3, r0
 800444a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800444e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004452:	2b00      	cmp	r3, #0
 8004454:	d11a      	bne.n	800448c <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8004456:	7efb      	ldrb	r3, [r7, #27]
 8004458:	461a      	mov	r2, r3
 800445a:	6879      	ldr	r1, [r7, #4]
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f7ff fea5 	bl	80041ac <VL53L0X_calc_timeout_mclks>
 8004462:	4603      	mov	r3, r0
 8004464:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8004466:	8bbb      	ldrh	r3, [r7, #28]
 8004468:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800446c:	d903      	bls.n	8004476 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800446e:	23ff      	movs	r3, #255	@ 0xff
 8004470:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004474:	e004      	b.n	8004480 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8004476:	8bbb      	ldrh	r3, [r7, #28]
 8004478:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800447a:	3b01      	subs	r3, #1
 800447c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004480:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004484:	b29a      	uxth	r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f8a3 20d8 	strh.w	r2, [r3, #216]	@ 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800448c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004490:	2b00      	cmp	r3, #0
 8004492:	f040 80ab 	bne.w	80045ec <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8004496:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800449a:	461a      	mov	r2, r3
 800449c:	2146      	movs	r1, #70	@ 0x46
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f001 fc10 	bl	8005cc4 <VL53L0X_WrByte>
 80044a4:	4603      	mov	r3, r0
 80044a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 80044aa:	e09f      	b.n	80045ec <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80044ac:	7afb      	ldrb	r3, [r7, #11]
 80044ae:	2b03      	cmp	r3, #3
 80044b0:	d135      	bne.n	800451e <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 80044b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d11b      	bne.n	80044f2 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80044ba:	f107 031b 	add.w	r3, r7, #27
 80044be:	461a      	mov	r2, r3
 80044c0:	2100      	movs	r1, #0
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	f7fd f976 	bl	80017b4 <VL53L0X_GetVcselPulsePeriod>
 80044c8:	4603      	mov	r3, r0
 80044ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 80044ce:	7efb      	ldrb	r3, [r7, #27]
 80044d0:	461a      	mov	r2, r3
 80044d2:	6879      	ldr	r1, [r7, #4]
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f7ff fe69 	bl	80041ac <VL53L0X_calc_timeout_mclks>
 80044da:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 80044dc:	84bb      	strh	r3, [r7, #36]	@ 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 80044de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7ff fe23 	bl	800412c <VL53L0X_encode_timeout>
 80044e6:	4603      	mov	r3, r0
 80044e8:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80044ea:	8b3a      	ldrh	r2, [r7, #24]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f8a3 20d8 	strh.w	r2, [r3, #216]	@ 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80044f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d108      	bne.n	800450c <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 80044fa:	8b3b      	ldrh	r3, [r7, #24]
 80044fc:	461a      	mov	r2, r3
 80044fe:	2151      	movs	r1, #81	@ 0x51
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f001 fc03 	bl	8005d0c <VL53L0X_WrWord>
 8004506:	4603      	mov	r3, r0
 8004508:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800450c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004510:	2b00      	cmp	r3, #0
 8004512:	d16b      	bne.n	80045ec <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 800451c:	e066      	b.n	80045ec <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800451e:	7afb      	ldrb	r3, [r7, #11]
 8004520:	2b04      	cmp	r3, #4
 8004522:	d160      	bne.n	80045e6 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8004524:	f107 0310 	add.w	r3, r7, #16
 8004528:	4619      	mov	r1, r3
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f7fd fa4c 	bl	80019c8 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8004530:	2300      	movs	r3, #0
 8004532:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8004534:	7cfb      	ldrb	r3, [r7, #19]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d01d      	beq.n	8004576 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800453a:	f107 031b 	add.w	r3, r7, #27
 800453e:	461a      	mov	r2, r3
 8004540:	2100      	movs	r1, #0
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f7fd f936 	bl	80017b4 <VL53L0X_GetVcselPulsePeriod>
 8004548:	4603      	mov	r3, r0
 800454a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800454e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10f      	bne.n	8004576 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8004556:	f107 0318 	add.w	r3, r7, #24
 800455a:	461a      	mov	r2, r3
 800455c:	2151      	movs	r1, #81	@ 0x51
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f001 fc5c 	bl	8005e1c <VL53L0X_RdWord>
 8004564:	4603      	mov	r3, r0
 8004566:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800456a:	8b3b      	ldrh	r3, [r7, #24]
 800456c:	4618      	mov	r0, r3
 800456e:	f7ff fe07 	bl	8004180 <VL53L0X_decode_timeout>
 8004572:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8004574:	84bb      	strh	r3, [r7, #36]	@ 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8004576:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800457a:	2b00      	cmp	r3, #0
 800457c:	d109      	bne.n	8004592 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800457e:	f107 031b 	add.w	r3, r7, #27
 8004582:	461a      	mov	r2, r3
 8004584:	2101      	movs	r1, #1
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f7fd f914 	bl	80017b4 <VL53L0X_GetVcselPulsePeriod>
 800458c:	4603      	mov	r3, r0
 800458e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8004592:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004596:	2b00      	cmp	r3, #0
 8004598:	d128      	bne.n	80045ec <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800459a:	7efb      	ldrb	r3, [r7, #27]
 800459c:	461a      	mov	r2, r3
 800459e:	6879      	ldr	r1, [r7, #4]
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f7ff fe03 	bl	80041ac <VL53L0X_calc_timeout_mclks>
 80045a6:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 80045a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80045aa:	6a3a      	ldr	r2, [r7, #32]
 80045ac:	4413      	add	r3, r2
 80045ae:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 80045b0:	6a38      	ldr	r0, [r7, #32]
 80045b2:	f7ff fdbb 	bl	800412c <VL53L0X_encode_timeout>
 80045b6:	4603      	mov	r3, r0
 80045b8:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 80045ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d108      	bne.n	80045d4 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 80045c2:	8bfb      	ldrh	r3, [r7, #30]
 80045c4:	461a      	mov	r2, r3
 80045c6:	2171      	movs	r1, #113	@ 0x71
 80045c8:	68f8      	ldr	r0, [r7, #12]
 80045ca:	f001 fb9f 	bl	8005d0c <VL53L0X_WrWord>
 80045ce:	4603      	mov	r3, r0
 80045d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 80045d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d107      	bne.n	80045ec <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
 80045e4:	e002      	b.n	80045ec <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80045e6:	23fc      	movs	r3, #252	@ 0xfc
 80045e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	}
	return Status;
 80045ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3728      	adds	r7, #40	@ 0x28
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b08a      	sub	sp, #40	@ 0x28
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	460b      	mov	r3, r1
 8004602:	70fb      	strb	r3, [r7, #3]
 8004604:	4613      	mov	r3, r2
 8004606:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004608:	2300      	movs	r3, #0
 800460a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800460e:	230c      	movs	r3, #12
 8004610:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 8004614:	2312      	movs	r3, #18
 8004616:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800461a:	2308      	movs	r3, #8
 800461c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 8004620:	230e      	movs	r3, #14
 8004622:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8004626:	2300      	movs	r3, #0
 8004628:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800462a:	78bb      	ldrb	r3, [r7, #2]
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	b2db      	uxtb	r3, r3
 8004632:	2b00      	cmp	r3, #0
 8004634:	d003      	beq.n	800463e <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004636:	23fc      	movs	r3, #252	@ 0xfc
 8004638:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800463c:	e020      	b.n	8004680 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800463e:	78fb      	ldrb	r3, [r7, #3]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d10d      	bne.n	8004660 <VL53L0X_set_vcsel_pulse_period+0x68>
 8004644:	78ba      	ldrb	r2, [r7, #2]
 8004646:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800464a:	429a      	cmp	r2, r3
 800464c:	d304      	bcc.n	8004658 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800464e:	78ba      	ldrb	r2, [r7, #2]
 8004650:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004654:	429a      	cmp	r2, r3
 8004656:	d903      	bls.n	8004660 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004658:	23fc      	movs	r3, #252	@ 0xfc
 800465a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800465e:	e00f      	b.n	8004680 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 8004660:	78fb      	ldrb	r3, [r7, #3]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d10c      	bne.n	8004680 <VL53L0X_set_vcsel_pulse_period+0x88>
 8004666:	78ba      	ldrb	r2, [r7, #2]
 8004668:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800466c:	429a      	cmp	r2, r3
 800466e:	d304      	bcc.n	800467a <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 8004670:	78ba      	ldrb	r2, [r7, #2]
 8004672:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004676:	429a      	cmp	r2, r3
 8004678:	d902      	bls.n	8004680 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800467a:	23fc      	movs	r3, #252	@ 0xfc
 800467c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 8004680:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004684:	2b00      	cmp	r3, #0
 8004686:	d002      	beq.n	800468e <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 8004688:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800468c:	e237      	b.n	8004afe <VL53L0X_set_vcsel_pulse_period+0x506>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800468e:	78fb      	ldrb	r3, [r7, #3]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d150      	bne.n	8004736 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 8004694:	78bb      	ldrb	r3, [r7, #2]
 8004696:	2b0c      	cmp	r3, #12
 8004698:	d110      	bne.n	80046bc <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800469a:	2218      	movs	r2, #24
 800469c:	2157      	movs	r1, #87	@ 0x57
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f001 fb10 	bl	8005cc4 <VL53L0X_WrByte>
 80046a4:	4603      	mov	r3, r0
 80046a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 80046aa:	2208      	movs	r2, #8
 80046ac:	2156      	movs	r1, #86	@ 0x56
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f001 fb08 	bl	8005cc4 <VL53L0X_WrByte>
 80046b4:	4603      	mov	r3, r0
 80046b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80046ba:	e17f      	b.n	80049bc <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 80046bc:	78bb      	ldrb	r3, [r7, #2]
 80046be:	2b0e      	cmp	r3, #14
 80046c0:	d110      	bne.n	80046e4 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 80046c2:	2230      	movs	r2, #48	@ 0x30
 80046c4:	2157      	movs	r1, #87	@ 0x57
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f001 fafc 	bl	8005cc4 <VL53L0X_WrByte>
 80046cc:	4603      	mov	r3, r0
 80046ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 80046d2:	2208      	movs	r2, #8
 80046d4:	2156      	movs	r1, #86	@ 0x56
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f001 faf4 	bl	8005cc4 <VL53L0X_WrByte>
 80046dc:	4603      	mov	r3, r0
 80046de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80046e2:	e16b      	b.n	80049bc <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 80046e4:	78bb      	ldrb	r3, [r7, #2]
 80046e6:	2b10      	cmp	r3, #16
 80046e8:	d110      	bne.n	800470c <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 80046ea:	2240      	movs	r2, #64	@ 0x40
 80046ec:	2157      	movs	r1, #87	@ 0x57
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f001 fae8 	bl	8005cc4 <VL53L0X_WrByte>
 80046f4:	4603      	mov	r3, r0
 80046f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 80046fa:	2208      	movs	r2, #8
 80046fc:	2156      	movs	r1, #86	@ 0x56
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f001 fae0 	bl	8005cc4 <VL53L0X_WrByte>
 8004704:	4603      	mov	r3, r0
 8004706:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800470a:	e157      	b.n	80049bc <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800470c:	78bb      	ldrb	r3, [r7, #2]
 800470e:	2b12      	cmp	r3, #18
 8004710:	f040 8154 	bne.w	80049bc <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8004714:	2250      	movs	r2, #80	@ 0x50
 8004716:	2157      	movs	r1, #87	@ 0x57
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f001 fad3 	bl	8005cc4 <VL53L0X_WrByte>
 800471e:	4603      	mov	r3, r0
 8004720:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 8004724:	2208      	movs	r2, #8
 8004726:	2156      	movs	r1, #86	@ 0x56
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f001 facb 	bl	8005cc4 <VL53L0X_WrByte>
 800472e:	4603      	mov	r3, r0
 8004730:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004734:	e142      	b.n	80049bc <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 8004736:	78fb      	ldrb	r3, [r7, #3]
 8004738:	2b01      	cmp	r3, #1
 800473a:	f040 813f 	bne.w	80049bc <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800473e:	78bb      	ldrb	r3, [r7, #2]
 8004740:	2b08      	cmp	r3, #8
 8004742:	d14c      	bne.n	80047de <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 8004744:	2210      	movs	r2, #16
 8004746:	2148      	movs	r1, #72	@ 0x48
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f001 fabb 	bl	8005cc4 <VL53L0X_WrByte>
 800474e:	4603      	mov	r3, r0
 8004750:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 8004754:	2208      	movs	r2, #8
 8004756:	2147      	movs	r1, #71	@ 0x47
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f001 fab3 	bl	8005cc4 <VL53L0X_WrByte>
 800475e:	4603      	mov	r3, r0
 8004760:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8004764:	2202      	movs	r2, #2
 8004766:	2132      	movs	r1, #50	@ 0x32
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f001 faab 	bl	8005cc4 <VL53L0X_WrByte>
 800476e:	4603      	mov	r3, r0
 8004770:	461a      	mov	r2, r3
 8004772:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004776:	4313      	orrs	r3, r2
 8004778:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800477c:	220c      	movs	r2, #12
 800477e:	2130      	movs	r1, #48	@ 0x30
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f001 fa9f 	bl	8005cc4 <VL53L0X_WrByte>
 8004786:	4603      	mov	r3, r0
 8004788:	461a      	mov	r2, r3
 800478a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800478e:	4313      	orrs	r3, r2
 8004790:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8004794:	2201      	movs	r2, #1
 8004796:	21ff      	movs	r1, #255	@ 0xff
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f001 fa93 	bl	8005cc4 <VL53L0X_WrByte>
 800479e:	4603      	mov	r3, r0
 80047a0:	461a      	mov	r2, r3
 80047a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80047a6:	4313      	orrs	r3, r2
 80047a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 80047ac:	2230      	movs	r2, #48	@ 0x30
 80047ae:	2130      	movs	r1, #48	@ 0x30
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f001 fa87 	bl	8005cc4 <VL53L0X_WrByte>
 80047b6:	4603      	mov	r3, r0
 80047b8:	461a      	mov	r2, r3
 80047ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80047be:	4313      	orrs	r3, r2
 80047c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80047c4:	2200      	movs	r2, #0
 80047c6:	21ff      	movs	r1, #255	@ 0xff
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f001 fa7b 	bl	8005cc4 <VL53L0X_WrByte>
 80047ce:	4603      	mov	r3, r0
 80047d0:	461a      	mov	r2, r3
 80047d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80047d6:	4313      	orrs	r3, r2
 80047d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80047dc:	e0ee      	b.n	80049bc <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 80047de:	78bb      	ldrb	r3, [r7, #2]
 80047e0:	2b0a      	cmp	r3, #10
 80047e2:	d14c      	bne.n	800487e <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 80047e4:	2228      	movs	r2, #40	@ 0x28
 80047e6:	2148      	movs	r1, #72	@ 0x48
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f001 fa6b 	bl	8005cc4 <VL53L0X_WrByte>
 80047ee:	4603      	mov	r3, r0
 80047f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 80047f4:	2208      	movs	r2, #8
 80047f6:	2147      	movs	r1, #71	@ 0x47
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f001 fa63 	bl	8005cc4 <VL53L0X_WrByte>
 80047fe:	4603      	mov	r3, r0
 8004800:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8004804:	2203      	movs	r2, #3
 8004806:	2132      	movs	r1, #50	@ 0x32
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f001 fa5b 	bl	8005cc4 <VL53L0X_WrByte>
 800480e:	4603      	mov	r3, r0
 8004810:	461a      	mov	r2, r3
 8004812:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004816:	4313      	orrs	r3, r2
 8004818:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800481c:	2209      	movs	r2, #9
 800481e:	2130      	movs	r1, #48	@ 0x30
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f001 fa4f 	bl	8005cc4 <VL53L0X_WrByte>
 8004826:	4603      	mov	r3, r0
 8004828:	461a      	mov	r2, r3
 800482a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800482e:	4313      	orrs	r3, r2
 8004830:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8004834:	2201      	movs	r2, #1
 8004836:	21ff      	movs	r1, #255	@ 0xff
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f001 fa43 	bl	8005cc4 <VL53L0X_WrByte>
 800483e:	4603      	mov	r3, r0
 8004840:	461a      	mov	r2, r3
 8004842:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004846:	4313      	orrs	r3, r2
 8004848:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 800484c:	2220      	movs	r2, #32
 800484e:	2130      	movs	r1, #48	@ 0x30
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f001 fa37 	bl	8005cc4 <VL53L0X_WrByte>
 8004856:	4603      	mov	r3, r0
 8004858:	461a      	mov	r2, r3
 800485a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800485e:	4313      	orrs	r3, r2
 8004860:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8004864:	2200      	movs	r2, #0
 8004866:	21ff      	movs	r1, #255	@ 0xff
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f001 fa2b 	bl	8005cc4 <VL53L0X_WrByte>
 800486e:	4603      	mov	r3, r0
 8004870:	461a      	mov	r2, r3
 8004872:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004876:	4313      	orrs	r3, r2
 8004878:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800487c:	e09e      	b.n	80049bc <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800487e:	78bb      	ldrb	r3, [r7, #2]
 8004880:	2b0c      	cmp	r3, #12
 8004882:	d14c      	bne.n	800491e <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 8004884:	2238      	movs	r2, #56	@ 0x38
 8004886:	2148      	movs	r1, #72	@ 0x48
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f001 fa1b 	bl	8005cc4 <VL53L0X_WrByte>
 800488e:	4603      	mov	r3, r0
 8004890:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 8004894:	2208      	movs	r2, #8
 8004896:	2147      	movs	r1, #71	@ 0x47
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f001 fa13 	bl	8005cc4 <VL53L0X_WrByte>
 800489e:	4603      	mov	r3, r0
 80048a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80048a4:	2203      	movs	r2, #3
 80048a6:	2132      	movs	r1, #50	@ 0x32
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f001 fa0b 	bl	8005cc4 <VL53L0X_WrByte>
 80048ae:	4603      	mov	r3, r0
 80048b0:	461a      	mov	r2, r3
 80048b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80048b6:	4313      	orrs	r3, r2
 80048b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80048bc:	2208      	movs	r2, #8
 80048be:	2130      	movs	r1, #48	@ 0x30
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f001 f9ff 	bl	8005cc4 <VL53L0X_WrByte>
 80048c6:	4603      	mov	r3, r0
 80048c8:	461a      	mov	r2, r3
 80048ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80048ce:	4313      	orrs	r3, r2
 80048d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80048d4:	2201      	movs	r2, #1
 80048d6:	21ff      	movs	r1, #255	@ 0xff
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f001 f9f3 	bl	8005cc4 <VL53L0X_WrByte>
 80048de:	4603      	mov	r3, r0
 80048e0:	461a      	mov	r2, r3
 80048e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80048e6:	4313      	orrs	r3, r2
 80048e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 80048ec:	2220      	movs	r2, #32
 80048ee:	2130      	movs	r1, #48	@ 0x30
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f001 f9e7 	bl	8005cc4 <VL53L0X_WrByte>
 80048f6:	4603      	mov	r3, r0
 80048f8:	461a      	mov	r2, r3
 80048fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80048fe:	4313      	orrs	r3, r2
 8004900:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8004904:	2200      	movs	r2, #0
 8004906:	21ff      	movs	r1, #255	@ 0xff
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f001 f9db 	bl	8005cc4 <VL53L0X_WrByte>
 800490e:	4603      	mov	r3, r0
 8004910:	461a      	mov	r2, r3
 8004912:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004916:	4313      	orrs	r3, r2
 8004918:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800491c:	e04e      	b.n	80049bc <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800491e:	78bb      	ldrb	r3, [r7, #2]
 8004920:	2b0e      	cmp	r3, #14
 8004922:	d14b      	bne.n	80049bc <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8004924:	2248      	movs	r2, #72	@ 0x48
 8004926:	2148      	movs	r1, #72	@ 0x48
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f001 f9cb 	bl	8005cc4 <VL53L0X_WrByte>
 800492e:	4603      	mov	r3, r0
 8004930:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 8004934:	2208      	movs	r2, #8
 8004936:	2147      	movs	r1, #71	@ 0x47
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f001 f9c3 	bl	8005cc4 <VL53L0X_WrByte>
 800493e:	4603      	mov	r3, r0
 8004940:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8004944:	2203      	movs	r2, #3
 8004946:	2132      	movs	r1, #50	@ 0x32
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f001 f9bb 	bl	8005cc4 <VL53L0X_WrByte>
 800494e:	4603      	mov	r3, r0
 8004950:	461a      	mov	r2, r3
 8004952:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004956:	4313      	orrs	r3, r2
 8004958:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800495c:	2207      	movs	r2, #7
 800495e:	2130      	movs	r1, #48	@ 0x30
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f001 f9af 	bl	8005cc4 <VL53L0X_WrByte>
 8004966:	4603      	mov	r3, r0
 8004968:	461a      	mov	r2, r3
 800496a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800496e:	4313      	orrs	r3, r2
 8004970:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8004974:	2201      	movs	r2, #1
 8004976:	21ff      	movs	r1, #255	@ 0xff
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f001 f9a3 	bl	8005cc4 <VL53L0X_WrByte>
 800497e:	4603      	mov	r3, r0
 8004980:	461a      	mov	r2, r3
 8004982:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004986:	4313      	orrs	r3, r2
 8004988:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 800498c:	2220      	movs	r2, #32
 800498e:	2130      	movs	r1, #48	@ 0x30
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f001 f997 	bl	8005cc4 <VL53L0X_WrByte>
 8004996:	4603      	mov	r3, r0
 8004998:	461a      	mov	r2, r3
 800499a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800499e:	4313      	orrs	r3, r2
 80049a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80049a4:	2200      	movs	r2, #0
 80049a6:	21ff      	movs	r1, #255	@ 0xff
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f001 f98b 	bl	8005cc4 <VL53L0X_WrByte>
 80049ae:	4603      	mov	r3, r0
 80049b0:	461a      	mov	r2, r3
 80049b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80049b6:	4313      	orrs	r3, r2
 80049b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 80049bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d17e      	bne.n	8004ac2 <VL53L0X_set_vcsel_pulse_period+0x4ca>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 80049c4:	78bb      	ldrb	r3, [r7, #2]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7fe fe3b 	bl	8003642 <VL53L0X_encode_vcsel_period>
 80049cc:	4603      	mov	r3, r0
 80049ce:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 80049d2:	78fb      	ldrb	r3, [r7, #3]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d002      	beq.n	80049de <VL53L0X_set_vcsel_pulse_period+0x3e6>
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d045      	beq.n	8004a68 <VL53L0X_set_vcsel_pulse_period+0x470>
 80049dc:	e06e      	b.n	8004abc <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 80049de:	f107 0314 	add.w	r3, r7, #20
 80049e2:	461a      	mov	r2, r3
 80049e4:	2103      	movs	r1, #3
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f7ff fc34 	bl	8004254 <get_sequence_step_timeout>
 80049ec:	4603      	mov	r3, r0
 80049ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80049f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d109      	bne.n	8004a0e <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 80049fa:	f107 0310 	add.w	r3, r7, #16
 80049fe:	461a      	mov	r2, r3
 8004a00:	2102      	movs	r1, #2
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f7ff fc26 	bl	8004254 <get_sequence_step_timeout>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8004a0e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d109      	bne.n	8004a2a <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 8004a16:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	2150      	movs	r1, #80	@ 0x50
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f001 f950 	bl	8005cc4 <VL53L0X_WrByte>
 8004a24:	4603      	mov	r3, r0
 8004a26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8004a2a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d108      	bne.n	8004a44 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	461a      	mov	r2, r3
 8004a36:	2103      	movs	r1, #3
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f7ff fceb 	bl	8004414 <set_sequence_step_timeout>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 8004a44:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d108      	bne.n	8004a5e <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	461a      	mov	r2, r3
 8004a50:	2102      	movs	r1, #2
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f7ff fcde 	bl	8004414 <set_sequence_step_timeout>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	78ba      	ldrb	r2, [r7, #2]
 8004a62:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8004a66:	e02c      	b.n	8004ac2 <VL53L0X_set_vcsel_pulse_period+0x4ca>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8004a68:	f107 0318 	add.w	r3, r7, #24
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	2104      	movs	r1, #4
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f7ff fbef 	bl	8004254 <get_sequence_step_timeout>
 8004a76:	4603      	mov	r3, r0
 8004a78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8004a7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d109      	bne.n	8004a98 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 8004a84:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8004a88:	461a      	mov	r2, r3
 8004a8a:	2170      	movs	r1, #112	@ 0x70
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f001 f919 	bl	8005cc4 <VL53L0X_WrByte>
 8004a92:	4603      	mov	r3, r0
 8004a94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8004a98:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d108      	bne.n	8004ab2 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	2104      	movs	r1, #4
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f7ff fcb4 	bl	8004414 <set_sequence_step_timeout>
 8004aac:	4603      	mov	r3, r0
 8004aae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	78ba      	ldrb	r2, [r7, #2]
 8004ab6:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8004aba:	e002      	b.n	8004ac2 <VL53L0X_set_vcsel_pulse_period+0x4ca>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004abc:	23fc      	movs	r3, #252	@ 0xfc
 8004abe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}
	}

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 8004ac2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d109      	bne.n	8004ade <VL53L0X_set_vcsel_pulse_period+0x4e6>
		VL53L0X_GETPARAMETERFIELD(Dev,
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8004ad0:	69f9      	ldr	r1, [r7, #28]
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f7fc fe30 	bl	8001738 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 8004ade:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d109      	bne.n	8004afa <VL53L0X_set_vcsel_pulse_period+0x502>
		Status = VL53L0X_perform_phase_calibration(
 8004ae6:	f107 010f 	add.w	r1, r7, #15
 8004aea:	2301      	movs	r3, #1
 8004aec:	2200      	movs	r2, #0
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f7fe fcc2 	bl	8003478 <VL53L0X_perform_phase_calibration>
 8004af4:	4603      	mov	r3, r0
 8004af6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 8004afa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3728      	adds	r7, #40	@ 0x28
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b086      	sub	sp, #24
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	60f8      	str	r0, [r7, #12]
 8004b0e:	460b      	mov	r3, r1
 8004b10:	607a      	str	r2, [r7, #4]
 8004b12:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004b14:	2300      	movs	r3, #0
 8004b16:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8004b18:	7afb      	ldrb	r3, [r7, #11]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d002      	beq.n	8004b24 <VL53L0X_get_vcsel_pulse_period+0x1e>
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d00a      	beq.n	8004b38 <VL53L0X_get_vcsel_pulse_period+0x32>
 8004b22:	e013      	b.n	8004b4c <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8004b24:	f107 0316 	add.w	r3, r7, #22
 8004b28:	461a      	mov	r2, r3
 8004b2a:	2150      	movs	r1, #80	@ 0x50
 8004b2c:	68f8      	ldr	r0, [r7, #12]
 8004b2e:	f001 f94b 	bl	8005dc8 <VL53L0X_RdByte>
 8004b32:	4603      	mov	r3, r0
 8004b34:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8004b36:	e00b      	b.n	8004b50 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8004b38:	f107 0316 	add.w	r3, r7, #22
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	2170      	movs	r1, #112	@ 0x70
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f001 f941 	bl	8005dc8 <VL53L0X_RdByte>
 8004b46:	4603      	mov	r3, r0
 8004b48:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8004b4a:	e001      	b.n	8004b50 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004b4c:	23fc      	movs	r3, #252	@ 0xfc
 8004b4e:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8004b50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d107      	bne.n	8004b68 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8004b58:	7dbb      	ldrb	r3, [r7, #22]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7fe fd5e 	bl	800361c <VL53L0X_decode_vcsel_period>
 8004b60:	4603      	mov	r3, r0
 8004b62:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	701a      	strb	r2, [r3, #0]

	return Status;
 8004b68:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3718      	adds	r7, #24
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b092      	sub	sp, #72	@ 0x48
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8004b84:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8004b88:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8004b8a:	f240 7376 	movw	r3, #1910	@ 0x776
 8004b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 8004b90:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8004b94:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8004b96:	f44f 7325 	mov.w	r3, #660	@ 0x294
 8004b9a:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 8004b9c:	f240 234e 	movw	r3, #590	@ 0x24e
 8004ba0:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 8004ba2:	f240 23b2 	movw	r3, #690	@ 0x2b2
 8004ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8004ba8:	f44f 7325 	mov.w	r3, #660	@ 0x294
 8004bac:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8004bae:	f240 2326 	movw	r3, #550	@ 0x226
 8004bb2:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 8004bb8:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8004bbc:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 8004bc2:	683a      	ldr	r2, [r7, #0]
 8004bc4:	6a3b      	ldr	r3, [r7, #32]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d205      	bcs.n	8004bd6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004bca:	23fc      	movs	r3, #252	@ 0xfc
 8004bcc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		return Status;
 8004bd0:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8004bd4:	e0aa      	b.n	8004d2c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8004bd6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bda:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8004bdc:	683a      	ldr	r2, [r7, #0]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	643b      	str	r3, [r7, #64]	@ 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8004be2:	f107 0314 	add.w	r3, r7, #20
 8004be6:	4619      	mov	r1, r3
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f7fc feed 	bl	80019c8 <VL53L0X_GetSequenceStepEnables>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 8004bf4:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d15b      	bne.n	8004cb4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 8004bfc:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d105      	bne.n	8004c0e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 8004c02:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d102      	bne.n	8004c0e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 8004c08:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d052      	beq.n	8004cb4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8004c0e:	f107 0310 	add.w	r3, r7, #16
 8004c12:	461a      	mov	r2, r3
 8004c14:	2102      	movs	r1, #2
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f7ff fb1c 	bl	8004254 <get_sequence_step_timeout>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8004c22:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d002      	beq.n	8004c30 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8004c2a:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8004c2e:	e07d      	b.n	8004d2c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8004c30:	7d3b      	ldrb	r3, [r7, #20]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00f      	beq.n	8004c56 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8004c36:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8004c38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c3a:	4413      	add	r3, r2
 8004c3c:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8004c3e:	69fa      	ldr	r2, [r7, #28]
 8004c40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d204      	bcs.n	8004c50 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8004c46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c4e:	e002      	b.n	8004c56 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004c50:	23fc      	movs	r3, #252	@ 0xfc
 8004c52:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8004c56:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d002      	beq.n	8004c64 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 8004c5e:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8004c62:	e063      	b.n	8004d2c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8004c64:	7dbb      	ldrb	r3, [r7, #22]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d011      	beq.n	8004c8e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c6e:	4413      	add	r3, r2
 8004c70:	005b      	lsls	r3, r3, #1
 8004c72:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8004c74:	69fa      	ldr	r2, [r7, #28]
 8004c76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d204      	bcs.n	8004c86 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8004c7c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c84:	e016      	b.n	8004cb4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004c86:	23fc      	movs	r3, #252	@ 0xfc
 8004c88:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8004c8c:	e012      	b.n	8004cb4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8004c8e:	7d7b      	ldrb	r3, [r7, #21]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d00f      	beq.n	8004cb4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004c98:	4413      	add	r3, r2
 8004c9a:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8004c9c:	69fa      	ldr	r2, [r7, #28]
 8004c9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d204      	bcs.n	8004cae <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8004ca4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cac:	e002      	b.n	8004cb4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004cae:	23fc      	movs	r3, #252	@ 0xfc
 8004cb0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8004cb4:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d002      	beq.n	8004cc2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 8004cbc:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8004cc0:	e034      	b.n	8004d2c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8004cc2:	7dfb      	ldrb	r3, [r7, #23]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d019      	beq.n	8004cfc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8004cc8:	f107 030c 	add.w	r3, r7, #12
 8004ccc:	461a      	mov	r2, r3
 8004cce:	2103      	movs	r1, #3
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f7ff fabf 	bl	8004254 <get_sequence_step_timeout>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ce0:	4413      	add	r3, r2
 8004ce2:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8004ce4:	69fa      	ldr	r2, [r7, #28]
 8004ce6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d204      	bcs.n	8004cf6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8004cec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cf4:	e002      	b.n	8004cfc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004cf6:	23fc      	movs	r3, #252	@ 0xfc
 8004cf8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8004cfc:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d111      	bne.n	8004d28 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 8004d04:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00e      	beq.n	8004d28 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8004d0a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	643b      	str	r3, [r7, #64]	@ 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 8004d12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d14:	2104      	movs	r1, #4
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f7ff fb7c 	bl	8004414 <set_sequence_step_timeout>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	683a      	ldr	r2, [r7, #0]
 8004d26:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8004d28:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3748      	adds	r7, #72	@ 0x48
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b090      	sub	sp, #64	@ 0x40
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8004d44:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8004d48:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8004d4a:	f240 7376 	movw	r3, #1910	@ 0x776
 8004d4e:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8004d50:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8004d54:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8004d56:	f44f 7325 	mov.w	r3, #660	@ 0x294
 8004d5a:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8004d5c:	f240 234e 	movw	r3, #590	@ 0x24e
 8004d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8004d62:	f240 23b2 	movw	r3, #690	@ 0x2b2
 8004d66:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8004d68:	f44f 7325 	mov.w	r3, #660	@ 0x294
 8004d6c:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8004d6e:	f240 2326 	movw	r3, #550	@ 0x226
 8004d72:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8004d74:	2300      	movs	r3, #0
 8004d76:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8004d78:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004d7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d7c:	441a      	add	r2, r3
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8004d82:	f107 0318 	add.w	r3, r7, #24
 8004d86:	4619      	mov	r1, r3
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f7fc fe1d 	bl	80019c8 <VL53L0X_GetSequenceStepEnables>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8004d94:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d002      	beq.n	8004da2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8004d9c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8004da0:	e075      	b.n	8004e8e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8004da2:	7e3b      	ldrb	r3, [r7, #24]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d105      	bne.n	8004db4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8004da8:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d102      	bne.n	8004db4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 8004dae:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d030      	beq.n	8004e16 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8004db4:	f107 0310 	add.w	r3, r7, #16
 8004db8:	461a      	mov	r2, r3
 8004dba:	2102      	movs	r1, #2
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f7ff fa49 	bl	8004254 <get_sequence_step_timeout>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8004dc8:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d122      	bne.n	8004e16 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8004dd0:	7e3b      	ldrb	r3, [r7, #24]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d007      	beq.n	8004de6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8004dda:	6939      	ldr	r1, [r7, #16]
 8004ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dde:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8004de0:	441a      	add	r2, r3
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8004de6:	7ebb      	ldrb	r3, [r7, #26]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d009      	beq.n	8004e00 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8004df0:	6939      	ldr	r1, [r7, #16]
 8004df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004df4:	440b      	add	r3, r1
 8004df6:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8004df8:	441a      	add	r2, r3
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	601a      	str	r2, [r3, #0]
 8004dfe:	e00a      	b.n	8004e16 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8004e00:	7e7b      	ldrb	r3, [r7, #25]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d007      	beq.n	8004e16 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8004e0a:	6939      	ldr	r1, [r7, #16]
 8004e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e0e:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8004e10:	441a      	add	r2, r3
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004e16:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d114      	bne.n	8004e48 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8004e1e:	7efb      	ldrb	r3, [r7, #27]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d011      	beq.n	8004e48 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8004e24:	f107 030c 	add.w	r3, r7, #12
 8004e28:	461a      	mov	r2, r3
 8004e2a:	2103      	movs	r1, #3
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f7ff fa11 	bl	8004254 <get_sequence_step_timeout>
 8004e32:	4603      	mov	r3, r0
 8004e34:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8004e3c:	68f9      	ldr	r1, [r7, #12]
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e40:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8004e42:	441a      	add	r2, r3
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004e48:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d114      	bne.n	8004e7a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8004e50:	7f3b      	ldrb	r3, [r7, #28]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d011      	beq.n	8004e7a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8004e56:	f107 0314 	add.w	r3, r7, #20
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	2104      	movs	r1, #4
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f7ff f9f8 	bl	8004254 <get_sequence_step_timeout>
 8004e64:	4603      	mov	r3, r0
 8004e66:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8004e6e:	6979      	ldr	r1, [r7, #20]
 8004e70:	6a3b      	ldr	r3, [r7, #32]
 8004e72:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8004e74:	441a      	add	r2, r3
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004e7a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d103      	bne.n	8004e8a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004e8a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3740      	adds	r7, #64	@ 0x40
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
	...

08004e98 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b088      	sub	sp, #32
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8004eaa:	e0c6      	b.n	800503a <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	683a      	ldr	r2, [r7, #0]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	74fb      	strb	r3, [r7, #19]
		Index++;
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	3301      	adds	r3, #1
 8004eba:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8004ebc:	7cfb      	ldrb	r3, [r7, #19]
 8004ebe:	2bff      	cmp	r3, #255	@ 0xff
 8004ec0:	f040 808d 	bne.w	8004fde <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	683a      	ldr	r2, [r7, #0]
 8004ec8:	4413      	add	r3, r2
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	747b      	strb	r3, [r7, #17]
			Index++;
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8004ed4:	7c7b      	ldrb	r3, [r7, #17]
 8004ed6:	2b03      	cmp	r3, #3
 8004ed8:	d87e      	bhi.n	8004fd8 <VL53L0X_load_tuning_settings+0x140>
 8004eda:	a201      	add	r2, pc, #4	@ (adr r2, 8004ee0 <VL53L0X_load_tuning_settings+0x48>)
 8004edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee0:	08004ef1 	.word	0x08004ef1
 8004ee4:	08004f2b 	.word	0x08004f2b
 8004ee8:	08004f65 	.word	0x08004f65
 8004eec:	08004f9f 	.word	0x08004f9f
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	683a      	ldr	r2, [r7, #0]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	743b      	strb	r3, [r7, #16]
				Index++;
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	3301      	adds	r3, #1
 8004efe:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	683a      	ldr	r2, [r7, #0]
 8004f04:	4413      	add	r3, r2
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	73fb      	strb	r3, [r7, #15]
				Index++;
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8004f10:	7c3b      	ldrb	r3, [r7, #16]
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	021b      	lsls	r3, r3, #8
 8004f16:	b29a      	uxth	r2, r3
 8004f18:	7bfb      	ldrb	r3, [r7, #15]
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	4413      	add	r3, r2
 8004f1e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	89ba      	ldrh	r2, [r7, #12]
 8004f24:	f8a3 2134 	strh.w	r2, [r3, #308]	@ 0x134
				break;
 8004f28:	e087      	b.n	800503a <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	683a      	ldr	r2, [r7, #0]
 8004f2e:	4413      	add	r3, r2
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	743b      	strb	r3, [r7, #16]
				Index++;
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	3301      	adds	r3, #1
 8004f38:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	683a      	ldr	r2, [r7, #0]
 8004f3e:	4413      	add	r3, r2
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	73fb      	strb	r3, [r7, #15]
				Index++;
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	3301      	adds	r3, #1
 8004f48:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8004f4a:	7c3b      	ldrb	r3, [r7, #16]
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	021b      	lsls	r3, r3, #8
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	7bfb      	ldrb	r3, [r7, #15]
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	4413      	add	r3, r2
 8004f58:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	89ba      	ldrh	r2, [r7, #12]
 8004f5e:	f8a3 2136 	strh.w	r2, [r3, #310]	@ 0x136
					Temp16);
				break;
 8004f62:	e06a      	b.n	800503a <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	683a      	ldr	r2, [r7, #0]
 8004f68:	4413      	add	r3, r2
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	743b      	strb	r3, [r7, #16]
				Index++;
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	3301      	adds	r3, #1
 8004f72:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	683a      	ldr	r2, [r7, #0]
 8004f78:	4413      	add	r3, r2
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	73fb      	strb	r3, [r7, #15]
				Index++;
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	3301      	adds	r3, #1
 8004f82:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8004f84:	7c3b      	ldrb	r3, [r7, #16]
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	021b      	lsls	r3, r3, #8
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	7bfb      	ldrb	r3, [r7, #15]
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	4413      	add	r3, r2
 8004f92:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	89ba      	ldrh	r2, [r7, #12]
 8004f98:	f8a3 2138 	strh.w	r2, [r3, #312]	@ 0x138
				break;
 8004f9c:	e04d      	b.n	800503a <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	683a      	ldr	r2, [r7, #0]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	743b      	strb	r3, [r7, #16]
				Index++;
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	3301      	adds	r3, #1
 8004fac:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	73fb      	strb	r3, [r7, #15]
				Index++;
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	3301      	adds	r3, #1
 8004fbc:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8004fbe:	7c3b      	ldrb	r3, [r7, #16]
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	021b      	lsls	r3, r3, #8
 8004fc4:	b29a      	uxth	r2, r3
 8004fc6:	7bfb      	ldrb	r3, [r7, #15]
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	4413      	add	r3, r2
 8004fcc:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	89ba      	ldrh	r2, [r7, #12]
 8004fd2:	f8a3 213c 	strh.w	r2, [r3, #316]	@ 0x13c
				break;
 8004fd6:	e030      	b.n	800503a <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004fd8:	23fc      	movs	r3, #252	@ 0xfc
 8004fda:	77fb      	strb	r3, [r7, #31]
 8004fdc:	e02d      	b.n	800503a <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 8004fde:	7cfb      	ldrb	r3, [r7, #19]
 8004fe0:	2b04      	cmp	r3, #4
 8004fe2:	d828      	bhi.n	8005036 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	683a      	ldr	r2, [r7, #0]
 8004fe8:	4413      	add	r3, r2
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	74bb      	strb	r3, [r7, #18]
			Index++;
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	61bb      	str	r3, [r7, #24]
 8004ff8:	e00f      	b.n	800501a <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	683a      	ldr	r2, [r7, #0]
 8004ffe:	4413      	add	r3, r2
 8005000:	7819      	ldrb	r1, [r3, #0]
 8005002:	f107 0208 	add.w	r2, r7, #8
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	4413      	add	r3, r2
 800500a:	460a      	mov	r2, r1
 800500c:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	3301      	adds	r3, #1
 8005012:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	3301      	adds	r3, #1
 8005018:	61bb      	str	r3, [r7, #24]
 800501a:	7cfb      	ldrb	r3, [r7, #19]
 800501c:	69ba      	ldr	r2, [r7, #24]
 800501e:	429a      	cmp	r2, r3
 8005020:	dbeb      	blt.n	8004ffa <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8005022:	7cfb      	ldrb	r3, [r7, #19]
 8005024:	f107 0208 	add.w	r2, r7, #8
 8005028:	7cb9      	ldrb	r1, [r7, #18]
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 fdee 	bl	8005c0c <VL53L0X_WriteMulti>
 8005030:	4603      	mov	r3, r0
 8005032:	77fb      	strb	r3, [r7, #31]
 8005034:	e001      	b.n	800503a <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005036:	23fc      	movs	r3, #252	@ 0xfc
 8005038:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	683a      	ldr	r2, [r7, #0]
 800503e:	4413      	add	r3, r2
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d004      	beq.n	8005050 <VL53L0X_load_tuning_settings+0x1b8>
 8005046:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800504a:	2b00      	cmp	r3, #0
 800504c:	f43f af2e 	beq.w	8004eac <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005050:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005054:	4618      	mov	r0, r3
 8005056:	3720      	adds	r7, #32
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b088      	sub	sp, #32
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005068:	2300      	movs	r3, #0
 800506a:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8005072:	f107 0313 	add.w	r3, r7, #19
 8005076:	4619      	mov	r1, r3
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	f7fc fd31 	bl	8001ae0 <VL53L0X_GetXTalkCompensationEnable>
 800507e:	4603      	mov	r3, r0
 8005080:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8005082:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d111      	bne.n	80050ae <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800508a:	7cfb      	ldrb	r3, [r7, #19]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00e      	beq.n	80050ae <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6a1b      	ldr	r3, [r3, #32]
 8005094:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	8a9b      	ldrh	r3, [r3, #20]
 800509a:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	fb02 f303 	mul.w	r3, r2, r3
 80050a2:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	3380      	adds	r3, #128	@ 0x80
 80050a8:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 80050ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3720      	adds	r7, #32
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b086      	sub	sp, #24
 80050be:	af00      	add	r7, sp, #0
 80050c0:	60f8      	str	r0, [r7, #12]
 80050c2:	60b9      	str	r1, [r7, #8]
 80050c4:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80050c6:	2300      	movs	r3, #0
 80050c8:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 80050d2:	f107 0310 	add.w	r3, r7, #16
 80050d6:	461a      	mov	r2, r3
 80050d8:	68b9      	ldr	r1, [r7, #8]
 80050da:	68f8      	ldr	r0, [r7, #12]
 80050dc:	f7ff ffbe 	bl	800505c <VL53L0X_get_total_xtalk_rate>
 80050e0:	4603      	mov	r3, r0
 80050e2:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 80050e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d105      	bne.n	80050f8 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	441a      	add	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	601a      	str	r2, [r3, #0]

	return Status;
 80050f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3718      	adds	r7, #24
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b09a      	sub	sp, #104	@ 0x68
 8005108:	af00      	add	r7, sp, #0
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	607a      	str	r2, [r7, #4]
 8005110:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8005112:	2312      	movs	r3, #18
 8005114:	657b      	str	r3, [r7, #84]	@ 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 8005116:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800511a:	653b      	str	r3, [r7, #80]	@ 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800511c:	2342      	movs	r3, #66	@ 0x42
 800511e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8005120:	2306      	movs	r3, #6
 8005122:	64bb      	str	r3, [r7, #72]	@ 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8005124:	2307      	movs	r3, #7
 8005126:	647b      	str	r3, [r7, #68]	@ 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005128:	2300      	movs	r3, #0
 800512a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f8b3 3154 	ldrh.w	r3, [r3, #340]	@ 0x154
	dmaxCalRange_mm =
 8005134:	63fb      	str	r3, [r7, #60]	@ 0x3c

	dmaxCalSignalRateRtn_mcps =
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800513c:	63bb      	str	r3, [r7, #56]	@ 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800513e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005140:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005142:	fb02 f303 	mul.w	r3, r2, r3
 8005146:	637b      	str	r3, [r7, #52]	@ 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8005148:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800514a:	3380      	adds	r3, #128	@ 0x80
 800514c:	0a1b      	lsrs	r3, r3, #8
 800514e:	637b      	str	r3, [r7, #52]	@ 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8005150:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005152:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005154:	fb02 f303 	mul.w	r3, r2, r3
 8005158:	637b      	str	r3, [r7, #52]	@ 0x34

	minSignalNeeded_p1 = 0;
 800515a:	2300      	movs	r3, #0
 800515c:	667b      	str	r3, [r7, #100]	@ 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d01a      	beq.n	800519a <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	029b      	lsls	r3, r3, #10
 8005168:	633b      	str	r3, [r7, #48]	@ 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800516e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005170:	4413      	add	r3, r2
 8005172:	667b      	str	r3, [r7, #100]	@ 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8005174:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	fbb2 f3f3 	udiv	r3, r2, r3
 800517c:	667b      	str	r3, [r7, #100]	@ 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800517e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005180:	4613      	mov	r3, r2
 8005182:	005b      	lsls	r3, r3, #1
 8005184:	4413      	add	r3, r2
 8005186:	667b      	str	r3, [r7, #100]	@ 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8005188:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800518a:	fb03 f303 	mul.w	r3, r3, r3
 800518e:	667b      	str	r3, [r7, #100]	@ 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8005190:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005192:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005196:	0c1b      	lsrs	r3, r3, #16
 8005198:	667b      	str	r3, [r7, #100]	@ 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800519e:	fb02 f303 	mul.w	r3, r2, r3
 80051a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 80051a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051a6:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80051aa:	0c1b      	lsrs	r3, r3, #16
 80051ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 80051ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051b0:	fb03 f303 	mul.w	r3, r3, r3
 80051b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 80051b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051b8:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80051bc:	0c1b      	lsrs	r3, r3, #16
 80051be:	62bb      	str	r3, [r7, #40]	@ 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 80051c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051c2:	085a      	lsrs	r2, r3, #1
 80051c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051c6:	441a      	add	r2, r3
 80051c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ce:	62bb      	str	r3, [r7, #40]	@ 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 80051d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051d4:	fb02 f303 	mul.w	r3, r2, r3
 80051d8:	62bb      	str	r3, [r7, #40]	@ 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 80051da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051e0:	d302      	bcc.n	80051e8 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 80051e2:	4b54      	ldr	r3, [pc, #336]	@ (8005334 <VL53L0X_calc_dmax+0x230>)
 80051e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80051e6:	e015      	b.n	8005214 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 80051e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051ea:	085a      	lsrs	r2, r3, #1
 80051ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051ee:	441a      	add	r2, r3
 80051f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051f6:	677b      	str	r3, [r7, #116]	@ 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 80051f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051fc:	fb02 f303 	mul.w	r3, r2, r3
 8005200:	677b      	str	r3, [r7, #116]	@ 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8005202:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005204:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005208:	0c1b      	lsrs	r3, r3, #16
 800520a:	663b      	str	r3, [r7, #96]	@ 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800520c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800520e:	fb03 f303 	mul.w	r3, r3, r3
 8005212:	663b      	str	r3, [r7, #96]	@ 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8005214:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005216:	039b      	lsls	r3, r3, #14
 8005218:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800521c:	4a46      	ldr	r2, [pc, #280]	@ (8005338 <VL53L0X_calc_dmax+0x234>)
 800521e:	fba2 2303 	umull	r2, r3, r2, r3
 8005222:	099b      	lsrs	r3, r3, #6
 8005224:	627b      	str	r3, [r7, #36]	@ 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 8005226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005228:	fb03 f303 	mul.w	r3, r3, r3
 800522c:	627b      	str	r3, [r7, #36]	@ 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800522e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005230:	fb03 f303 	mul.w	r3, r3, r3
 8005234:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8005236:	6a3b      	ldr	r3, [r7, #32]
 8005238:	3308      	adds	r3, #8
 800523a:	091b      	lsrs	r3, r3, #4
 800523c:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800523e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005240:	6a3b      	ldr	r3, [r7, #32]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	627b      	str	r3, [r7, #36]	@ 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8005246:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005248:	4613      	mov	r3, r2
 800524a:	005b      	lsls	r3, r3, #1
 800524c:	4413      	add	r3, r2
 800524e:	011b      	lsls	r3, r3, #4
 8005250:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8005258:	0b9b      	lsrs	r3, r3, #14
 800525a:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800525c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800525e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005260:	4413      	add	r3, r2
 8005262:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8005264:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005266:	085b      	lsrs	r3, r3, #1
 8005268:	69ba      	ldr	r2, [r7, #24]
 800526a:	4413      	add	r3, r2
 800526c:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800526e:	69ba      	ldr	r2, [r7, #24]
 8005270:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005272:	fbb2 f3f3 	udiv	r3, r2, r3
 8005276:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	039b      	lsls	r3, r3, #14
 800527c:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	085b      	lsrs	r3, r3, #1
 8005282:	69ba      	ldr	r2, [r7, #24]
 8005284:	4413      	add	r3, r2
 8005286:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 8005288:	69ba      	ldr	r2, [r7, #24]
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005290:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005296:	fb02 f303 	mul.w	r3, r2, r3
 800529a:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80052a2:	4a25      	ldr	r2, [pc, #148]	@ (8005338 <VL53L0X_calc_dmax+0x234>)
 80052a4:	fba2 2303 	umull	r2, r3, r2, r3
 80052a8:	099b      	lsrs	r3, r3, #6
 80052aa:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	011b      	lsls	r3, r3, #4
 80052b0:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80052b8:	4a1f      	ldr	r2, [pc, #124]	@ (8005338 <VL53L0X_calc_dmax+0x234>)
 80052ba:	fba2 2303 	umull	r2, r3, r2, r3
 80052be:	099b      	lsrs	r3, r3, #6
 80052c0:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 80052c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052c4:	3380      	adds	r3, #128	@ 0x80
 80052c6:	0a1b      	lsrs	r3, r3, #8
 80052c8:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d008      	beq.n	80052e2 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	085a      	lsrs	r2, r3, #1
 80052d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052d6:	441a      	add	r2, r3
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	fbb2 f3f3 	udiv	r3, r2, r3
 80052de:	65bb      	str	r3, [r7, #88]	@ 0x58
 80052e0:	e001      	b.n	80052e6 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 80052e2:	2300      	movs	r3, #0
 80052e4:	65bb      	str	r3, [r7, #88]	@ 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 80052e6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80052e8:	f7fe f9be 	bl	8003668 <VL53L0X_isqrt>
 80052ec:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d008      	beq.n	8005306 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	085a      	lsrs	r2, r3, #1
 80052f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052fa:	441a      	add	r2, r3
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005302:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005304:	e001      	b.n	800530a <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8005306:	2300      	movs	r3, #0
 8005308:	65fb      	str	r3, [r7, #92]	@ 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800530a:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800530c:	f7fe f9ac 	bl	8003668 <VL53L0X_isqrt>
 8005310:	65f8      	str	r0, [r7, #92]	@ 0x5c

	*pdmax_mm = dmaxDark;
 8005312:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800531c:	429a      	cmp	r2, r3
 800531e:	d902      	bls.n	8005326 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 8005320:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005322:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005324:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8005326:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
}
 800532a:	4618      	mov	r0, r3
 800532c:	3768      	adds	r7, #104	@ 0x68
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	fff00000 	.word	0xfff00000
 8005338:	10624dd3 	.word	0x10624dd3

0800533c <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b0b4      	sub	sp, #208	@ 0xd0
 8005340:	af04      	add	r7, sp, #16
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	607a      	str	r2, [r7, #4]
 8005348:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800534a:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800534e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8005352:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8005356:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800535a:	f44f 13c8 	mov.w	r3, #1638400	@ 0x190000
 800535e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8005362:	f241 235c 	movw	r3, #4700	@ 0x125c
 8005366:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800536a:	4b9e      	ldr	r3, [pc, #632]	@ (80055e4 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800536c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8005370:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8005374:	67fb      	str	r3, [r7, #124]	@ 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8005376:	f04f 4270 	mov.w	r2, #4026531840	@ 0xf0000000
 800537a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800537e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005382:	67bb      	str	r3, [r7, #120]	@ 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8005384:	4b98      	ldr	r3, [pc, #608]	@ (80055e8 <VL53L0X_calc_sigma_estimate+0x2ac>)
 8005386:	677b      	str	r3, [r7, #116]	@ 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8005388:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800538c:	673b      	str	r3, [r7, #112]	@ 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800538e:	f44f 1348 	mov.w	r3, #3276800	@ 0x320000
 8005392:	66fb      	str	r3, [r7, #108]	@ 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 8005394:	f240 6377 	movw	r3, #1655	@ 0x677
 8005398:	66bb      	str	r3, [r7, #104]	@ 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800539a:	2300      	movs	r3, #0
 800539c:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6a1b      	ldr	r3, [r3, #32]
 80053a4:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80053ae:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 80053b2:	0c1b      	lsrs	r3, r3, #16
 80053b4:	667b      	str	r3, [r7, #100]	@ 0x64

	correctedSignalRate_mcps =
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	663b      	str	r3, [r7, #96]	@ 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 80053bc:	f107 0310 	add.w	r3, r7, #16
 80053c0:	461a      	mov	r2, r3
 80053c2:	68b9      	ldr	r1, [r7, #8]
 80053c4:	68f8      	ldr	r0, [r7, #12]
 80053c6:	f7ff fe78 	bl	80050ba <VL53L0X_get_total_signal_rate>
 80053ca:	4603      	mov	r3, r0
 80053cc:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 80053d0:	f107 0314 	add.w	r3, r7, #20
 80053d4:	461a      	mov	r2, r3
 80053d6:	68b9      	ldr	r1, [r7, #8]
 80053d8:	68f8      	ldr	r0, [r7, #12]
 80053da:	f7ff fe3f 	bl	800505c <VL53L0X_get_total_xtalk_rate>
 80053de:	4603      	mov	r3, r0
 80053e0:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80053ea:	fb02 f303 	mul.w	r3, r2, r3
 80053ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 80053f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80053f2:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80053f6:	0c1b      	lsrs	r3, r3, #16
 80053f8:	65fb      	str	r3, [r7, #92]	@ 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005400:	fb02 f303 	mul.w	r3, r2, r3
 8005404:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8005408:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800540c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800540e:	429a      	cmp	r2, r3
 8005410:	d902      	bls.n	8005418 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 8005412:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005414:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8005418:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 800541c:	2b00      	cmp	r3, #0
 800541e:	d168      	bne.n	80054f2 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005426:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 8005430:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8005434:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8005438:	461a      	mov	r2, r3
 800543a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 800543e:	68f8      	ldr	r0, [r7, #12]
 8005440:	f7fe feb4 	bl	80041ac <VL53L0X_calc_timeout_mclks>
 8005444:	6578      	str	r0, [r7, #84]	@ 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800544c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8005456:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800545a:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800545e:	461a      	mov	r2, r3
 8005460:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8005464:	68f8      	ldr	r0, [r7, #12]
 8005466:	f7fe fea1 	bl	80041ac <VL53L0X_calc_timeout_mclks>
 800546a:	64f8      	str	r0, [r7, #76]	@ 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800546c:	2303      	movs	r3, #3
 800546e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		if (finalRangeVcselPCLKS == 8)
 8005472:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8005476:	2b08      	cmp	r3, #8
 8005478:	d102      	bne.n	8005480 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800547a:	2302      	movs	r3, #2
 800547c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8005480:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005482:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005484:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8005486:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800548a:	fb02 f303 	mul.w	r3, r2, r3
 800548e:	02db      	lsls	r3, r3, #11
 8005490:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8005494:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005498:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800549c:	4a53      	ldr	r2, [pc, #332]	@ (80055ec <VL53L0X_calc_sigma_estimate+0x2b0>)
 800549e:	fba2 2303 	umull	r2, r3, r2, r3
 80054a2:	099b      	lsrs	r3, r3, #6
 80054a4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 80054a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80054ac:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80054ae:	fb02 f303 	mul.w	r3, r2, r3
 80054b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80054b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80054ba:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80054be:	4a4b      	ldr	r2, [pc, #300]	@ (80055ec <VL53L0X_calc_sigma_estimate+0x2b0>)
 80054c0:	fba2 2303 	umull	r2, r3, r2, r3
 80054c4:	099b      	lsrs	r3, r3, #6
 80054c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	3380      	adds	r3, #128	@ 0x80
 80054ce:	0a1b      	lsrs	r3, r3, #8
 80054d0:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80054d8:	fb02 f303 	mul.w	r3, r2, r3
 80054dc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 80054e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80054e4:	3380      	adds	r3, #128	@ 0x80
 80054e6:	0a1b      	lsrs	r3, r3, #8
 80054e8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	021b      	lsls	r3, r3, #8
 80054f0:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 80054f2:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d002      	beq.n	8005500 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 80054fa:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 80054fe:	e15e      	b.n	80057be <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 8005500:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005502:	2b00      	cmp	r3, #0
 8005504:	d10c      	bne.n	8005520 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800550c:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005514:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
		*pDmax_mm = 0;
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	2200      	movs	r2, #0
 800551c:	601a      	str	r2, [r3, #0]
 800551e:	e14c      	b.n	80057ba <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 8005520:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005524:	2b00      	cmp	r3, #0
 8005526:	d102      	bne.n	800552e <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 8005528:	2301      	movs	r3, #1
 800552a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800552e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005532:	64bb      	str	r3, [r7, #72]	@ 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8005534:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005536:	041a      	lsls	r2, r3, #16
 8005538:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800553a:	fbb2 f3f3 	udiv	r3, r2, r3
 800553e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8005542:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005546:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005548:	429a      	cmp	r2, r3
 800554a:	d902      	bls.n	8005552 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800554c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800554e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8005552:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005556:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800555a:	fb02 f303 	mul.w	r3, r2, r3
 800555e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8005562:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8005566:	4613      	mov	r3, r2
 8005568:	005b      	lsls	r3, r3, #1
 800556a:	4413      	add	r3, r2
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	4618      	mov	r0, r3
 8005570:	f7fe f87a 	bl	8003668 <VL53L0X_isqrt>
 8005574:	4603      	mov	r3, r0
 8005576:	005b      	lsls	r3, r3, #1
 8005578:	647b      	str	r3, [r7, #68]	@ 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	891b      	ldrh	r3, [r3, #8]
 800557e:	461a      	mov	r2, r3
 8005580:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005582:	fb02 f303 	mul.w	r3, r2, r3
 8005586:	643b      	str	r3, [r7, #64]	@ 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8005588:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800558a:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800558c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005590:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8005592:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 8005594:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8005598:	4a14      	ldr	r2, [pc, #80]	@ (80055ec <VL53L0X_calc_sigma_estimate+0x2b0>)
 800559a:	fba2 2303 	umull	r2, r3, r2, r3
 800559e:	099b      	lsrs	r3, r3, #6
 80055a0:	63fb      	str	r3, [r7, #60]	@ 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 80055a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055a4:	041b      	lsls	r3, r3, #16
 80055a6:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80055aa:	4a10      	ldr	r2, [pc, #64]	@ (80055ec <VL53L0X_calc_sigma_estimate+0x2b0>)
 80055ac:	fba2 2303 	umull	r2, r3, r2, r3
 80055b0:	099b      	lsrs	r3, r3, #6
 80055b2:	63bb      	str	r3, [r7, #56]	@ 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 80055b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055b6:	021b      	lsls	r3, r3, #8
 80055b8:	63fb      	str	r3, [r7, #60]	@ 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 80055ba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80055bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055be:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	bfb8      	it	lt
 80055c6:	425b      	neglt	r3, r3
 80055c8:	637b      	str	r3, [r7, #52]	@ 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 80055ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055cc:	021b      	lsls	r3, r3, #8
 80055ce:	637b      	str	r3, [r7, #52]	@ 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	7e1b      	ldrb	r3, [r3, #24]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d00b      	beq.n	80055f0 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 80055d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80055dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80055e0:	e033      	b.n	800564a <VL53L0X_calc_sigma_estimate+0x30e>
 80055e2:	bf00      	nop
 80055e4:	028f87ae 	.word	0x028f87ae
 80055e8:	0006999a 	.word	0x0006999a
 80055ec:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 80055f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80055f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80055f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 80055fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005600:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 8005604:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005608:	fb02 f303 	mul.w	r3, r2, r3
 800560c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8005610:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005614:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005616:	4413      	add	r3, r2
 8005618:	0c1b      	lsrs	r3, r3, #16
 800561a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800561e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005622:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005626:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800562a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800562e:	085b      	lsrs	r3, r3, #1
 8005630:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8005634:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005638:	fb03 f303 	mul.w	r3, r3, r3
 800563c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 8005640:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005644:	0b9b      	lsrs	r3, r3, #14
 8005646:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800564a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800564e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005650:	fb02 f303 	mul.w	r3, r2, r3
 8005654:	633b      	str	r3, [r7, #48]	@ 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 8005656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005658:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800565c:	0c1b      	lsrs	r3, r3, #16
 800565e:	633b      	str	r3, [r7, #48]	@ 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 8005660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005662:	fb03 f303 	mul.w	r3, r3, r3
 8005666:	633b      	str	r3, [r7, #48]	@ 0x30

		sqr2 = sigmaEstimateP2;
 8005668:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800566c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800566e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005670:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005674:	0c1b      	lsrs	r3, r3, #16
 8005676:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 8005678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800567a:	fb03 f303 	mul.w	r3, r3, r3
 800567e:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 8005680:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005684:	4413      	add	r3, r2
 8005686:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8005688:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800568a:	f7fd ffed 	bl	8003668 <VL53L0X_isqrt>
 800568e:	6278      	str	r0, [r7, #36]	@ 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 8005690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005692:	041b      	lsls	r3, r3, #16
 8005694:	627b      	str	r3, [r7, #36]	@ 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8005696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005698:	3332      	adds	r3, #50	@ 0x32
 800569a:	4a4b      	ldr	r2, [pc, #300]	@ (80057c8 <VL53L0X_calc_sigma_estimate+0x48c>)
 800569c:	fba2 2303 	umull	r2, r3, r2, r3
 80056a0:	095a      	lsrs	r2, r3, #5
 80056a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 80056ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80056b0:	f640 32b5 	movw	r2, #2997	@ 0xbb5
 80056b4:	fb02 f303 	mul.w	r3, r2, r3
 80056b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 80056bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80056c0:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 80056c4:	3308      	adds	r3, #8
 80056c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		sigmaEstRtn		 /= 10000;
 80056ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80056ce:	4a3f      	ldr	r2, [pc, #252]	@ (80057cc <VL53L0X_calc_sigma_estimate+0x490>)
 80056d0:	fba2 2303 	umull	r2, r3, r2, r3
 80056d4:	0b5b      	lsrs	r3, r3, #13
 80056d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 80056da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80056de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d902      	bls.n	80056ea <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 80056e4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80056e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 80056ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80056ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80056f2:	4413      	add	r3, r2
 80056f4:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 80056f8:	4a35      	ldr	r2, [pc, #212]	@ (80057d0 <VL53L0X_calc_sigma_estimate+0x494>)
 80056fa:	fba2 2303 	umull	r2, r3, r2, r3
 80056fe:	099b      	lsrs	r3, r3, #6
 8005700:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 8005702:	6a3b      	ldr	r3, [r7, #32]
 8005704:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 8005706:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800570a:	441a      	add	r2, r3
 800570c:	6a3b      	ldr	r3, [r7, #32]
 800570e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005712:	4618      	mov	r0, r3
 8005714:	f7fd ffa8 	bl	8003668 <VL53L0X_isqrt>
 8005718:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	021b      	lsls	r3, r3, #8
 800571e:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8005726:	4a2a      	ldr	r2, [pc, #168]	@ (80057d0 <VL53L0X_calc_sigma_estimate+0x494>)
 8005728:	fba2 2303 	umull	r2, r3, r2, r3
 800572c:	099b      	lsrs	r3, r3, #6
 800572e:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8005730:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005734:	fb03 f303 	mul.w	r3, r3, r3
 8005738:	633b      	str	r3, [r7, #48]	@ 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	fb03 f303 	mul.w	r3, r3, r3
 8005740:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8005742:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005746:	4413      	add	r3, r2
 8005748:	4618      	mov	r0, r3
 800574a:	f7fd ff8d 	bl	8003668 <VL53L0X_isqrt>
 800574e:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005756:	fb02 f303 	mul.w	r3, r2, r3
 800575a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800575e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005760:	2b00      	cmp	r3, #0
 8005762:	d009      	beq.n	8005778 <VL53L0X_calc_sigma_estimate+0x43c>
 8005764:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005768:	2b00      	cmp	r3, #0
 800576a:	d005      	beq.n	8005778 <VL53L0X_calc_sigma_estimate+0x43c>
 800576c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8005770:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005774:	429a      	cmp	r2, r3
 8005776:	d903      	bls.n	8005780 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 8005778:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800577c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8005786:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
		Status = VL53L0X_calc_dmax(
 8005792:	6939      	ldr	r1, [r7, #16]
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	9303      	str	r3, [sp, #12]
 8005798:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800579c:	9302      	str	r3, [sp, #8]
 800579e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80057a2:	9301      	str	r3, [sp, #4]
 80057a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057a6:	9300      	str	r3, [sp, #0]
 80057a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80057ac:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80057ae:	68f8      	ldr	r0, [r7, #12]
 80057b0:	f7ff fca8 	bl	8005104 <VL53L0X_calc_dmax>
 80057b4:	4603      	mov	r3, r0
 80057b6:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80057ba:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
}
 80057be:	4618      	mov	r0, r3
 80057c0:	37c0      	adds	r7, #192	@ 0xc0
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	51eb851f 	.word	0x51eb851f
 80057cc:	d1b71759 	.word	0xd1b71759
 80057d0:	10624dd3 	.word	0x10624dd3

080057d4 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b090      	sub	sp, #64	@ 0x40
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	607a      	str	r2, [r7, #4]
 80057de:	461a      	mov	r2, r3
 80057e0:	460b      	mov	r3, r1
 80057e2:	72fb      	strb	r3, [r7, #11]
 80057e4:	4613      	mov	r3, r2
 80057e6:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80057e8:	2300      	movs	r3, #0
 80057ea:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 80057ee:	2300      	movs	r3, #0
 80057f0:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	uint8_t SignalRefClipflag = 0;
 80057f4:	2300      	movs	r3, #0
 80057f6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 80057fa:	2300      	movs	r3, #0
 80057fc:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8005800:	2300      	movs	r3, #0
 8005802:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8005806:	2300      	movs	r3, #0
 8005808:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800580c:	2300      	movs	r3, #0
 800580e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8005812:	2300      	movs	r3, #0
 8005814:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8005818:	2300      	movs	r3, #0
 800581a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	uint16_t tmpWord = 0;
 800581e:	2300      	movs	r3, #0
 8005820:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8005822:	2300      	movs	r3, #0
 8005824:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8005826:	7afb      	ldrb	r3, [r7, #11]
 8005828:	10db      	asrs	r3, r3, #3
 800582a:	b2db      	uxtb	r3, r3
 800582c:	f003 030f 	and.w	r3, r3, #15
 8005830:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8005834:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8005838:	2b00      	cmp	r3, #0
 800583a:	d017      	beq.n	800586c <VL53L0X_get_pal_range_status+0x98>
 800583c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8005840:	2b05      	cmp	r3, #5
 8005842:	d013      	beq.n	800586c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8005844:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8005848:	2b07      	cmp	r3, #7
 800584a:	d00f      	beq.n	800586c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800584c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8005850:	2b0c      	cmp	r3, #12
 8005852:	d00b      	beq.n	800586c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8005854:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8005858:	2b0d      	cmp	r3, #13
 800585a:	d007      	beq.n	800586c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800585c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8005860:	2b0e      	cmp	r3, #14
 8005862:	d003      	beq.n	800586c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 8005864:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8005868:	2b0f      	cmp	r3, #15
 800586a:	d103      	bne.n	8005874 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800586c:	2301      	movs	r3, #1
 800586e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8005872:	e002      	b.n	800587a <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 8005874:	2300      	movs	r3, #0
 8005876:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800587a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800587e:	2b00      	cmp	r3, #0
 8005880:	d109      	bne.n	8005896 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8005882:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 8005886:	461a      	mov	r2, r3
 8005888:	2100      	movs	r1, #0
 800588a:	68f8      	ldr	r0, [r7, #12]
 800588c:	f7fc f9fc 	bl	8001c88 <VL53L0X_GetLimitCheckEnable>
 8005890:	4603      	mov	r3, r0
 8005892:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8005896:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800589a:	2b00      	cmp	r3, #0
 800589c:	d02e      	beq.n	80058fc <VL53L0X_get_pal_range_status+0x128>
 800589e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d12a      	bne.n	80058fc <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 80058a6:	f107 0310 	add.w	r3, r7, #16
 80058aa:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80058ae:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80058b0:	68f8      	ldr	r0, [r7, #12]
 80058b2:	f7ff fd43 	bl	800533c <VL53L0X_calc_sigma_estimate>
 80058b6:	4603      	mov	r3, r0
 80058b8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 80058bc:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d103      	bne.n	80058cc <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058ca:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 80058cc:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d113      	bne.n	80058fc <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 80058d4:	f107 0320 	add.w	r3, r7, #32
 80058d8:	461a      	mov	r2, r3
 80058da:	2100      	movs	r1, #0
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f7fc fa59 	bl	8001d94 <VL53L0X_GetLimitCheckValue>
 80058e2:	4603      	mov	r3, r0
 80058e4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 80058e8:	6a3b      	ldr	r3, [r7, #32]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d006      	beq.n	80058fc <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 80058ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058f0:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d902      	bls.n	80058fc <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 80058f6:	2301      	movs	r3, #1
 80058f8:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80058fc:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8005900:	2b00      	cmp	r3, #0
 8005902:	d109      	bne.n	8005918 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8005904:	f107 0329 	add.w	r3, r7, #41	@ 0x29
 8005908:	461a      	mov	r2, r3
 800590a:	2102      	movs	r1, #2
 800590c:	68f8      	ldr	r0, [r7, #12]
 800590e:	f7fc f9bb 	bl	8001c88 <VL53L0X_GetLimitCheckEnable>
 8005912:	4603      	mov	r3, r0
 8005914:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8005918:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800591c:	2b00      	cmp	r3, #0
 800591e:	d044      	beq.n	80059aa <VL53L0X_get_pal_range_status+0x1d6>
 8005920:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8005924:	2b00      	cmp	r3, #0
 8005926:	d140      	bne.n	80059aa <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8005928:	f107 031c 	add.w	r3, r7, #28
 800592c:	461a      	mov	r2, r3
 800592e:	2102      	movs	r1, #2
 8005930:	68f8      	ldr	r0, [r7, #12]
 8005932:	f7fc fa2f 	bl	8001d94 <VL53L0X_GetLimitCheckValue>
 8005936:	4603      	mov	r3, r0
 8005938:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800593c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8005940:	2b00      	cmp	r3, #0
 8005942:	d107      	bne.n	8005954 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005944:	2201      	movs	r2, #1
 8005946:	21ff      	movs	r1, #255	@ 0xff
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f000 f9bb 	bl	8005cc4 <VL53L0X_WrByte>
 800594e:	4603      	mov	r3, r0
 8005950:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 8005954:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8005958:	2b00      	cmp	r3, #0
 800595a:	d109      	bne.n	8005970 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800595c:	f107 0316 	add.w	r3, r7, #22
 8005960:	461a      	mov	r2, r3
 8005962:	21b6      	movs	r1, #182	@ 0xb6
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f000 fa59 	bl	8005e1c <VL53L0X_RdWord>
 800596a:	4603      	mov	r3, r0
 800596c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 8005970:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8005974:	2b00      	cmp	r3, #0
 8005976:	d107      	bne.n	8005988 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005978:	2200      	movs	r2, #0
 800597a:	21ff      	movs	r1, #255	@ 0xff
 800597c:	68f8      	ldr	r0, [r7, #12]
 800597e:	f000 f9a1 	bl	8005cc4 <VL53L0X_WrByte>
 8005982:	4603      	mov	r3, r0
 8005984:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8005988:	8afb      	ldrh	r3, [r7, #22]
 800598a:	025b      	lsls	r3, r3, #9
 800598c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005992:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148

		if ((SignalRefClipValue > 0) &&
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d006      	beq.n	80059aa <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800599c:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800599e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d902      	bls.n	80059aa <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 80059a4:	2301      	movs	r3, #1
 80059a6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80059aa:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d109      	bne.n	80059c6 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80059b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80059b6:	461a      	mov	r2, r3
 80059b8:	2103      	movs	r1, #3
 80059ba:	68f8      	ldr	r0, [r7, #12]
 80059bc:	f7fc f964 	bl	8001c88 <VL53L0X_GetLimitCheckEnable>
 80059c0:	4603      	mov	r3, r0
 80059c2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 80059c6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d023      	beq.n	8005a16 <VL53L0X_get_pal_range_status+0x242>
 80059ce:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d11f      	bne.n	8005a16 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 80059d6:	893b      	ldrh	r3, [r7, #8]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d102      	bne.n	80059e2 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 80059dc:	2300      	movs	r3, #0
 80059de:	637b      	str	r3, [r7, #52]	@ 0x34
 80059e0:	e005      	b.n	80059ee <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	021a      	lsls	r2, r3, #8
 80059e6:	893b      	ldrh	r3, [r7, #8]
 80059e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ec:	637b      	str	r3, [r7, #52]	@ 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 80059ee:	f107 0318 	add.w	r3, r7, #24
 80059f2:	461a      	mov	r2, r3
 80059f4:	2103      	movs	r1, #3
 80059f6:	68f8      	ldr	r0, [r7, #12]
 80059f8:	f7fc f9cc 	bl	8001d94 <VL53L0X_GetLimitCheckValue>
 80059fc:	4603      	mov	r3, r0
 80059fe:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d006      	beq.n	8005a16 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8005a08:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 8005a0a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d202      	bcs.n	8005a16 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8005a10:	2301      	movs	r3, #1
 8005a12:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005a16:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d14a      	bne.n	8005ab4 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 8005a1e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d103      	bne.n	8005a2e <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 8005a26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a28:	22ff      	movs	r2, #255	@ 0xff
 8005a2a:	701a      	strb	r2, [r3, #0]
 8005a2c:	e042      	b.n	8005ab4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 8005a2e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d007      	beq.n	8005a46 <VL53L0X_get_pal_range_status+0x272>
 8005a36:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d003      	beq.n	8005a46 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 8005a3e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8005a42:	2b03      	cmp	r3, #3
 8005a44:	d103      	bne.n	8005a4e <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8005a46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a48:	2205      	movs	r2, #5
 8005a4a:	701a      	strb	r2, [r3, #0]
 8005a4c:	e032      	b.n	8005ab4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 8005a4e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8005a52:	2b06      	cmp	r3, #6
 8005a54:	d003      	beq.n	8005a5e <VL53L0X_get_pal_range_status+0x28a>
 8005a56:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8005a5a:	2b09      	cmp	r3, #9
 8005a5c:	d103      	bne.n	8005a66 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 8005a5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a60:	2204      	movs	r2, #4
 8005a62:	701a      	strb	r2, [r3, #0]
 8005a64:	e026      	b.n	8005ab4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 8005a66:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8005a6a:	2b08      	cmp	r3, #8
 8005a6c:	d007      	beq.n	8005a7e <VL53L0X_get_pal_range_status+0x2aa>
 8005a6e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8005a72:	2b0a      	cmp	r3, #10
 8005a74:	d003      	beq.n	8005a7e <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 8005a76:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d103      	bne.n	8005a86 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 8005a7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a80:	2203      	movs	r2, #3
 8005a82:	701a      	strb	r2, [r3, #0]
 8005a84:	e016      	b.n	8005ab4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 8005a86:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8005a8a:	2b04      	cmp	r3, #4
 8005a8c:	d003      	beq.n	8005a96 <VL53L0X_get_pal_range_status+0x2c2>
 8005a8e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d103      	bne.n	8005a9e <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 8005a96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a98:	2202      	movs	r2, #2
 8005a9a:	701a      	strb	r2, [r3, #0]
 8005a9c:	e00a      	b.n	8005ab4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 8005a9e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d103      	bne.n	8005aae <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8005aa6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	701a      	strb	r2, [r3, #0]
 8005aac:	e002      	b.n	8005ab4 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 8005aae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8005ab4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d102      	bne.n	8005ac2 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8005abc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005abe:	2200      	movs	r2, #0
 8005ac0:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8005ac2:	f107 032a 	add.w	r3, r7, #42	@ 0x2a
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	2101      	movs	r1, #1
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	f7fc f8dc 	bl	8001c88 <VL53L0X_GetLimitCheckEnable>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8005ad6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d14f      	bne.n	8005b7e <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8005ade:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d003      	beq.n	8005aee <VL53L0X_get_pal_range_status+0x31a>
 8005ae6:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d103      	bne.n	8005af6 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 8005aee:	2301      	movs	r3, #1
 8005af0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8005af4:	e002      	b.n	8005afc <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 8005af6:	2300      	movs	r3, #0
 8005af8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8005b02:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8005b06:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8005b0a:	2b04      	cmp	r3, #4
 8005b0c:	d003      	beq.n	8005b16 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 8005b0e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d103      	bne.n	8005b1e <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 8005b16:	2301      	movs	r3, #1
 8005b18:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8005b1c:	e002      	b.n	8005b24 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8005b2a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 8005b2e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d003      	beq.n	8005b3e <VL53L0X_get_pal_range_status+0x36a>
 8005b36:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d103      	bne.n	8005b46 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8005b44:	e002      	b.n	8005b4c <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 8005b46:	2300      	movs	r3, #0
 8005b48:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8005b52:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8005b56:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d003      	beq.n	8005b66 <VL53L0X_get_pal_range_status+0x392>
 8005b5e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d103      	bne.n	8005b6e <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 8005b66:	2301      	movs	r3, #1
 8005b68:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8005b6c:	e002      	b.n	8005b74 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8005b7a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005b7e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f

}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3740      	adds	r7, #64	@ 0x40
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b088      	sub	sp, #32
 8005b8e:	af02      	add	r7, sp, #8
 8005b90:	60f8      	str	r0, [r7, #12]
 8005b92:	60b9      	str	r1, [r7, #8]
 8005b94:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	330a      	adds	r3, #10
 8005b9a:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f8d3 015c 	ldr.w	r0, [r3, #348]	@ 0x15c
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 8005ba8:	4619      	mov	r1, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	9300      	str	r3, [sp, #0]
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	68ba      	ldr	r2, [r7, #8]
 8005bb6:	f002 fdfb 	bl	80087b0 <HAL_I2C_Master_Transmit>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8005bbe:	693b      	ldr	r3, [r7, #16]
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3718      	adds	r7, #24
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b088      	sub	sp, #32
 8005bcc:	af02      	add	r7, sp, #8
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	330a      	adds	r3, #10
 8005bd8:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f8d3 015c 	ldr.w	r0, [r3, #348]	@ 0x15c
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 8005be6:	f043 0301 	orr.w	r3, r3, #1
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	4619      	mov	r1, r3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	9300      	str	r3, [sp, #0]
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	68ba      	ldr	r2, [r7, #8]
 8005bfa:	f002 fed7 	bl	80089ac <HAL_I2C_Master_Receive>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8005c02:	693b      	ldr	r3, [r7, #16]
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3718      	adds	r7, #24
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	607a      	str	r2, [r7, #4]
 8005c16:	603b      	str	r3, [r7, #0]
 8005c18:	460b      	mov	r3, r1
 8005c1a:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	2b3f      	cmp	r3, #63	@ 0x3f
 8005c24:	d902      	bls.n	8005c2c <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 8005c26:	f06f 0303 	mvn.w	r3, #3
 8005c2a:	e016      	b.n	8005c5a <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 8005c2c:	4a0d      	ldr	r2, [pc, #52]	@ (8005c64 <VL53L0X_WriteMulti+0x58>)
 8005c2e:	7afb      	ldrb	r3, [r7, #11]
 8005c30:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 8005c32:	683a      	ldr	r2, [r7, #0]
 8005c34:	6879      	ldr	r1, [r7, #4]
 8005c36:	480c      	ldr	r0, [pc, #48]	@ (8005c68 <VL53L0X_WriteMulti+0x5c>)
 8005c38:	f00b fe24 	bl	8011884 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	3301      	adds	r3, #1
 8005c40:	461a      	mov	r2, r3
 8005c42:	4908      	ldr	r1, [pc, #32]	@ (8005c64 <VL53L0X_WriteMulti+0x58>)
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	f7ff ffa0 	bl	8005b8a <_I2CWrite>
 8005c4a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d001      	beq.n	8005c56 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005c52:	23ec      	movs	r3, #236	@ 0xec
 8005c54:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8005c56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3718      	adds	r7, #24
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	20000434 	.word	0x20000434
 8005c68:	20000435 	.word	0x20000435

08005c6c <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b086      	sub	sp, #24
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	607a      	str	r2, [r7, #4]
 8005c76:	603b      	str	r3, [r7, #0]
 8005c78:	460b      	mov	r3, r1
 8005c7a:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8005c80:	f107 030b 	add.w	r3, r7, #11
 8005c84:	2201      	movs	r2, #1
 8005c86:	4619      	mov	r1, r3
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f7ff ff7e 	bl	8005b8a <_I2CWrite>
 8005c8e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d002      	beq.n	8005c9c <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005c96:	23ec      	movs	r3, #236	@ 0xec
 8005c98:	75fb      	strb	r3, [r7, #23]
        goto done;
 8005c9a:	e00c      	b.n	8005cb6 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8005c9c:	683a      	ldr	r2, [r7, #0]
 8005c9e:	6879      	ldr	r1, [r7, #4]
 8005ca0:	68f8      	ldr	r0, [r7, #12]
 8005ca2:	f7ff ff91 	bl	8005bc8 <_I2CRead>
 8005ca6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d002      	beq.n	8005cb4 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005cae:	23ec      	movs	r3, #236	@ 0xec
 8005cb0:	75fb      	strb	r3, [r7, #23]
 8005cb2:	e000      	b.n	8005cb6 <VL53L0X_ReadMulti+0x4a>
    }
done:
 8005cb4:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8005cb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3718      	adds	r7, #24
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
	...

08005cc4 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	460b      	mov	r3, r1
 8005cce:	70fb      	strb	r3, [r7, #3]
 8005cd0:	4613      	mov	r3, r2
 8005cd2:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8005cd8:	4a0b      	ldr	r2, [pc, #44]	@ (8005d08 <VL53L0X_WrByte+0x44>)
 8005cda:	78fb      	ldrb	r3, [r7, #3]
 8005cdc:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 8005cde:	4a0a      	ldr	r2, [pc, #40]	@ (8005d08 <VL53L0X_WrByte+0x44>)
 8005ce0:	78bb      	ldrb	r3, [r7, #2]
 8005ce2:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8005ce4:	2202      	movs	r2, #2
 8005ce6:	4908      	ldr	r1, [pc, #32]	@ (8005d08 <VL53L0X_WrByte+0x44>)
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f7ff ff4e 	bl	8005b8a <_I2CWrite>
 8005cee:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d001      	beq.n	8005cfa <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005cf6:	23ec      	movs	r3, #236	@ 0xec
 8005cf8:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8005cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3710      	adds	r7, #16
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	20000434 	.word	0x20000434

08005d0c <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	460b      	mov	r3, r1
 8005d16:	70fb      	strb	r3, [r7, #3]
 8005d18:	4613      	mov	r3, r2
 8005d1a:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8005d20:	4a0e      	ldr	r2, [pc, #56]	@ (8005d5c <VL53L0X_WrWord+0x50>)
 8005d22:	78fb      	ldrb	r3, [r7, #3]
 8005d24:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8005d26:	883b      	ldrh	r3, [r7, #0]
 8005d28:	0a1b      	lsrs	r3, r3, #8
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	b2da      	uxtb	r2, r3
 8005d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8005d5c <VL53L0X_WrWord+0x50>)
 8005d30:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8005d32:	883b      	ldrh	r3, [r7, #0]
 8005d34:	b2da      	uxtb	r2, r3
 8005d36:	4b09      	ldr	r3, [pc, #36]	@ (8005d5c <VL53L0X_WrWord+0x50>)
 8005d38:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8005d3a:	2203      	movs	r2, #3
 8005d3c:	4907      	ldr	r1, [pc, #28]	@ (8005d5c <VL53L0X_WrWord+0x50>)
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f7ff ff23 	bl	8005b8a <_I2CWrite>
 8005d44:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d001      	beq.n	8005d50 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005d4c:	23ec      	movs	r3, #236	@ 0xec
 8005d4e:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8005d50:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3710      	adds	r7, #16
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}
 8005d5c:	20000434 	.word	0x20000434

08005d60 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	4608      	mov	r0, r1
 8005d6a:	4611      	mov	r1, r2
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	4603      	mov	r3, r0
 8005d70:	70fb      	strb	r3, [r7, #3]
 8005d72:	460b      	mov	r3, r1
 8005d74:	70bb      	strb	r3, [r7, #2]
 8005d76:	4613      	mov	r3, r2
 8005d78:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8005d7e:	f107 020e 	add.w	r2, r7, #14
 8005d82:	78fb      	ldrb	r3, [r7, #3]
 8005d84:	4619      	mov	r1, r3
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 f81e 	bl	8005dc8 <VL53L0X_RdByte>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 8005d90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d110      	bne.n	8005dba <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 8005d98:	7bba      	ldrb	r2, [r7, #14]
 8005d9a:	78bb      	ldrb	r3, [r7, #2]
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	b2da      	uxtb	r2, r3
 8005da0:	787b      	ldrb	r3, [r7, #1]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 8005da8:	7bba      	ldrb	r2, [r7, #14]
 8005daa:	78fb      	ldrb	r3, [r7, #3]
 8005dac:	4619      	mov	r1, r3
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f7ff ff88 	bl	8005cc4 <VL53L0X_WrByte>
 8005db4:	4603      	mov	r3, r0
 8005db6:	73fb      	strb	r3, [r7, #15]
 8005db8:	e000      	b.n	8005dbc <VL53L0X_UpdateByte+0x5c>
        goto done;
 8005dba:	bf00      	nop
done:
    return Status;
 8005dbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3710      	adds	r7, #16
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b086      	sub	sp, #24
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	607a      	str	r2, [r7, #4]
 8005dd4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8005dda:	f107 030b 	add.w	r3, r7, #11
 8005dde:	2201      	movs	r2, #1
 8005de0:	4619      	mov	r1, r3
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f7ff fed1 	bl	8005b8a <_I2CWrite>
 8005de8:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d002      	beq.n	8005df6 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005df0:	23ec      	movs	r3, #236	@ 0xec
 8005df2:	75fb      	strb	r3, [r7, #23]
        goto done;
 8005df4:	e00c      	b.n	8005e10 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 8005df6:	2201      	movs	r2, #1
 8005df8:	6879      	ldr	r1, [r7, #4]
 8005dfa:	68f8      	ldr	r0, [r7, #12]
 8005dfc:	f7ff fee4 	bl	8005bc8 <_I2CRead>
 8005e00:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d002      	beq.n	8005e0e <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005e08:	23ec      	movs	r3, #236	@ 0xec
 8005e0a:	75fb      	strb	r3, [r7, #23]
 8005e0c:	e000      	b.n	8005e10 <VL53L0X_RdByte+0x48>
    }
done:
 8005e0e:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8005e10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3718      	adds	r7, #24
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b086      	sub	sp, #24
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	460b      	mov	r3, r1
 8005e26:	607a      	str	r2, [r7, #4]
 8005e28:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8005e2e:	f107 030b 	add.w	r3, r7, #11
 8005e32:	2201      	movs	r2, #1
 8005e34:	4619      	mov	r1, r3
 8005e36:	68f8      	ldr	r0, [r7, #12]
 8005e38:	f7ff fea7 	bl	8005b8a <_I2CWrite>
 8005e3c:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d002      	beq.n	8005e4a <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005e44:	23ec      	movs	r3, #236	@ 0xec
 8005e46:	75fb      	strb	r3, [r7, #23]
        goto done;
 8005e48:	e015      	b.n	8005e76 <VL53L0X_RdWord+0x5a>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8005e4a:	2202      	movs	r2, #2
 8005e4c:	490d      	ldr	r1, [pc, #52]	@ (8005e84 <VL53L0X_RdWord+0x68>)
 8005e4e:	68f8      	ldr	r0, [r7, #12]
 8005e50:	f7ff feba 	bl	8005bc8 <_I2CRead>
 8005e54:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d002      	beq.n	8005e62 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005e5c:	23ec      	movs	r3, #236	@ 0xec
 8005e5e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8005e60:	e009      	b.n	8005e76 <VL53L0X_RdWord+0x5a>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8005e62:	4b08      	ldr	r3, [pc, #32]	@ (8005e84 <VL53L0X_RdWord+0x68>)
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	021b      	lsls	r3, r3, #8
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	4a06      	ldr	r2, [pc, #24]	@ (8005e84 <VL53L0X_RdWord+0x68>)
 8005e6c:	7852      	ldrb	r2, [r2, #1]
 8005e6e:	4413      	add	r3, r2
 8005e70:	b29a      	uxth	r2, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 8005e76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3718      	adds	r7, #24
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	20000434 	.word	0x20000434

08005e88 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b086      	sub	sp, #24
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	460b      	mov	r3, r1
 8005e92:	607a      	str	r2, [r7, #4]
 8005e94:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005e96:	2300      	movs	r3, #0
 8005e98:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8005e9a:	f107 030b 	add.w	r3, r7, #11
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	68f8      	ldr	r0, [r7, #12]
 8005ea4:	f7ff fe71 	bl	8005b8a <_I2CWrite>
 8005ea8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d002      	beq.n	8005eb6 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005eb0:	23ec      	movs	r3, #236	@ 0xec
 8005eb2:	75fb      	strb	r3, [r7, #23]
        goto done;
 8005eb4:	e01b      	b.n	8005eee <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8005eb6:	2204      	movs	r2, #4
 8005eb8:	4910      	ldr	r1, [pc, #64]	@ (8005efc <VL53L0X_RdDWord+0x74>)
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	f7ff fe84 	bl	8005bc8 <_I2CRead>
 8005ec0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d002      	beq.n	8005ece <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005ec8:	23ec      	movs	r3, #236	@ 0xec
 8005eca:	75fb      	strb	r3, [r7, #23]
        goto done;
 8005ecc:	e00f      	b.n	8005eee <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8005ece:	4b0b      	ldr	r3, [pc, #44]	@ (8005efc <VL53L0X_RdDWord+0x74>)
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	061a      	lsls	r2, r3, #24
 8005ed4:	4b09      	ldr	r3, [pc, #36]	@ (8005efc <VL53L0X_RdDWord+0x74>)
 8005ed6:	785b      	ldrb	r3, [r3, #1]
 8005ed8:	041b      	lsls	r3, r3, #16
 8005eda:	441a      	add	r2, r3
 8005edc:	4b07      	ldr	r3, [pc, #28]	@ (8005efc <VL53L0X_RdDWord+0x74>)
 8005ede:	789b      	ldrb	r3, [r3, #2]
 8005ee0:	021b      	lsls	r3, r3, #8
 8005ee2:	4413      	add	r3, r2
 8005ee4:	4a05      	ldr	r2, [pc, #20]	@ (8005efc <VL53L0X_RdDWord+0x74>)
 8005ee6:	78d2      	ldrb	r2, [r2, #3]
 8005ee8:	441a      	add	r2, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 8005eee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3718      	adds	r7, #24
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	20000434 	.word	0x20000434

08005f00 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 8005f0c:	2002      	movs	r0, #2
 8005f0e:	f001 fc35 	bl	800777c <HAL_Delay>
    return status;
 8005f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3710      	adds	r7, #16
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
	...

08005f20 <STAT_AddRecord>:
} STAT_t;

STAT_t statistic = {0};

void STAT_AddRecord(uint16_t bytes_count)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	4603      	mov	r3, r0
 8005f28:	80fb      	strh	r3, [r7, #6]
	if (statistic.write_index >= STAT_RECORDS_COUNT)
 8005f2a:	4b18      	ldr	r3, [pc, #96]	@ (8005f8c <STAT_AddRecord+0x6c>)
 8005f2c:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8005f30:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f32:	d90c      	bls.n	8005f4e <STAT_AddRecord+0x2e>
	{
		statistic.write_index = 0;
 8005f34:	4b15      	ldr	r3, [pc, #84]	@ (8005f8c <STAT_AddRecord+0x6c>)
 8005f36:	2200      	movs	r2, #0
 8005f38:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
		statistic.records[statistic.write_index].received_bytes = bytes_count;
 8005f3c:	4b13      	ldr	r3, [pc, #76]	@ (8005f8c <STAT_AddRecord+0x6c>)
 8005f3e:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8005f42:	4619      	mov	r1, r3
 8005f44:	4a11      	ldr	r2, [pc, #68]	@ (8005f8c <STAT_AddRecord+0x6c>)
 8005f46:	88fb      	ldrh	r3, [r7, #6]
 8005f48:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 8005f4c:	e00f      	b.n	8005f6e <STAT_AddRecord+0x4e>

	}
	else
	{
		statistic.records[statistic.write_index].received_bytes = bytes_count;
 8005f4e:	4b0f      	ldr	r3, [pc, #60]	@ (8005f8c <STAT_AddRecord+0x6c>)
 8005f50:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8005f54:	4619      	mov	r1, r3
 8005f56:	4a0d      	ldr	r2, [pc, #52]	@ (8005f8c <STAT_AddRecord+0x6c>)
 8005f58:	88fb      	ldrh	r3, [r7, #6]
 8005f5a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
		statistic.write_index++;
 8005f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8005f8c <STAT_AddRecord+0x6c>)
 8005f60:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8005f64:	3301      	adds	r3, #1
 8005f66:	b29a      	uxth	r2, r3
 8005f68:	4b08      	ldr	r3, [pc, #32]	@ (8005f8c <STAT_AddRecord+0x6c>)
 8005f6a:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
	}
	statistic.records_count++;
 8005f6e:	4b07      	ldr	r3, [pc, #28]	@ (8005f8c <STAT_AddRecord+0x6c>)
 8005f70:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8005f74:	3301      	adds	r3, #1
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	4b04      	ldr	r3, [pc, #16]	@ (8005f8c <STAT_AddRecord+0x6c>)
 8005f7a:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
}
 8005f7e:	bf00      	nop
 8005f80:	370c      	adds	r7, #12
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	20000dc4 	.word	0x20000dc4

08005f90 <GetDataFromNMEA>:
} I2C_devices_list_t;

NMEA_t nmea = {0};

void GetDataFromNMEA(NMEA_sentence_t* sentence)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b0a8      	sub	sp, #160	@ 0xa0
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
	if (!sentence)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	f000 80c2 	beq.w	8006124 <GetDataFromNMEA+0x194>
		return;

	const char delimiter = ',';
 8005fa0:	232c      	movs	r3, #44	@ 0x2c
 8005fa2:	f887 309a 	strb.w	r3, [r7, #154]	@ 0x9a
	char copy_string[128];
	char* token = NULL;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	char* start_pos = NULL;
 8005fac:	2300      	movs	r3, #0
 8005fae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	char* end_pos = NULL;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	uint8_t frame = 0;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
	uint8_t string_index = 0;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f

	strcpy(copy_string, sentence->packet);
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	f107 0308 	add.w	r3, r7, #8
 8005fca:	4611      	mov	r1, r2
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f00b fc51 	bl	8011874 <strcpy>
	char* tmp_ptr = copy_string;
 8005fd2:	f107 0308 	add.w	r3, r7, #8
 8005fd6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	start_pos = strchr(tmp_ptr, delimiter);
 8005fda:	f897 309a 	ldrb.w	r3, [r7, #154]	@ 0x9a
 8005fde:	4619      	mov	r1, r3
 8005fe0:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8005fe4:	f00b fbf6 	bl	80117d4 <strchr>
 8005fe8:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
	start_pos++;
 8005fec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	if (*start_pos == '\0')
 8005ff6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f000 8093 	beq.w	8006128 <GetDataFromNMEA+0x198>
	{
		return;
	}

	while ((*start_pos != '\0') && (end_pos = strchr(start_pos, delimiter)))
 8006002:	e07b      	b.n	80060fc <GetDataFromNMEA+0x16c>
	{
		frame++;
 8006004:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8006008:	3301      	adds	r3, #1
 800600a:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
		if (frame == 1)
 800600e:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8006012:	2b01      	cmp	r3, #1
 8006014:	d10b      	bne.n	800602e <GetDataFromNMEA+0x9e>
		{
			memcpy(utc, start_pos, (end_pos - start_pos));
 8006016:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800601a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	461a      	mov	r2, r3
 8006022:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8006026:	4842      	ldr	r0, [pc, #264]	@ (8006130 <GetDataFromNMEA+0x1a0>)
 8006028:	f00b fc2c 	bl	8011884 <memcpy>
 800602c:	e061      	b.n	80060f2 <GetDataFromNMEA+0x162>
		}
		else if (frame == 2)
 800602e:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8006032:	2b02      	cmp	r3, #2
 8006034:	d10c      	bne.n	8006050 <GetDataFromNMEA+0xc0>
		{
			if (end_pos - start_pos == 1)
 8006036:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800603a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	2b01      	cmp	r3, #1
 8006042:	d156      	bne.n	80060f2 <GetDataFromNMEA+0x162>
				status_A_V = *start_pos;
 8006044:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006048:	781a      	ldrb	r2, [r3, #0]
 800604a:	4b3a      	ldr	r3, [pc, #232]	@ (8006134 <GetDataFromNMEA+0x1a4>)
 800604c:	701a      	strb	r2, [r3, #0]
 800604e:	e050      	b.n	80060f2 <GetDataFromNMEA+0x162>
		}
		else if (frame == 3)
 8006050:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8006054:	2b03      	cmp	r3, #3
 8006056:	d10b      	bne.n	8006070 <GetDataFromNMEA+0xe0>
		{
			memcpy(lat, start_pos, (end_pos - start_pos));
 8006058:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800605c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	461a      	mov	r2, r3
 8006064:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8006068:	4833      	ldr	r0, [pc, #204]	@ (8006138 <GetDataFromNMEA+0x1a8>)
 800606a:	f00b fc0b 	bl	8011884 <memcpy>
 800606e:	e040      	b.n	80060f2 <GetDataFromNMEA+0x162>
		}
		else if (frame == 4)
 8006070:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8006074:	2b04      	cmp	r3, #4
 8006076:	d10c      	bne.n	8006092 <GetDataFromNMEA+0x102>
		{
			if (end_pos - start_pos == 1)
 8006078:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800607c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	2b01      	cmp	r3, #1
 8006084:	d135      	bne.n	80060f2 <GetDataFromNMEA+0x162>
				lat_stat = *start_pos;
 8006086:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800608a:	781a      	ldrb	r2, [r3, #0]
 800608c:	4b2b      	ldr	r3, [pc, #172]	@ (800613c <GetDataFromNMEA+0x1ac>)
 800608e:	701a      	strb	r2, [r3, #0]
 8006090:	e02f      	b.n	80060f2 <GetDataFromNMEA+0x162>
		}
		else if (frame == 5)
 8006092:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8006096:	2b05      	cmp	r3, #5
 8006098:	d10b      	bne.n	80060b2 <GetDataFromNMEA+0x122>
		{
			memcpy(lon, start_pos, (end_pos - start_pos));
 800609a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800609e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	461a      	mov	r2, r3
 80060a6:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80060aa:	4825      	ldr	r0, [pc, #148]	@ (8006140 <GetDataFromNMEA+0x1b0>)
 80060ac:	f00b fbea 	bl	8011884 <memcpy>
 80060b0:	e01f      	b.n	80060f2 <GetDataFromNMEA+0x162>
		}
		else if (frame == 6)
 80060b2:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 80060b6:	2b06      	cmp	r3, #6
 80060b8:	d10c      	bne.n	80060d4 <GetDataFromNMEA+0x144>
		{
			if (end_pos - start_pos == 1)
 80060ba:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80060be:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d114      	bne.n	80060f2 <GetDataFromNMEA+0x162>
				lon_stat = *start_pos;
 80060c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80060cc:	781a      	ldrb	r2, [r3, #0]
 80060ce:	4b1d      	ldr	r3, [pc, #116]	@ (8006144 <GetDataFromNMEA+0x1b4>)
 80060d0:	701a      	strb	r2, [r3, #0]
 80060d2:	e00e      	b.n	80060f2 <GetDataFromNMEA+0x162>
		}
		else if (frame == 9)
 80060d4:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 80060d8:	2b09      	cmp	r3, #9
 80060da:	d10a      	bne.n	80060f2 <GetDataFromNMEA+0x162>
		{
			memcpy(year, start_pos, (end_pos - start_pos));
 80060dc:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80060e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	461a      	mov	r2, r3
 80060e8:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80060ec:	4816      	ldr	r0, [pc, #88]	@ (8006148 <GetDataFromNMEA+0x1b8>)
 80060ee:	f00b fbc9 	bl	8011884 <memcpy>
		}

		start_pos = end_pos + 1;
 80060f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80060f6:	3301      	adds	r3, #1
 80060f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	while ((*start_pos != '\0') && (end_pos = strchr(start_pos, delimiter)))
 80060fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d011      	beq.n	800612a <GetDataFromNMEA+0x19a>
 8006106:	f897 309a 	ldrb.w	r3, [r7, #154]	@ 0x9a
 800610a:	4619      	mov	r1, r3
 800610c:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8006110:	f00b fb60 	bl	80117d4 <strchr>
 8006114:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
 8006118:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800611c:	2b00      	cmp	r3, #0
 800611e:	f47f af71 	bne.w	8006004 <GetDataFromNMEA+0x74>
 8006122:	e002      	b.n	800612a <GetDataFromNMEA+0x19a>
		return;
 8006124:	bf00      	nop
 8006126:	e000      	b.n	800612a <GetDataFromNMEA+0x19a>
		return;
 8006128:	bf00      	nop

	}
}
 800612a:	37a0      	adds	r7, #160	@ 0xa0
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	2000087c 	.word	0x2000087c
 8006134:	200002c1 	.word	0x200002c1
 8006138:	200008ac 	.word	0x200008ac
 800613c:	200002c3 	.word	0x200002c3
 8006140:	2000089c 	.word	0x2000089c
 8006144:	200002c2 	.word	0x200002c2
 8006148:	2000088c 	.word	0x2000088c

0800614c <CheckSentenceCrc>:


static void CheckSentenceCrc(NMEA_sentence_t* sentence)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
	if (!sentence)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d035      	beq.n	80061c6 <CheckSentenceCrc+0x7a>
		return;

	uint8_t crc = 0;
 800615a:	2300      	movs	r3, #0
 800615c:	73fb      	strb	r3, [r7, #15]
	uint8_t index = 1;
 800615e:	2301      	movs	r3, #1
 8006160:	73bb      	strb	r3, [r7, #14]
	uint8_t packet_crc = 0;
 8006162:	2300      	movs	r3, #0
 8006164:	737b      	strb	r3, [r7, #13]

	char* end_ptr = NULL;
 8006166:	2300      	movs	r3, #0
 8006168:	60bb      	str	r3, [r7, #8]

	while(sentence->packet[index] != NMEA_SENTENCE_CRC_START)
 800616a:	e008      	b.n	800617e <CheckSentenceCrc+0x32>
	{
		crc ^= sentence->packet[index];
 800616c:	7bbb      	ldrb	r3, [r7, #14]
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	5cd2      	ldrb	r2, [r2, r3]
 8006172:	7bfb      	ldrb	r3, [r7, #15]
 8006174:	4053      	eors	r3, r2
 8006176:	73fb      	strb	r3, [r7, #15]
		index++;
 8006178:	7bbb      	ldrb	r3, [r7, #14]
 800617a:	3301      	adds	r3, #1
 800617c:	73bb      	strb	r3, [r7, #14]
	while(sentence->packet[index] != NMEA_SENTENCE_CRC_START)
 800617e:	7bbb      	ldrb	r3, [r7, #14]
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	5cd3      	ldrb	r3, [r2, r3]
 8006184:	2b2a      	cmp	r3, #42	@ 0x2a
 8006186:	d1f1      	bne.n	800616c <CheckSentenceCrc+0x20>
	}

	packet_crc = strtol(&sentence->packet[index + 1], &end_ptr, 16);
 8006188:	7bbb      	ldrb	r3, [r7, #14]
 800618a:	3301      	adds	r3, #1
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	4413      	add	r3, r2
 8006190:	f107 0108 	add.w	r1, r7, #8
 8006194:	2210      	movs	r2, #16
 8006196:	4618      	mov	r0, r3
 8006198:	f00b fad6 	bl	8011748 <strtol>
 800619c:	4603      	mov	r3, r0
 800619e:	737b      	strb	r3, [r7, #13]

	sentence->packet_crc = packet_crc;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	7b7a      	ldrb	r2, [r7, #13]
 80061a4:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
	sentence->calculated_crc = crc;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	7bfa      	ldrb	r2, [r7, #15]
 80061ac:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
	sentence->is_crc_valid = packet_crc == crc;
 80061b0:	7b7a      	ldrb	r2, [r7, #13]
 80061b2:	7bfb      	ldrb	r3, [r7, #15]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	bf0c      	ite	eq
 80061b8:	2301      	moveq	r3, #1
 80061ba:	2300      	movne	r3, #0
 80061bc:	b2da      	uxtb	r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80061c4:	e000      	b.n	80061c8 <CheckSentenceCrc+0x7c>
		return;
 80061c6:	bf00      	nop
}
 80061c8:	3710      	adds	r7, #16
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
	...

080061d0 <NMEA_AddtoQueue>:


void NMEA_AddtoQueue(uint8_t* start_pos, uint8_t* end_pos)
{
 80061d0:	b5b0      	push	{r4, r5, r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
	uint16_t size = end_pos - start_pos;
 80061da:	683a      	ldr	r2, [r7, #0]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	81fb      	strh	r3, [r7, #14]

	if (size > NMEA_MAX_SENTENCE_SIZE)
 80061e2:	89fb      	ldrh	r3, [r7, #14]
 80061e4:	2b52      	cmp	r3, #82	@ 0x52
 80061e6:	d86a      	bhi.n	80062be <NMEA_AddtoQueue+0xee>
		return;

	if (nmea.que.write_index >= NMEA_SENTENCE_COUNT)
 80061e8:	4b37      	ldr	r3, [pc, #220]	@ (80062c8 <NMEA_AddtoQueue+0xf8>)
 80061ea:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80061ee:	f893 3a88 	ldrb.w	r3, [r3, #2696]	@ 0xa88
 80061f2:	b25b      	sxtb	r3, r3
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	da05      	bge.n	8006204 <NMEA_AddtoQueue+0x34>
	{
		nmea.que.write_index = 0;
 80061f8:	4b33      	ldr	r3, [pc, #204]	@ (80062c8 <NMEA_AddtoQueue+0xf8>)
 80061fa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80061fe:	2200      	movs	r2, #0
 8006200:	f883 2a88 	strb.w	r2, [r3, #2696]	@ 0xa88
	}
	memcpy(nmea.que.sentences[nmea.que.write_index].packet, start_pos, size);
 8006204:	4b30      	ldr	r3, [pc, #192]	@ (80062c8 <NMEA_AddtoQueue+0xf8>)
 8006206:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800620a:	f893 3a88 	ldrb.w	r3, [r3, #2696]	@ 0xa88
 800620e:	461a      	mov	r2, r3
 8006210:	4613      	mov	r3, r2
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	4413      	add	r3, r2
 8006216:	011a      	lsls	r2, r3, #4
 8006218:	4413      	add	r3, r2
 800621a:	4a2b      	ldr	r2, [pc, #172]	@ (80062c8 <NMEA_AddtoQueue+0xf8>)
 800621c:	4413      	add	r3, r2
 800621e:	89fa      	ldrh	r2, [r7, #14]
 8006220:	6879      	ldr	r1, [r7, #4]
 8006222:	4618      	mov	r0, r3
 8006224:	f00b fb2e 	bl	8011884 <memcpy>
	nmea.que.sentences[nmea.que.write_index].packet[size] = '\0';
 8006228:	4b27      	ldr	r3, [pc, #156]	@ (80062c8 <NMEA_AddtoQueue+0xf8>)
 800622a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800622e:	f893 3a88 	ldrb.w	r3, [r3, #2696]	@ 0xa88
 8006232:	4619      	mov	r1, r3
 8006234:	89fa      	ldrh	r2, [r7, #14]
 8006236:	4824      	ldr	r0, [pc, #144]	@ (80062c8 <NMEA_AddtoQueue+0xf8>)
 8006238:	460b      	mov	r3, r1
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	440b      	add	r3, r1
 800623e:	0119      	lsls	r1, r3, #4
 8006240:	440b      	add	r3, r1
 8006242:	4403      	add	r3, r0
 8006244:	4413      	add	r3, r2
 8006246:	2200      	movs	r2, #0
 8006248:	701a      	strb	r2, [r3, #0]
	CheckSentenceCrc(&nmea.que.sentences[nmea.que.write_index]);
 800624a:	4b1f      	ldr	r3, [pc, #124]	@ (80062c8 <NMEA_AddtoQueue+0xf8>)
 800624c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006250:	f893 3a88 	ldrb.w	r3, [r3, #2696]	@ 0xa88
 8006254:	461a      	mov	r2, r3
 8006256:	4613      	mov	r3, r2
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	4413      	add	r3, r2
 800625c:	011a      	lsls	r2, r3, #4
 800625e:	4413      	add	r3, r2
 8006260:	4a19      	ldr	r2, [pc, #100]	@ (80062c8 <NMEA_AddtoQueue+0xf8>)
 8006262:	4413      	add	r3, r2
 8006264:	4618      	mov	r0, r3
 8006266:	f7ff ff71 	bl	800614c <CheckSentenceCrc>
	GetDataFromNMEA(&nmea.que.sentences[nmea.que.write_index]);
 800626a:	4b17      	ldr	r3, [pc, #92]	@ (80062c8 <NMEA_AddtoQueue+0xf8>)
 800626c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006270:	f893 3a88 	ldrb.w	r3, [r3, #2696]	@ 0xa88
 8006274:	461a      	mov	r2, r3
 8006276:	4613      	mov	r3, r2
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	4413      	add	r3, r2
 800627c:	011a      	lsls	r2, r3, #4
 800627e:	4413      	add	r3, r2
 8006280:	4a11      	ldr	r2, [pc, #68]	@ (80062c8 <NMEA_AddtoQueue+0xf8>)
 8006282:	4413      	add	r3, r2
 8006284:	4618      	mov	r0, r3
 8006286:	f7ff fe83 	bl	8005f90 <GetDataFromNMEA>
	nmea.que.write_index++;
 800628a:	4b0f      	ldr	r3, [pc, #60]	@ (80062c8 <NMEA_AddtoQueue+0xf8>)
 800628c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006290:	f893 3a88 	ldrb.w	r3, [r3, #2696]	@ 0xa88
 8006294:	3301      	adds	r3, #1
 8006296:	b2da      	uxtb	r2, r3
 8006298:	4b0b      	ldr	r3, [pc, #44]	@ (80062c8 <NMEA_AddtoQueue+0xf8>)
 800629a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800629e:	f883 2a88 	strb.w	r2, [r3, #2696]	@ 0xa88
	nmea.que.sentence_count++;
 80062a2:	4b09      	ldr	r3, [pc, #36]	@ (80062c8 <NMEA_AddtoQueue+0xf8>)
 80062a4:	f503 532a 	add.w	r3, r3, #10880	@ 0x2a80
 80062a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ac:	1c54      	adds	r4, r2, #1
 80062ae:	f143 0500 	adc.w	r5, r3, #0
 80062b2:	4b05      	ldr	r3, [pc, #20]	@ (80062c8 <NMEA_AddtoQueue+0xf8>)
 80062b4:	f503 532a 	add.w	r3, r3, #10880	@ 0x2a80
 80062b8:	e9c3 4500 	strd	r4, r5, [r3]
 80062bc:	e000      	b.n	80062c0 <NMEA_AddtoQueue+0xf0>
		return;
 80062be:	bf00      	nop
}
 80062c0:	3710      	adds	r7, #16
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bdb0      	pop	{r4, r5, r7, pc}
 80062c6:	bf00      	nop
 80062c8:	20000ed0 	.word	0x20000ed0

080062cc <NMEA_ReadFromQueue>:


NMEA_sentence_t* NMEA_ReadFromQueue(void)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
	NMEA_sentence_t* sentence_ptr = NULL;
 80062d2:	2300      	movs	r3, #0
 80062d4:	607b      	str	r3, [r7, #4]

	if (nmea.que.sentence_count > 0)
 80062d6:	4b21      	ldr	r3, [pc, #132]	@ (800635c <NMEA_ReadFromQueue+0x90>)
 80062d8:	f503 532a 	add.w	r3, r3, #10880	@ 0x2a80
 80062dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	d033      	beq.n	800634c <NMEA_ReadFromQueue+0x80>
	{
		nmea.que.sentence_count--;
 80062e4:	4b1d      	ldr	r3, [pc, #116]	@ (800635c <NMEA_ReadFromQueue+0x90>)
 80062e6:	f503 532a 	add.w	r3, r3, #10880	@ 0x2a80
 80062ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ee:	1e50      	subs	r0, r2, #1
 80062f0:	f143 31ff 	adc.w	r1, r3, #4294967295
 80062f4:	4b19      	ldr	r3, [pc, #100]	@ (800635c <NMEA_ReadFromQueue+0x90>)
 80062f6:	f503 532a 	add.w	r3, r3, #10880	@ 0x2a80
 80062fa:	e9c3 0100 	strd	r0, r1, [r3]

		sentence_ptr = &nmea.que.sentences[nmea.que.read_index];
 80062fe:	4b17      	ldr	r3, [pc, #92]	@ (800635c <NMEA_ReadFromQueue+0x90>)
 8006300:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006304:	f893 3a89 	ldrb.w	r3, [r3, #2697]	@ 0xa89
 8006308:	461a      	mov	r2, r3
 800630a:	4613      	mov	r3, r2
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	4413      	add	r3, r2
 8006310:	011a      	lsls	r2, r3, #4
 8006312:	4413      	add	r3, r2
 8006314:	4a11      	ldr	r2, [pc, #68]	@ (800635c <NMEA_ReadFromQueue+0x90>)
 8006316:	4413      	add	r3, r2
 8006318:	607b      	str	r3, [r7, #4]

		nmea.que.read_index++;
 800631a:	4b10      	ldr	r3, [pc, #64]	@ (800635c <NMEA_ReadFromQueue+0x90>)
 800631c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006320:	f893 3a89 	ldrb.w	r3, [r3, #2697]	@ 0xa89
 8006324:	3301      	adds	r3, #1
 8006326:	b2da      	uxtb	r2, r3
 8006328:	4b0c      	ldr	r3, [pc, #48]	@ (800635c <NMEA_ReadFromQueue+0x90>)
 800632a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800632e:	f883 2a89 	strb.w	r2, [r3, #2697]	@ 0xa89

		if (nmea.que.read_index == NMEA_SENTENCE_COUNT)
 8006332:	4b0a      	ldr	r3, [pc, #40]	@ (800635c <NMEA_ReadFromQueue+0x90>)
 8006334:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006338:	f893 3a89 	ldrb.w	r3, [r3, #2697]	@ 0xa89
 800633c:	2b80      	cmp	r3, #128	@ 0x80
 800633e:	d105      	bne.n	800634c <NMEA_ReadFromQueue+0x80>
		{
			nmea.que.read_index = 0;
 8006340:	4b06      	ldr	r3, [pc, #24]	@ (800635c <NMEA_ReadFromQueue+0x90>)
 8006342:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006346:	2200      	movs	r2, #0
 8006348:	f883 2a89 	strb.w	r2, [r3, #2697]	@ 0xa89
		}
	}

	return sentence_ptr;
 800634c:	687b      	ldr	r3, [r7, #4]
}
 800634e:	4618      	mov	r0, r3
 8006350:	370c      	adds	r7, #12
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr
 800635a:	bf00      	nop
 800635c:	20000ed0 	.word	0x20000ed0

08006360 <ParseGpsData>:


void ParseGpsData(uint8_t* data_ptr, uint32_t length)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
	char* start_pos = NULL;
 800636a:	2300      	movs	r3, #0
 800636c:	613b      	str	r3, [r7, #16]
	char* end_pos = NULL;
 800636e:	2300      	movs	r3, #0
 8006370:	60fb      	str	r3, [r7, #12]
	char* is_rmc_string = NULL;
 8006372:	2300      	movs	r3, #0
 8006374:	60bb      	str	r3, [r7, #8]


	if (data_ptr == NULL)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d023      	beq.n	80063c4 <ParseGpsData+0x64>
	{
		return;
	}

	memcpy(str_data, data_ptr, length);
 800637c:	683a      	ldr	r2, [r7, #0]
 800637e:	6879      	ldr	r1, [r7, #4]
 8006380:	4813      	ldr	r0, [pc, #76]	@ (80063d0 <ParseGpsData+0x70>)
 8006382:	f00b fa7f 	bl	8011884 <memcpy>
	str_data[length] = '\0';
 8006386:	4a12      	ldr	r2, [pc, #72]	@ (80063d0 <ParseGpsData+0x70>)
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	4413      	add	r3, r2
 800638c:	2200      	movs	r2, #0
 800638e:	701a      	strb	r2, [r3, #0]
	char* tmp_ptr = str_data;
 8006390:	4b0f      	ldr	r3, [pc, #60]	@ (80063d0 <ParseGpsData+0x70>)
 8006392:	617b      	str	r3, [r7, #20]

	while ((start_pos = strstr(tmp_ptr, NMEA_G)))
 8006394:	e00d      	b.n	80063b2 <ParseGpsData+0x52>
	{
		if ((end_pos = strstr(start_pos, NMEA_SENTENCE_END)))
 8006396:	490f      	ldr	r1, [pc, #60]	@ (80063d4 <ParseGpsData+0x74>)
 8006398:	6938      	ldr	r0, [r7, #16]
 800639a:	f00b fa28 	bl	80117ee <strstr>
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d010      	beq.n	80063c8 <ParseGpsData+0x68>
		{
			NMEA_AddtoQueue(start_pos, end_pos);
 80063a6:	68f9      	ldr	r1, [r7, #12]
 80063a8:	6938      	ldr	r0, [r7, #16]
 80063aa:	f7ff ff11 	bl	80061d0 <NMEA_AddtoQueue>
			tmp_ptr = end_pos;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	617b      	str	r3, [r7, #20]
	while ((start_pos = strstr(tmp_ptr, NMEA_G)))
 80063b2:	4909      	ldr	r1, [pc, #36]	@ (80063d8 <ParseGpsData+0x78>)
 80063b4:	6978      	ldr	r0, [r7, #20]
 80063b6:	f00b fa1a 	bl	80117ee <strstr>
 80063ba:	6138      	str	r0, [r7, #16]
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1e9      	bne.n	8006396 <ParseGpsData+0x36>
 80063c2:	e002      	b.n	80063ca <ParseGpsData+0x6a>
		return;
 80063c4:	bf00      	nop
 80063c6:	e000      	b.n	80063ca <ParseGpsData+0x6a>
		}
		else
		{
			return;
 80063c8:	bf00      	nop
		}
	}
}
 80063ca:	3718      	adds	r7, #24
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	20000bc0 	.word	0x20000bc0
 80063d4:	08012134 	.word	0x08012134
 80063d8:	08012138 	.word	0x08012138

080063dc <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	460b      	mov	r3, r1
 80063e6:	807b      	strh	r3, [r7, #2]
	if (huart == &huart2)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a08      	ldr	r2, [pc, #32]	@ (800640c <HAL_UARTEx_RxEventCallback+0x30>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d106      	bne.n	80063fe <HAL_UARTEx_RxEventCallback+0x22>
	{
		is_received_new_data = true;
 80063f0:	4b07      	ldr	r3, [pc, #28]	@ (8006410 <HAL_UARTEx_RxEventCallback+0x34>)
 80063f2:	2201      	movs	r2, #1
 80063f4:	701a      	strb	r2, [r3, #0]
		data_size = Size;
 80063f6:	4a07      	ldr	r2, [pc, #28]	@ (8006414 <HAL_UARTEx_RxEventCallback+0x38>)
 80063f8:	887b      	ldrh	r3, [r7, #2]
 80063fa:	8013      	strh	r3, [r2, #0]
	}
	else
	{
		Error_Handler();
	}
}
 80063fc:	e001      	b.n	8006402 <HAL_UARTEx_RxEventCallback+0x26>
		Error_Handler();
 80063fe:	f000 fef7 	bl	80071f0 <Error_Handler>
}
 8006402:	bf00      	nop
 8006404:	3708      	adds	r7, #8
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	2000096c 	.word	0x2000096c
 8006410:	2000087a 	.word	0x2000087a
 8006414:	20000878 	.word	0x20000878

08006418 <HAL_UART_ErrorCallback>:


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
	if (huart->ErrorCode & HAL_UART_ERROR_PE)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006424:	f003 0301 	and.w	r3, r3, #1
 8006428:	2b00      	cmp	r3, #0
 800642a:	d007      	beq.n	800643c <HAL_UART_ErrorCallback+0x24>
	{
		statistic.pe_count++;
 800642c:	4b1b      	ldr	r3, [pc, #108]	@ (800649c <HAL_UART_ErrorCallback+0x84>)
 800642e:	f8b3 310a 	ldrh.w	r3, [r3, #266]	@ 0x10a
 8006432:	3301      	adds	r3, #1
 8006434:	b29a      	uxth	r2, r3
 8006436:	4b19      	ldr	r3, [pc, #100]	@ (800649c <HAL_UART_ErrorCallback+0x84>)
 8006438:	f8a3 210a 	strh.w	r2, [r3, #266]	@ 0x10a
	}
	if (huart->ErrorCode & HAL_UART_ERROR_NE)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006440:	f003 0302 	and.w	r3, r3, #2
 8006444:	2b00      	cmp	r3, #0
 8006446:	d007      	beq.n	8006458 <HAL_UART_ErrorCallback+0x40>
	{
		statistic.ne_count++;
 8006448:	4b14      	ldr	r3, [pc, #80]	@ (800649c <HAL_UART_ErrorCallback+0x84>)
 800644a:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 800644e:	3301      	adds	r3, #1
 8006450:	b29a      	uxth	r2, r3
 8006452:	4b12      	ldr	r3, [pc, #72]	@ (800649c <HAL_UART_ErrorCallback+0x84>)
 8006454:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
	}
	if (huart->ErrorCode & HAL_UART_ERROR_FE)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800645c:	f003 0304 	and.w	r3, r3, #4
 8006460:	2b00      	cmp	r3, #0
 8006462:	d007      	beq.n	8006474 <HAL_UART_ErrorCallback+0x5c>
	{
		statistic.fe_count++;
 8006464:	4b0d      	ldr	r3, [pc, #52]	@ (800649c <HAL_UART_ErrorCallback+0x84>)
 8006466:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 800646a:	3301      	adds	r3, #1
 800646c:	b29a      	uxth	r2, r3
 800646e:	4b0b      	ldr	r3, [pc, #44]	@ (800649c <HAL_UART_ErrorCallback+0x84>)
 8006470:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
	}
	if (huart->ErrorCode & HAL_UART_ERROR_ORE)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006478:	f003 0308 	and.w	r3, r3, #8
 800647c:	2b00      	cmp	r3, #0
 800647e:	d007      	beq.n	8006490 <HAL_UART_ErrorCallback+0x78>
	{
		statistic.ore_count++;
 8006480:	4b06      	ldr	r3, [pc, #24]	@ (800649c <HAL_UART_ErrorCallback+0x84>)
 8006482:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 8006486:	3301      	adds	r3, #1
 8006488:	b29a      	uxth	r2, r3
 800648a:	4b04      	ldr	r3, [pc, #16]	@ (800649c <HAL_UART_ErrorCallback+0x84>)
 800648c:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
	}
}
 8006490:	bf00      	nop
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr
 800649c:	20000dc4 	.word	0x20000dc4

080064a0 <I2C_CheckBusDevices>:


I2C_devices_list_t* I2C_CheckBusDevices(void)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
	static I2C_devices_list_t i2c_devices = {0};

	for(uint32_t i = 0; i < 128U; i++)
 80064a6:	2300      	movs	r3, #0
 80064a8:	607b      	str	r3, [r7, #4]
 80064aa:	e020      	b.n	80064ee <I2C_CheckBusDevices+0x4e>
	{
		uint16_t adress = i << 1;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	005b      	lsls	r3, r3, #1
 80064b2:	807b      	strh	r3, [r7, #2]
		if(HAL_I2C_IsDeviceReady(&hi2c2, adress, 1, HAL_MAX_DELAY) == HAL_OK)
 80064b4:	8879      	ldrh	r1, [r7, #2]
 80064b6:	f04f 33ff 	mov.w	r3, #4294967295
 80064ba:	2201      	movs	r2, #1
 80064bc:	4810      	ldr	r0, [pc, #64]	@ (8006500 <I2C_CheckBusDevices+0x60>)
 80064be:	f002 fed9 	bl	8009274 <HAL_I2C_IsDeviceReady>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d10f      	bne.n	80064e8 <I2C_CheckBusDevices+0x48>
		{
			i2c_devices.addr[i2c_devices.dev_count] = adress;
 80064c8:	4b0e      	ldr	r3, [pc, #56]	@ (8006504 <I2C_CheckBusDevices+0x64>)
 80064ca:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 80064ce:	461a      	mov	r2, r3
 80064d0:	887b      	ldrh	r3, [r7, #2]
 80064d2:	b2d9      	uxtb	r1, r3
 80064d4:	4b0b      	ldr	r3, [pc, #44]	@ (8006504 <I2C_CheckBusDevices+0x64>)
 80064d6:	5499      	strb	r1, [r3, r2]
			i2c_devices.dev_count++;
 80064d8:	4b0a      	ldr	r3, [pc, #40]	@ (8006504 <I2C_CheckBusDevices+0x64>)
 80064da:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 80064de:	3301      	adds	r3, #1
 80064e0:	b2da      	uxtb	r2, r3
 80064e2:	4b08      	ldr	r3, [pc, #32]	@ (8006504 <I2C_CheckBusDevices+0x64>)
 80064e4:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
	for(uint32_t i = 0; i < 128U; i++)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	3301      	adds	r3, #1
 80064ec:	607b      	str	r3, [r7, #4]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80064f2:	d9db      	bls.n	80064ac <I2C_CheckBusDevices+0xc>
		}
	}
	return &i2c_devices;
 80064f4:	4b03      	ldr	r3, [pc, #12]	@ (8006504 <I2C_CheckBusDevices+0x64>)
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3708      	adds	r7, #8
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	200008c0 	.word	0x200008c0
 8006504:	200039e8 	.word	0x200039e8

08006508 <Get_VL53L0X_Info_Raw>:


VL53L0X_Info_t Get_VL53L0X_Info_Raw(void)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b08a      	sub	sp, #40	@ 0x28
 800650c:	af04      	add	r7, sp, #16
 800650e:	6078      	str	r0, [r7, #4]
    VL53L0X_Info_t sensor_info = {0};
 8006510:	f107 0310 	add.w	r3, r7, #16
 8006514:	2200      	movs	r2, #0
 8006516:	601a      	str	r2, [r3, #0]
 8006518:	809a      	strh	r2, [r3, #4]
    uint8_t read_buffer = 0;
 800651a:	2300      	movs	r3, #0
 800651c:	73fb      	strb	r3, [r7, #15]
    const uint16_t vl53_address = VL53L0X_ADDR_8BIT;
 800651e:	2352      	movs	r3, #82	@ 0x52
 8006520:	82fb      	strh	r3, [r7, #22]
    if (HAL_I2C_IsDeviceReady(&hi2c2, vl53_address, 1, HAL_MAX_DELAY) == HAL_OK)
 8006522:	8af9      	ldrh	r1, [r7, #22]
 8006524:	f04f 33ff 	mov.w	r3, #4294967295
 8006528:	2201      	movs	r2, #1
 800652a:	481d      	ldr	r0, [pc, #116]	@ (80065a0 <Get_VL53L0X_Info_Raw+0x98>)
 800652c:	f002 fea2 	bl	8009274 <HAL_I2C_IsDeviceReady>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d127      	bne.n	8006586 <Get_VL53L0X_Info_Raw+0x7e>
    {
        sensor_info.device_address = vl53_address;
 8006536:	8afb      	ldrh	r3, [r7, #22]
 8006538:	82bb      	strh	r3, [r7, #20]
        if (HAL_I2C_Mem_Read(&hi2c2, vl53_address, 0xC0, I2C_MEMADD_SIZE_8BIT, &read_buffer, 1, HAL_MAX_DELAY) == HAL_OK)
 800653a:	8af9      	ldrh	r1, [r7, #22]
 800653c:	f04f 33ff 	mov.w	r3, #4294967295
 8006540:	9302      	str	r3, [sp, #8]
 8006542:	2301      	movs	r3, #1
 8006544:	9301      	str	r3, [sp, #4]
 8006546:	f107 030f 	add.w	r3, r7, #15
 800654a:	9300      	str	r3, [sp, #0]
 800654c:	2301      	movs	r3, #1
 800654e:	22c0      	movs	r2, #192	@ 0xc0
 8006550:	4813      	ldr	r0, [pc, #76]	@ (80065a0 <Get_VL53L0X_Info_Raw+0x98>)
 8006552:	f002 fc5d 	bl	8008e10 <HAL_I2C_Mem_Read>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d101      	bne.n	8006560 <Get_VL53L0X_Info_Raw+0x58>
        {
            sensor_info.chip_id = read_buffer;
 800655c:	7bfb      	ldrb	r3, [r7, #15]
 800655e:	823b      	strh	r3, [r7, #16]
        }
        if (HAL_I2C_Mem_Read(&hi2c2, vl53_address, 0xC2, I2C_MEMADD_SIZE_8BIT, &read_buffer, 1, HAL_MAX_DELAY) == HAL_OK)
 8006560:	8af9      	ldrh	r1, [r7, #22]
 8006562:	f04f 33ff 	mov.w	r3, #4294967295
 8006566:	9302      	str	r3, [sp, #8]
 8006568:	2301      	movs	r3, #1
 800656a:	9301      	str	r3, [sp, #4]
 800656c:	f107 030f 	add.w	r3, r7, #15
 8006570:	9300      	str	r3, [sp, #0]
 8006572:	2301      	movs	r3, #1
 8006574:	22c2      	movs	r2, #194	@ 0xc2
 8006576:	480a      	ldr	r0, [pc, #40]	@ (80065a0 <Get_VL53L0X_Info_Raw+0x98>)
 8006578:	f002 fc4a 	bl	8008e10 <HAL_I2C_Mem_Read>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d101      	bne.n	8006586 <Get_VL53L0X_Info_Raw+0x7e>
        {
            sensor_info.revision_id = read_buffer;
 8006582:	7bfb      	ldrb	r3, [r7, #15]
 8006584:	827b      	strh	r3, [r7, #18]
        }
    }
    return sensor_info;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	461a      	mov	r2, r3
 800658a:	f107 0310 	add.w	r3, r7, #16
 800658e:	6818      	ldr	r0, [r3, #0]
 8006590:	6010      	str	r0, [r2, #0]
 8006592:	889b      	ldrh	r3, [r3, #4]
 8006594:	8093      	strh	r3, [r2, #4]
}
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	3718      	adds	r7, #24
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	200008c0 	.word	0x200008c0

080065a4 <LidarInit>:
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void LidarInit() {
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0
	uint32_t refSpadCount;
	uint8_t isApertureSpads;
	uint8_t VhvSettings;
	uint8_t PhaseCal;
	VL53L0X_WaitDeviceBooted( Dev );
 80065aa:	4b2d      	ldr	r3, [pc, #180]	@ (8006660 <LidarInit+0xbc>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4618      	mov	r0, r3
 80065b0:	f7fa ffc6 	bl	8001540 <VL53L0X_WaitDeviceBooted>
	VL53L0X_DataInit( Dev );
 80065b4:	4b2a      	ldr	r3, [pc, #168]	@ (8006660 <LidarInit+0xbc>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4618      	mov	r0, r3
 80065ba:	f7fa fcdd 	bl	8000f78 <VL53L0X_DataInit>
	VL53L0X_StaticInit( Dev );
 80065be:	4b28      	ldr	r3, [pc, #160]	@ (8006660 <LidarInit+0xbc>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4618      	mov	r0, r3
 80065c4:	f7fa fe3c 	bl	8001240 <VL53L0X_StaticInit>
	VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 80065c8:	4b25      	ldr	r3, [pc, #148]	@ (8006660 <LidarInit+0xbc>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	1c7a      	adds	r2, r7, #1
 80065ce:	1cb9      	adds	r1, r7, #2
 80065d0:	4618      	mov	r0, r3
 80065d2:	f7fb fcd3 	bl	8001f7c <VL53L0X_PerformRefCalibration>
	VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 80065d6:	4b22      	ldr	r3, [pc, #136]	@ (8006660 <LidarInit+0xbc>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	1cfa      	adds	r2, r7, #3
 80065dc:	1d39      	adds	r1, r7, #4
 80065de:	4618      	mov	r0, r3
 80065e0:	f7fc f94e 	bl	8002880 <VL53L0X_PerformRefSpadManagement>
	VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80065e4:	4b1e      	ldr	r3, [pc, #120]	@ (8006660 <LidarInit+0xbc>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2100      	movs	r1, #0
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7fb f846 	bl	800167c <VL53L0X_SetDeviceMode>

	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 80065f0:	4b1b      	ldr	r3, [pc, #108]	@ (8006660 <LidarInit+0xbc>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2201      	movs	r2, #1
 80065f6:	2100      	movs	r1, #0
 80065f8:	4618      	mov	r0, r3
 80065fa:	f7fb fab9 	bl	8001b70 <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 80065fe:	4b18      	ldr	r3, [pc, #96]	@ (8006660 <LidarInit+0xbc>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2201      	movs	r2, #1
 8006604:	2101      	movs	r1, #1
 8006606:	4618      	mov	r0, r3
 8006608:	f7fb fab2 	bl	8001b70 <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 800660c:	4b14      	ldr	r3, [pc, #80]	@ (8006660 <LidarInit+0xbc>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f641 1299 	movw	r2, #6553	@ 0x1999
 8006614:	2101      	movs	r1, #1
 8006616:	4618      	mov	r0, r3
 8006618:	f7fb fb5a 	bl	8001cd0 <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 800661c:	4b10      	ldr	r3, [pc, #64]	@ (8006660 <LidarInit+0xbc>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8006624:	2100      	movs	r1, #0
 8006626:	4618      	mov	r0, r3
 8006628:	f7fb fb52 	bl	8001cd0 <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 33000);
 800662c:	4b0c      	ldr	r3, [pc, #48]	@ (8006660 <LidarInit+0xbc>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f248 01e8 	movw	r1, #33000	@ 0x80e8
 8006634:	4618      	mov	r0, r3
 8006636:	f7fb f87f 	bl	8001738 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 800663a:	4b09      	ldr	r3, [pc, #36]	@ (8006660 <LidarInit+0xbc>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2212      	movs	r2, #18
 8006640:	2100      	movs	r1, #0
 8006642:	4618      	mov	r0, r3
 8006644:	f7fb f89e 	bl	8001784 <VL53L0X_SetVcselPulsePeriod>
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8006648:	4b05      	ldr	r3, [pc, #20]	@ (8006660 <LidarInit+0xbc>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	220e      	movs	r2, #14
 800664e:	2101      	movs	r1, #1
 8006650:	4618      	mov	r0, r3
 8006652:	f7fb f897 	bl	8001784 <VL53L0X_SetVcselPulsePeriod>
}
 8006656:	bf00      	nop
 8006658:	3708      	adds	r7, #8
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	200002c4 	.word	0x200002c4

08006664 <LCD_Init>:


void LCD_Init(void)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b0c4      	sub	sp, #272	@ 0x110
 8006668:	af02      	add	r7, sp, #8
	uint16_t y_init_pos = 0u;
 800666a:	2300      	movs	r3, #0
 800666c:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106
	char term_output[256] = {0};
 8006670:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006674:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006678:	2200      	movs	r2, #0
 800667a:	601a      	str	r2, [r3, #0]
 800667c:	3304      	adds	r3, #4
 800667e:	22fc      	movs	r2, #252	@ 0xfc
 8006680:	2100      	movs	r1, #0
 8006682:	4618      	mov	r0, r3
 8006684:	f00b f89e 	bl	80117c4 <memset>

	(void)snprintf(term_output, 256, "UID: %x", uid);
 8006688:	4b41      	ldr	r3, [pc, #260]	@ (8006790 <LCD_Init+0x12c>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	1d38      	adds	r0, r7, #4
 800668e:	4a41      	ldr	r2, [pc, #260]	@ (8006794 <LCD_Init+0x130>)
 8006690:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006694:	f00b f862 	bl	801175c <sniprintf>

	ILI9341_Draw_Text(term_output, 7, y_init_pos, WHITE, 2, BLACK);
 8006698:	f8b7 2106 	ldrh.w	r2, [r7, #262]	@ 0x106
 800669c:	1d38      	adds	r0, r7, #4
 800669e:	2300      	movs	r3, #0
 80066a0:	9301      	str	r3, [sp, #4]
 80066a2:	2302      	movs	r3, #2
 80066a4:	9300      	str	r3, [sp, #0]
 80066a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80066aa:	2107      	movs	r1, #7
 80066ac:	f7fa f80c 	bl	80006c8 <ILI9341_Draw_Text>
	y_init_pos += 16u;
 80066b0:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 80066b4:	3310      	adds	r3, #16
 80066b6:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106
	ILI9341_Draw_Text("UTC time: ", 7, y_init_pos, WHITE, 2, BLACK);
 80066ba:	f8b7 2106 	ldrh.w	r2, [r7, #262]	@ 0x106
 80066be:	2300      	movs	r3, #0
 80066c0:	9301      	str	r3, [sp, #4]
 80066c2:	2302      	movs	r3, #2
 80066c4:	9300      	str	r3, [sp, #0]
 80066c6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80066ca:	2107      	movs	r1, #7
 80066cc:	4832      	ldr	r0, [pc, #200]	@ (8006798 <LCD_Init+0x134>)
 80066ce:	f7f9 fffb 	bl	80006c8 <ILI9341_Draw_Text>
	y_init_pos += 16u;
 80066d2:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 80066d6:	3310      	adds	r3, #16
 80066d8:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106
	ILI9341_Draw_Text("Date: ", 7, y_init_pos, WHITE, 2, BLACK);
 80066dc:	f8b7 2106 	ldrh.w	r2, [r7, #262]	@ 0x106
 80066e0:	2300      	movs	r3, #0
 80066e2:	9301      	str	r3, [sp, #4]
 80066e4:	2302      	movs	r3, #2
 80066e6:	9300      	str	r3, [sp, #0]
 80066e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80066ec:	2107      	movs	r1, #7
 80066ee:	482b      	ldr	r0, [pc, #172]	@ (800679c <LCD_Init+0x138>)
 80066f0:	f7f9 ffea 	bl	80006c8 <ILI9341_Draw_Text>
	y_init_pos += 16u;
 80066f4:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 80066f8:	3310      	adds	r3, #16
 80066fa:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106
	ILI9341_Draw_Text("Lat: ", 7, y_init_pos, WHITE, 2, BLACK);
 80066fe:	f8b7 2106 	ldrh.w	r2, [r7, #262]	@ 0x106
 8006702:	2300      	movs	r3, #0
 8006704:	9301      	str	r3, [sp, #4]
 8006706:	2302      	movs	r3, #2
 8006708:	9300      	str	r3, [sp, #0]
 800670a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800670e:	2107      	movs	r1, #7
 8006710:	4823      	ldr	r0, [pc, #140]	@ (80067a0 <LCD_Init+0x13c>)
 8006712:	f7f9 ffd9 	bl	80006c8 <ILI9341_Draw_Text>
	y_init_pos += 16u;
 8006716:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 800671a:	3310      	adds	r3, #16
 800671c:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106
	ILI9341_Draw_Text("Lon: ", 7, y_init_pos, WHITE, 2, BLACK);
 8006720:	f8b7 2106 	ldrh.w	r2, [r7, #262]	@ 0x106
 8006724:	2300      	movs	r3, #0
 8006726:	9301      	str	r3, [sp, #4]
 8006728:	2302      	movs	r3, #2
 800672a:	9300      	str	r3, [sp, #0]
 800672c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006730:	2107      	movs	r1, #7
 8006732:	481c      	ldr	r0, [pc, #112]	@ (80067a4 <LCD_Init+0x140>)
 8006734:	f7f9 ffc8 	bl	80006c8 <ILI9341_Draw_Text>
	y_init_pos += 16u;
 8006738:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 800673c:	3310      	adds	r3, #16
 800673e:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106
    ILI9341_Draw_Text("Distance: ", 7, y_init_pos, WHITE, 2, BLACK);
 8006742:	f8b7 2106 	ldrh.w	r2, [r7, #262]	@ 0x106
 8006746:	2300      	movs	r3, #0
 8006748:	9301      	str	r3, [sp, #4]
 800674a:	2302      	movs	r3, #2
 800674c:	9300      	str	r3, [sp, #0]
 800674e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006752:	2107      	movs	r1, #7
 8006754:	4814      	ldr	r0, [pc, #80]	@ (80067a8 <LCD_Init+0x144>)
 8006756:	f7f9 ffb7 	bl	80006c8 <ILI9341_Draw_Text>
    y_init_pos += 16u;
 800675a:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 800675e:	3310      	adds	r3, #16
 8006760:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106
    ILI9341_Draw_Text("Lidar ID:", 7, y_init_pos, WHITE, 2, BLACK);
 8006764:	f8b7 2106 	ldrh.w	r2, [r7, #262]	@ 0x106
 8006768:	2300      	movs	r3, #0
 800676a:	9301      	str	r3, [sp, #4]
 800676c:	2302      	movs	r3, #2
 800676e:	9300      	str	r3, [sp, #0]
 8006770:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006774:	2107      	movs	r1, #7
 8006776:	480d      	ldr	r0, [pc, #52]	@ (80067ac <LCD_Init+0x148>)
 8006778:	f7f9 ffa6 	bl	80006c8 <ILI9341_Draw_Text>
    y_init_pos += 16u;
 800677c:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 8006780:	3310      	adds	r3, #16
 8006782:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106
}
 8006786:	bf00      	nop
 8006788:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}
 8006790:	200008bc 	.word	0x200008bc
 8006794:	08012140 	.word	0x08012140
 8006798:	08012148 	.word	0x08012148
 800679c:	08012154 	.word	0x08012154
 80067a0:	0801215c 	.word	0x0801215c
 80067a4:	08012164 	.word	0x08012164
 80067a8:	0801216c 	.word	0x0801216c
 80067ac:	08012178 	.word	0x08012178

080067b0 <LCD_Update>:

void LCD_Update(void)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b0cc      	sub	sp, #304	@ 0x130
 80067b4:	af02      	add	r7, sp, #8
	uint16_t y_init_pos = 16u;
 80067b6:	2310      	movs	r3, #16
 80067b8:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
	const uint16_t x_update_pos = 10* 6 * 2;
 80067bc:	2378      	movs	r3, #120	@ 0x78
 80067be:	f8a7 3124 	strh.w	r3, [r7, #292]	@ 0x124
	char term_output[256] = {0};
 80067c2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80067c6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80067ca:	2200      	movs	r2, #0
 80067cc:	601a      	str	r2, [r3, #0]
 80067ce:	3304      	adds	r3, #4
 80067d0:	22fc      	movs	r2, #252	@ 0xfc
 80067d2:	2100      	movs	r1, #0
 80067d4:	4618      	mov	r0, r3
 80067d6:	f00a fff5 	bl	80117c4 <memset>
	float distanceInCm = (float)(RangingData.RangeMilliMeter)/10;
 80067da:	4b72      	ldr	r3, [pc, #456]	@ (80069a4 <LCD_Update+0x1f4>)
 80067dc:	891b      	ldrh	r3, [r3, #8]
 80067de:	ee07 3a90 	vmov	s15, r3
 80067e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80067e6:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80067ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80067ee:	edc7 7a48 	vstr	s15, [r7, #288]	@ 0x120
	char distance_str[20];
	uint16_t mm = RangingData.RangeMilliMeter;
 80067f2:	4b6c      	ldr	r3, [pc, #432]	@ (80069a4 <LCD_Update+0x1f4>)
 80067f4:	891b      	ldrh	r3, [r3, #8]
 80067f6:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
	uint16_t cm_whole = mm / 10;
 80067fa:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 80067fe:	4a6a      	ldr	r2, [pc, #424]	@ (80069a8 <LCD_Update+0x1f8>)
 8006800:	fba2 2303 	umull	r2, r3, r2, r3
 8006804:	08db      	lsrs	r3, r3, #3
 8006806:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
	uint16_t cm_frac = mm % 10;
 800680a:	f8b7 211e 	ldrh.w	r2, [r7, #286]	@ 0x11e
 800680e:	4b66      	ldr	r3, [pc, #408]	@ (80069a8 <LCD_Update+0x1f8>)
 8006810:	fba3 1302 	umull	r1, r3, r3, r2
 8006814:	08d9      	lsrs	r1, r3, #3
 8006816:	460b      	mov	r3, r1
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	440b      	add	r3, r1
 800681c:	005b      	lsls	r3, r3, #1
 800681e:	1ad3      	subs	r3, r2, r3
 8006820:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a


	(void)snprintf(term_output, 256, "%s", utc);
 8006824:	f107 0018 	add.w	r0, r7, #24
 8006828:	4b60      	ldr	r3, [pc, #384]	@ (80069ac <LCD_Update+0x1fc>)
 800682a:	4a61      	ldr	r2, [pc, #388]	@ (80069b0 <LCD_Update+0x200>)
 800682c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006830:	f00a ff94 	bl	801175c <sniprintf>
	ILI9341_Draw_Text(term_output, x_update_pos, y_init_pos, WHITE, 2, BLACK);
 8006834:	f8b7 2126 	ldrh.w	r2, [r7, #294]	@ 0x126
 8006838:	f8b7 1124 	ldrh.w	r1, [r7, #292]	@ 0x124
 800683c:	f107 0018 	add.w	r0, r7, #24
 8006840:	2300      	movs	r3, #0
 8006842:	9301      	str	r3, [sp, #4]
 8006844:	2302      	movs	r3, #2
 8006846:	9300      	str	r3, [sp, #0]
 8006848:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800684c:	f7f9 ff3c 	bl	80006c8 <ILI9341_Draw_Text>
	y_init_pos += 16u;
 8006850:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8006854:	3310      	adds	r3, #16
 8006856:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126

	(void)snprintf(term_output, 256, "%s", year);
 800685a:	f107 0018 	add.w	r0, r7, #24
 800685e:	4b55      	ldr	r3, [pc, #340]	@ (80069b4 <LCD_Update+0x204>)
 8006860:	4a53      	ldr	r2, [pc, #332]	@ (80069b0 <LCD_Update+0x200>)
 8006862:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006866:	f00a ff79 	bl	801175c <sniprintf>
	ILI9341_Draw_Text(term_output, x_update_pos, y_init_pos, WHITE, 2, BLACK);
 800686a:	f8b7 2126 	ldrh.w	r2, [r7, #294]	@ 0x126
 800686e:	f8b7 1124 	ldrh.w	r1, [r7, #292]	@ 0x124
 8006872:	f107 0018 	add.w	r0, r7, #24
 8006876:	2300      	movs	r3, #0
 8006878:	9301      	str	r3, [sp, #4]
 800687a:	2302      	movs	r3, #2
 800687c:	9300      	str	r3, [sp, #0]
 800687e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006882:	f7f9 ff21 	bl	80006c8 <ILI9341_Draw_Text>
	y_init_pos += 16u;
 8006886:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 800688a:	3310      	adds	r3, #16
 800688c:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126

	(void)snprintf(term_output, 256, "%s, %c", lat, lat_stat);
 8006890:	4b49      	ldr	r3, [pc, #292]	@ (80069b8 <LCD_Update+0x208>)
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	f107 0018 	add.w	r0, r7, #24
 8006898:	9300      	str	r3, [sp, #0]
 800689a:	4b48      	ldr	r3, [pc, #288]	@ (80069bc <LCD_Update+0x20c>)
 800689c:	4a48      	ldr	r2, [pc, #288]	@ (80069c0 <LCD_Update+0x210>)
 800689e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80068a2:	f00a ff5b 	bl	801175c <sniprintf>
	ILI9341_Draw_Text(term_output, x_update_pos, y_init_pos, WHITE, 2, BLACK);
 80068a6:	f8b7 2126 	ldrh.w	r2, [r7, #294]	@ 0x126
 80068aa:	f8b7 1124 	ldrh.w	r1, [r7, #292]	@ 0x124
 80068ae:	f107 0018 	add.w	r0, r7, #24
 80068b2:	2300      	movs	r3, #0
 80068b4:	9301      	str	r3, [sp, #4]
 80068b6:	2302      	movs	r3, #2
 80068b8:	9300      	str	r3, [sp, #0]
 80068ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80068be:	f7f9 ff03 	bl	80006c8 <ILI9341_Draw_Text>
	y_init_pos += 16u;
 80068c2:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 80068c6:	3310      	adds	r3, #16
 80068c8:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126

	(void)snprintf(term_output, 256, "%s, %c", lon, lon_stat);
 80068cc:	4b3d      	ldr	r3, [pc, #244]	@ (80069c4 <LCD_Update+0x214>)
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	f107 0018 	add.w	r0, r7, #24
 80068d4:	9300      	str	r3, [sp, #0]
 80068d6:	4b3c      	ldr	r3, [pc, #240]	@ (80069c8 <LCD_Update+0x218>)
 80068d8:	4a39      	ldr	r2, [pc, #228]	@ (80069c0 <LCD_Update+0x210>)
 80068da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80068de:	f00a ff3d 	bl	801175c <sniprintf>
	ILI9341_Draw_Text(term_output, x_update_pos, y_init_pos, WHITE, 2, BLACK);
 80068e2:	f8b7 2126 	ldrh.w	r2, [r7, #294]	@ 0x126
 80068e6:	f8b7 1124 	ldrh.w	r1, [r7, #292]	@ 0x124
 80068ea:	f107 0018 	add.w	r0, r7, #24
 80068ee:	2300      	movs	r3, #0
 80068f0:	9301      	str	r3, [sp, #4]
 80068f2:	2302      	movs	r3, #2
 80068f4:	9300      	str	r3, [sp, #0]
 80068f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80068fa:	f7f9 fee5 	bl	80006c8 <ILI9341_Draw_Text>
	y_init_pos += 16u;
 80068fe:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8006902:	3310      	adds	r3, #16
 8006904:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126

	if (mm == 0 || RangingData.RangeStatus != 0)
 8006908:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 800690c:	2b00      	cmp	r3, #0
 800690e:	d003      	beq.n	8006918 <LCD_Update+0x168>
 8006910:	4b24      	ldr	r3, [pc, #144]	@ (80069a4 <LCD_Update+0x1f4>)
 8006912:	7e1b      	ldrb	r3, [r3, #24]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d006      	beq.n	8006926 <LCD_Update+0x176>
	{
	  (void)snprintf(distance_str, sizeof(distance_str), "N/A        ");
 8006918:	1d3b      	adds	r3, r7, #4
 800691a:	4a2c      	ldr	r2, [pc, #176]	@ (80069cc <LCD_Update+0x21c>)
 800691c:	2114      	movs	r1, #20
 800691e:	4618      	mov	r0, r3
 8006920:	f00a ff1c 	bl	801175c <sniprintf>
 8006924:	e00a      	b.n	800693c <LCD_Update+0x18c>
	}
	else
	{
       snprintf(distance_str, sizeof(distance_str), "%u.%u cm     ", cm_whole, cm_frac);
 8006926:	f8b7 211c 	ldrh.w	r2, [r7, #284]	@ 0x11c
 800692a:	f8b7 311a 	ldrh.w	r3, [r7, #282]	@ 0x11a
 800692e:	1d38      	adds	r0, r7, #4
 8006930:	9300      	str	r3, [sp, #0]
 8006932:	4613      	mov	r3, r2
 8006934:	4a26      	ldr	r2, [pc, #152]	@ (80069d0 <LCD_Update+0x220>)
 8006936:	2114      	movs	r1, #20
 8006938:	f00a ff10 	bl	801175c <sniprintf>
	}

	ILI9341_Draw_Text(distance_str, x_update_pos, y_init_pos, YELLOW, 2, BLACK);
 800693c:	f8b7 2126 	ldrh.w	r2, [r7, #294]	@ 0x126
 8006940:	f8b7 1124 	ldrh.w	r1, [r7, #292]	@ 0x124
 8006944:	1d38      	adds	r0, r7, #4
 8006946:	2300      	movs	r3, #0
 8006948:	9301      	str	r3, [sp, #4]
 800694a:	2302      	movs	r3, #2
 800694c:	9300      	str	r3, [sp, #0]
 800694e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8006952:	f7f9 feb9 	bl	80006c8 <ILI9341_Draw_Text>
	y_init_pos += 16u;
 8006956:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 800695a:	3310      	adds	r3, #16
 800695c:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126

	(void)snprintf(term_output, 256, "0x%X   ", my_lidar_info.chip_id);
 8006960:	4b1c      	ldr	r3, [pc, #112]	@ (80069d4 <LCD_Update+0x224>)
 8006962:	881b      	ldrh	r3, [r3, #0]
 8006964:	f107 0018 	add.w	r0, r7, #24
 8006968:	4a1b      	ldr	r2, [pc, #108]	@ (80069d8 <LCD_Update+0x228>)
 800696a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800696e:	f00a fef5 	bl	801175c <sniprintf>
	ILI9341_Draw_Text(term_output, x_update_pos, y_init_pos, YELLOW, 2, BLACK);
 8006972:	f8b7 2126 	ldrh.w	r2, [r7, #294]	@ 0x126
 8006976:	f8b7 1124 	ldrh.w	r1, [r7, #292]	@ 0x124
 800697a:	f107 0018 	add.w	r0, r7, #24
 800697e:	2300      	movs	r3, #0
 8006980:	9301      	str	r3, [sp, #4]
 8006982:	2302      	movs	r3, #2
 8006984:	9300      	str	r3, [sp, #0]
 8006986:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800698a:	f7f9 fe9d 	bl	80006c8 <ILI9341_Draw_Text>
	y_init_pos += 16u;
 800698e:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8006992:	3310      	adds	r3, #16
 8006994:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
}
 8006998:	bf00      	nop
 800699a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	20000a14 	.word	0x20000a14
 80069a8:	cccccccd 	.word	0xcccccccd
 80069ac:	2000087c 	.word	0x2000087c
 80069b0:	08012184 	.word	0x08012184
 80069b4:	2000088c 	.word	0x2000088c
 80069b8:	200002c3 	.word	0x200002c3
 80069bc:	200008ac 	.word	0x200008ac
 80069c0:	08012188 	.word	0x08012188
 80069c4:	200002c2 	.word	0x200002c2
 80069c8:	2000089c 	.word	0x2000089c
 80069cc:	08012190 	.word	0x08012190
 80069d0:	0801219c 	.word	0x0801219c
 80069d4:	20003960 	.word	0x20003960
 80069d8:	080121ac 	.word	0x080121ac

080069dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80069dc:	b590      	push	{r4, r7, lr}
 80069de:	b0eb      	sub	sp, #428	@ 0x1ac
 80069e0:	af04      	add	r7, sp, #16

  /* USER CODE BEGIN 1 */
	uint8_t buffer[] = "\r\n";
 80069e2:	4aad      	ldr	r2, [pc, #692]	@ (8006c98 <main+0x2bc>)
 80069e4:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 80069e8:	6812      	ldr	r2, [r2, #0]
 80069ea:	4611      	mov	r1, r2
 80069ec:	8019      	strh	r1, [r3, #0]
 80069ee:	3302      	adds	r3, #2
 80069f0:	0c12      	lsrs	r2, r2, #16
 80069f2:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80069f4:	f000 fe50 	bl	8007698 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80069f8:	f000 f9ce 	bl	8006d98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80069fc:	f000 fae2 	bl	8006fc4 <MX_GPIO_Init>
  MX_DMA_Init();
 8006a00:	f000 fac0 	bl	8006f84 <MX_DMA_Init>
  MX_SPI1_Init();
 8006a04:	f000 fa5e 	bl	8006ec4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8006a08:	f000 fa92 	bl	8006f30 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8006a0c:	f00a f8fc 	bl	8010c08 <MX_USB_DEVICE_Init>
  MX_I2C2_Init();
 8006a10:	f000 fa2a 	bl	8006e68 <MX_I2C2_Init>
  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8006a14:	b662      	cpsie	i
}
 8006a16:	bf00      	nop
  /* USER CODE BEGIN 2 */

  __enable_irq();
  rng_seed(DWT->CYCCNT);
 8006a18:	4ba0      	ldr	r3, [pc, #640]	@ (8006c9c <main+0x2c0>)
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f000 fc0f 	bl	8007240 <rng_seed>
  uid = xorshift32();
 8006a22:	f000 fbeb 	bl	80071fc <xorshift32>
 8006a26:	4603      	mov	r3, r0
 8006a28:	461a      	mov	r2, r3
 8006a2a:	4b9d      	ldr	r3, [pc, #628]	@ (8006ca0 <main+0x2c4>)
 8006a2c:	601a      	str	r2, [r3, #0]
  (void)HAL_UARTEx_ReceiveToIdle_DMA(&huart2, dma_rx_buffer, BUFFER_SIZE);
 8006a2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a32:	499c      	ldr	r1, [pc, #624]	@ (8006ca4 <main+0x2c8>)
 8006a34:	489c      	ldr	r0, [pc, #624]	@ (8006ca8 <main+0x2cc>)
 8006a36:	f005 fcaf 	bl	800c398 <HAL_UARTEx_ReceiveToIdle_DMA>
  Dev->I2cHandle = &hi2c2;
 8006a3a:	4b9c      	ldr	r3, [pc, #624]	@ (8006cac <main+0x2d0>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a9c      	ldr	r2, [pc, #624]	@ (8006cb0 <main+0x2d4>)
 8006a40:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  Dev->I2cDevAddr = VL53L0X_ADDR_8BIT;
 8006a44:	4b99      	ldr	r3, [pc, #612]	@ (8006cac <main+0x2d0>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2252      	movs	r2, #82	@ 0x52
 8006a4a:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160

  i2c_dev_list = *(I2C_CheckBusDevices());
 8006a4e:	f7ff fd27 	bl	80064a0 <I2C_CheckBusDevices>
 8006a52:	4603      	mov	r3, r0
 8006a54:	4a97      	ldr	r2, [pc, #604]	@ (8006cb4 <main+0x2d8>)
 8006a56:	4610      	mov	r0, r2
 8006a58:	4619      	mov	r1, r3
 8006a5a:	2380      	movs	r3, #128	@ 0x80
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	f00a ff11 	bl	8011884 <memcpy>
  for (uint32_t i = 0; i < i2c_dev_list.dev_count; ++i)
 8006a62:	2300      	movs	r3, #0
 8006a64:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8006a68:	e01d      	b.n	8006aa6 <main+0xca>
  {
	  if (i2c_dev_list.addr[i] == VL53L0X_ADDR_8BIT)
 8006a6a:	4a92      	ldr	r2, [pc, #584]	@ (8006cb4 <main+0x2d8>)
 8006a6c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8006a70:	4413      	add	r3, r2
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	2b52      	cmp	r3, #82	@ 0x52
 8006a76:	d111      	bne.n	8006a9c <main+0xc0>
	  {
		  HAL_GPIO_WritePin(Lidar_xshutdown_GPIO_Port, Lidar_xshutdown_Pin, GPIO_PIN_RESET);
 8006a78:	2200      	movs	r2, #0
 8006a7a:	2120      	movs	r1, #32
 8006a7c:	488e      	ldr	r0, [pc, #568]	@ (8006cb8 <main+0x2dc>)
 8006a7e:	f001 fd39 	bl	80084f4 <HAL_GPIO_WritePin>
		  HAL_Delay(20);
 8006a82:	2014      	movs	r0, #20
 8006a84:	f000 fe7a 	bl	800777c <HAL_Delay>
		  HAL_GPIO_WritePin(Lidar_xshutdown_GPIO_Port, Lidar_xshutdown_Pin, GPIO_PIN_SET);
 8006a88:	2201      	movs	r2, #1
 8006a8a:	2120      	movs	r1, #32
 8006a8c:	488a      	ldr	r0, [pc, #552]	@ (8006cb8 <main+0x2dc>)
 8006a8e:	f001 fd31 	bl	80084f4 <HAL_GPIO_WritePin>
		  HAL_Delay(20);
 8006a92:	2014      	movs	r0, #20
 8006a94:	f000 fe72 	bl	800777c <HAL_Delay>
		  LidarInit();
 8006a98:	f7ff fd84 	bl	80065a4 <LidarInit>
  for (uint32_t i = 0; i < i2c_dev_list.dev_count; ++i)
 8006a9c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8006aa6:	4b83      	ldr	r3, [pc, #524]	@ (8006cb4 <main+0x2d8>)
 8006aa8:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8006aac:	461a      	mov	r2, r3
 8006aae:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d3d9      	bcc.n	8006a6a <main+0x8e>
	  }
  }

  my_lidar_info = Get_VL53L0X_Info_Raw();
 8006ab6:	4c81      	ldr	r4, [pc, #516]	@ (8006cbc <main+0x2e0>)
 8006ab8:	463b      	mov	r3, r7
 8006aba:	4618      	mov	r0, r3
 8006abc:	f7ff fd24 	bl	8006508 <Get_VL53L0X_Info_Raw>
 8006ac0:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8006ac4:	f5a3 72cc 	sub.w	r2, r3, #408	@ 0x198
 8006ac8:	4623      	mov	r3, r4
 8006aca:	6810      	ldr	r0, [r2, #0]
 8006acc:	6018      	str	r0, [r3, #0]
 8006ace:	8892      	ldrh	r2, [r2, #4]
 8006ad0:	809a      	strh	r2, [r3, #4]
  ILI9341_Init();
 8006ad2:	f7f9 ff4b 	bl	800096c <ILI9341_Init>
  ILI9341_Fill_Screen(BLACK);
 8006ad6:	2000      	movs	r0, #0
 8006ad8:	f7fa f8f0 	bl	8000cbc <ILI9341_Fill_Screen>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8006adc:	2003      	movs	r0, #3
 8006ade:	f7f9 fee7 	bl	80008b0 <ILI9341_Set_Rotation>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  LCD_Init();
 8006ae2:	f7ff fdbf 	bl	8006664 <LCD_Init>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if(is_received_new_data == true)
 8006ae6:	4b76      	ldr	r3, [pc, #472]	@ (8006cc0 <main+0x2e4>)
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d049      	beq.n	8006b82 <main+0x1a6>
	  {
	   is_received_new_data = false;
 8006aee:	4b74      	ldr	r3, [pc, #464]	@ (8006cc0 <main+0x2e4>)
 8006af0:	2200      	movs	r2, #0
 8006af2:	701a      	strb	r2, [r3, #0]

	   ParseGpsData(dma_rx_buffer, data_size);
 8006af4:	4b73      	ldr	r3, [pc, #460]	@ (8006cc4 <main+0x2e8>)
 8006af6:	881b      	ldrh	r3, [r3, #0]
 8006af8:	4619      	mov	r1, r3
 8006afa:	486a      	ldr	r0, [pc, #424]	@ (8006ca4 <main+0x2c8>)
 8006afc:	f7ff fc30 	bl	8006360 <ParseGpsData>
	   STAT_AddRecord(data_size);
 8006b00:	4b70      	ldr	r3, [pc, #448]	@ (8006cc4 <main+0x2e8>)
 8006b02:	881b      	ldrh	r3, [r3, #0]
 8006b04:	4618      	mov	r0, r3
 8006b06:	f7ff fa0b 	bl	8005f20 <STAT_AddRecord>

	   NMEA_sentence_t* sentence_ptr = NMEA_ReadFromQueue();
 8006b0a:	f7ff fbdf 	bl	80062cc <NMEA_ReadFromQueue>
 8006b0e:	f8c7 0190 	str.w	r0, [r7, #400]	@ 0x190
	   char cdc_string[128] = {0};
 8006b12:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8006b16:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	601a      	str	r2, [r3, #0]
 8006b1e:	3304      	adds	r3, #4
 8006b20:	227c      	movs	r2, #124	@ 0x7c
 8006b22:	2100      	movs	r1, #0
 8006b24:	4618      	mov	r0, r3
 8006b26:	f00a fe4d 	bl	80117c4 <memset>
	   char term_output[256] = {0};
 8006b2a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8006b2e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006b32:	2200      	movs	r2, #0
 8006b34:	601a      	str	r2, [r3, #0]
 8006b36:	3304      	adds	r3, #4
 8006b38:	22fc      	movs	r2, #252	@ 0xfc
 8006b3a:	2100      	movs	r1, #0
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f00a fe41 	bl	80117c4 <memset>

   if (sentence_ptr != NULL && is_raw_on)
 8006b42:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d01b      	beq.n	8006b82 <main+0x1a6>
 8006b4a:	4b5f      	ldr	r3, [pc, #380]	@ (8006cc8 <main+0x2ec>)
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d017      	beq.n	8006b82 <main+0x1a6>
   {
	   CDC_Transmit_FS(sentence_ptr->packet, strlen((char*)sentence_ptr->packet));
 8006b52:	f8d7 4190 	ldr.w	r4, [r7, #400]	@ 0x190
 8006b56:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f7f9 fb4a 	bl	80001f4 <strlen>
 8006b60:	4603      	mov	r3, r0
 8006b62:	4619      	mov	r1, r3
 8006b64:	4620      	mov	r0, r4
 8006b66:	f00a f915 	bl	8010d94 <CDC_Transmit_FS>
	   CDC_Transmit_FS(buffer, strlen(buffer));
 8006b6a:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7f9 fb40 	bl	80001f4 <strlen>
 8006b74:	4602      	mov	r2, r0
 8006b76:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 8006b7a:	4611      	mov	r1, r2
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f00a f909 	bl	8010d94 <CDC_Transmit_FS>
   }
	   }
      if (usb_received_len > 0)
 8006b82:	4b52      	ldr	r3, [pc, #328]	@ (8006ccc <main+0x2f0>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	f000 80e9 	beq.w	8006d5e <main+0x382>
      {
   	   char term_output[256] = {0};
 8006b8c:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8006b90:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006b94:	2200      	movs	r2, #0
 8006b96:	601a      	str	r2, [r3, #0]
 8006b98:	3304      	adds	r3, #4
 8006b9a:	22fc      	movs	r2, #252	@ 0xfc
 8006b9c:	2100      	movs	r1, #0
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f00a fe10 	bl	80117c4 <memset>

   	   if (strcmp(usb_term_buffer, TERM_CMD_VERSION) == 0)
 8006ba4:	494a      	ldr	r1, [pc, #296]	@ (8006cd0 <main+0x2f4>)
 8006ba6:	484b      	ldr	r0, [pc, #300]	@ (8006cd4 <main+0x2f8>)
 8006ba8:	f7f9 fb1a 	bl	80001e0 <strcmp>
 8006bac:	4603      	mov	r3, r0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d104      	bne.n	8006bbc <main+0x1e0>
   	   {
   		   CDC_Transmit_FS(VERSION_STR, strlen(VERSION_STR));
 8006bb2:	214d      	movs	r1, #77	@ 0x4d
 8006bb4:	4848      	ldr	r0, [pc, #288]	@ (8006cd8 <main+0x2fc>)
 8006bb6:	f00a f8ed 	bl	8010d94 <CDC_Transmit_FS>
 8006bba:	e0c7      	b.n	8006d4c <main+0x370>
   	   }
   	   else if (strcmp(usb_term_buffer, TERM_CMD_GET_POS) == 0)
 8006bbc:	4947      	ldr	r1, [pc, #284]	@ (8006cdc <main+0x300>)
 8006bbe:	4845      	ldr	r0, [pc, #276]	@ (8006cd4 <main+0x2f8>)
 8006bc0:	f7f9 fb0e 	bl	80001e0 <strcmp>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d118      	bne.n	8006bfc <main+0x220>
   	   {
   		   (void)snprintf(term_output, 256, TERM_POS_OUTPUT_FORMAT, lat, lat_stat, lon, lon_stat);
 8006bca:	4b45      	ldr	r3, [pc, #276]	@ (8006ce0 <main+0x304>)
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	461a      	mov	r2, r3
 8006bd0:	4b44      	ldr	r3, [pc, #272]	@ (8006ce4 <main+0x308>)
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	f107 008c 	add.w	r0, r7, #140	@ 0x8c
 8006bd8:	9302      	str	r3, [sp, #8]
 8006bda:	4b43      	ldr	r3, [pc, #268]	@ (8006ce8 <main+0x30c>)
 8006bdc:	9301      	str	r3, [sp, #4]
 8006bde:	9200      	str	r2, [sp, #0]
 8006be0:	4b42      	ldr	r3, [pc, #264]	@ (8006cec <main+0x310>)
 8006be2:	4a43      	ldr	r2, [pc, #268]	@ (8006cf0 <main+0x314>)
 8006be4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006be8:	f00a fdb8 	bl	801175c <sniprintf>
   		   CDC_Transmit_FS(term_output, sizeof(term_output));
 8006bec:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8006bf0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f00a f8cd 	bl	8010d94 <CDC_Transmit_FS>
 8006bfa:	e0a7      	b.n	8006d4c <main+0x370>
   	   }
   	   else if (strcmp(usb_term_buffer, TERM_CMD_GET_TIME) == 0)
 8006bfc:	493d      	ldr	r1, [pc, #244]	@ (8006cf4 <main+0x318>)
 8006bfe:	4835      	ldr	r0, [pc, #212]	@ (8006cd4 <main+0x2f8>)
 8006c00:	f7f9 faee 	bl	80001e0 <strcmp>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d114      	bne.n	8006c34 <main+0x258>
   	   {
   		   (void)snprintf(term_output, 256, TERM_UTC_OUTPUT_FORMAT, utc);
 8006c0a:	f107 008c 	add.w	r0, r7, #140	@ 0x8c
 8006c0e:	4b3a      	ldr	r3, [pc, #232]	@ (8006cf8 <main+0x31c>)
 8006c10:	4a3a      	ldr	r2, [pc, #232]	@ (8006cfc <main+0x320>)
 8006c12:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006c16:	f00a fda1 	bl	801175c <sniprintf>
   		   CDC_Transmit_FS(term_output, strlen(term_output));
 8006c1a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7f9 fae8 	bl	80001f4 <strlen>
 8006c24:	4602      	mov	r2, r0
 8006c26:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8006c2a:	4611      	mov	r1, r2
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f00a f8b1 	bl	8010d94 <CDC_Transmit_FS>
 8006c32:	e08b      	b.n	8006d4c <main+0x370>
   	   }
   	   else if (strcmp(usb_term_buffer, TERM_CMD_GET_DATE) == 0)
 8006c34:	4932      	ldr	r1, [pc, #200]	@ (8006d00 <main+0x324>)
 8006c36:	4827      	ldr	r0, [pc, #156]	@ (8006cd4 <main+0x2f8>)
 8006c38:	f7f9 fad2 	bl	80001e0 <strcmp>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d114      	bne.n	8006c6c <main+0x290>
   	   {
   	       (void)snprintf(term_output, 256, TERM_DATE_OUTPUT_FORMAT, year);
 8006c42:	f107 008c 	add.w	r0, r7, #140	@ 0x8c
 8006c46:	4b2f      	ldr	r3, [pc, #188]	@ (8006d04 <main+0x328>)
 8006c48:	4a2f      	ldr	r2, [pc, #188]	@ (8006d08 <main+0x32c>)
 8006c4a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006c4e:	f00a fd85 	bl	801175c <sniprintf>
   	       CDC_Transmit_FS(term_output, strlen(term_output));
 8006c52:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8006c56:	4618      	mov	r0, r3
 8006c58:	f7f9 facc 	bl	80001f4 <strlen>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8006c62:	4611      	mov	r1, r2
 8006c64:	4618      	mov	r0, r3
 8006c66:	f00a f895 	bl	8010d94 <CDC_Transmit_FS>
 8006c6a:	e06f      	b.n	8006d4c <main+0x370>
   	   }
   	   else if (strcmp(usb_term_buffer, TERM_CMD_RAW_ON) == 0)
 8006c6c:	4927      	ldr	r1, [pc, #156]	@ (8006d0c <main+0x330>)
 8006c6e:	4819      	ldr	r0, [pc, #100]	@ (8006cd4 <main+0x2f8>)
 8006c70:	f7f9 fab6 	bl	80001e0 <strcmp>
 8006c74:	4603      	mov	r3, r0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d103      	bne.n	8006c82 <main+0x2a6>
   	   {
   		   is_raw_on = true;
 8006c7a:	4b13      	ldr	r3, [pc, #76]	@ (8006cc8 <main+0x2ec>)
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	701a      	strb	r2, [r3, #0]
 8006c80:	e064      	b.n	8006d4c <main+0x370>
   	   }
   	   else if (strcmp(usb_term_buffer, TERM_CMD_RAW_OFF) == 0)
 8006c82:	4923      	ldr	r1, [pc, #140]	@ (8006d10 <main+0x334>)
 8006c84:	4813      	ldr	r0, [pc, #76]	@ (8006cd4 <main+0x2f8>)
 8006c86:	f7f9 faab 	bl	80001e0 <strcmp>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d141      	bne.n	8006d14 <main+0x338>
   	   {
   	       is_raw_on = false;
 8006c90:	4b0d      	ldr	r3, [pc, #52]	@ (8006cc8 <main+0x2ec>)
 8006c92:	2200      	movs	r2, #0
 8006c94:	701a      	strb	r2, [r3, #0]
 8006c96:	e059      	b.n	8006d4c <main+0x370>
 8006c98:	08012134 	.word	0x08012134
 8006c9c:	e0001000 	.word	0xe0001000
 8006ca0:	200008bc 	.word	0x200008bc
 8006ca4:	20000678 	.word	0x20000678
 8006ca8:	2000096c 	.word	0x2000096c
 8006cac:	200002c4 	.word	0x200002c4
 8006cb0:	200008c0 	.word	0x200008c0
 8006cb4:	20003968 	.word	0x20003968
 8006cb8:	40020400 	.word	0x40020400
 8006cbc:	20003960 	.word	0x20003960
 8006cc0:	2000087a 	.word	0x2000087a
 8006cc4:	20000878 	.word	0x20000878
 8006cc8:	200002c0 	.word	0x200002c0
 8006ccc:	20000674 	.word	0x20000674
 8006cd0:	080121b4 	.word	0x080121b4
 8006cd4:	20000474 	.word	0x20000474
 8006cd8:	080121b8 	.word	0x080121b8
 8006cdc:	08012208 	.word	0x08012208
 8006ce0:	200002c3 	.word	0x200002c3
 8006ce4:	200002c2 	.word	0x200002c2
 8006ce8:	2000089c 	.word	0x2000089c
 8006cec:	200008ac 	.word	0x200008ac
 8006cf0:	08012210 	.word	0x08012210
 8006cf4:	08012230 	.word	0x08012230
 8006cf8:	2000087c 	.word	0x2000087c
 8006cfc:	0801223c 	.word	0x0801223c
 8006d00:	08012250 	.word	0x08012250
 8006d04:	2000088c 	.word	0x2000088c
 8006d08:	0801225c 	.word	0x0801225c
 8006d0c:	08012274 	.word	0x08012274
 8006d10:	0801227c 	.word	0x0801227c
   	   }
		   else if (strcmp(usb_term_buffer, TERM_CMD_GET_STATUS) == 0)
 8006d14:	4919      	ldr	r1, [pc, #100]	@ (8006d7c <main+0x3a0>)
 8006d16:	481a      	ldr	r0, [pc, #104]	@ (8006d80 <main+0x3a4>)
 8006d18:	f7f9 fa62 	bl	80001e0 <strcmp>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d114      	bne.n	8006d4c <main+0x370>
		   {
			   (void)snprintf(term_output, 256, TERM_STATUS_OUTPUT_FORMAT, status_A_V);
 8006d22:	4b18      	ldr	r3, [pc, #96]	@ (8006d84 <main+0x3a8>)
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	f107 008c 	add.w	r0, r7, #140	@ 0x8c
 8006d2a:	4a17      	ldr	r2, [pc, #92]	@ (8006d88 <main+0x3ac>)
 8006d2c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006d30:	f00a fd14 	bl	801175c <sniprintf>
			   CDC_Transmit_FS(term_output, strlen(term_output));
 8006d34:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7f9 fa5b 	bl	80001f4 <strlen>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8006d44:	4611      	mov	r1, r2
 8006d46:	4618      	mov	r0, r3
 8006d48:	f00a f824 	bl	8010d94 <CDC_Transmit_FS>
		   }
   	   else
   	   {

   	   }
   	   usb_received_len = 0;
 8006d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8006d8c <main+0x3b0>)
 8006d4e:	2200      	movs	r2, #0
 8006d50:	601a      	str	r2, [r3, #0]
   	   memset(usb_term_buffer, 0, sizeof(usb_term_buffer));
 8006d52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d56:	2100      	movs	r1, #0
 8006d58:	4809      	ldr	r0, [pc, #36]	@ (8006d80 <main+0x3a4>)
 8006d5a:	f00a fd33 	bl	80117c4 <memset>
      }

   VL53L0X_Error st = VL53L0X_PerformSingleRangingMeasurement(Dev, &RangingData);
 8006d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8006d90 <main+0x3b4>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	490c      	ldr	r1, [pc, #48]	@ (8006d94 <main+0x3b8>)
 8006d64:	4618      	mov	r0, r3
 8006d66:	f7fb fba3 	bl	80024b0 <VL53L0X_PerformSingleRangingMeasurement>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	f887 318f 	strb.w	r3, [r7, #399]	@ 0x18f
   else
   {

   }

   LCD_Update();
 8006d70:	f7ff fd1e 	bl	80067b0 <LCD_Update>
   HAL_Delay(100);
 8006d74:	2064      	movs	r0, #100	@ 0x64
 8006d76:	f000 fd01 	bl	800777c <HAL_Delay>
  {
 8006d7a:	e6b4      	b.n	8006ae6 <main+0x10a>
 8006d7c:	08012284 	.word	0x08012284
 8006d80:	20000474 	.word	0x20000474
 8006d84:	200002c1 	.word	0x200002c1
 8006d88:	08012290 	.word	0x08012290
 8006d8c:	20000674 	.word	0x20000674
 8006d90:	200002c4 	.word	0x200002c4
 8006d94:	20000a14 	.word	0x20000a14

08006d98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b094      	sub	sp, #80	@ 0x50
 8006d9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006d9e:	f107 0320 	add.w	r3, r7, #32
 8006da2:	2230      	movs	r2, #48	@ 0x30
 8006da4:	2100      	movs	r1, #0
 8006da6:	4618      	mov	r0, r3
 8006da8:	f00a fd0c 	bl	80117c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006dac:	f107 030c 	add.w	r3, r7, #12
 8006db0:	2200      	movs	r2, #0
 8006db2:	601a      	str	r2, [r3, #0]
 8006db4:	605a      	str	r2, [r3, #4]
 8006db6:	609a      	str	r2, [r3, #8]
 8006db8:	60da      	str	r2, [r3, #12]
 8006dba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	60bb      	str	r3, [r7, #8]
 8006dc0:	4b27      	ldr	r3, [pc, #156]	@ (8006e60 <SystemClock_Config+0xc8>)
 8006dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dc4:	4a26      	ldr	r2, [pc, #152]	@ (8006e60 <SystemClock_Config+0xc8>)
 8006dc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006dca:	6413      	str	r3, [r2, #64]	@ 0x40
 8006dcc:	4b24      	ldr	r3, [pc, #144]	@ (8006e60 <SystemClock_Config+0xc8>)
 8006dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dd4:	60bb      	str	r3, [r7, #8]
 8006dd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006dd8:	2300      	movs	r3, #0
 8006dda:	607b      	str	r3, [r7, #4]
 8006ddc:	4b21      	ldr	r3, [pc, #132]	@ (8006e64 <SystemClock_Config+0xcc>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a20      	ldr	r2, [pc, #128]	@ (8006e64 <SystemClock_Config+0xcc>)
 8006de2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006de6:	6013      	str	r3, [r2, #0]
 8006de8:	4b1e      	ldr	r3, [pc, #120]	@ (8006e64 <SystemClock_Config+0xcc>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006df0:	607b      	str	r3, [r7, #4]
 8006df2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006df4:	2301      	movs	r3, #1
 8006df6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006df8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006dfc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006dfe:	2302      	movs	r3, #2
 8006e00:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006e02:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8006e08:	2304      	movs	r3, #4
 8006e0a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8006e0c:	2348      	movs	r3, #72	@ 0x48
 8006e0e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006e10:	2302      	movs	r3, #2
 8006e12:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8006e14:	2303      	movs	r3, #3
 8006e16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006e18:	f107 0320 	add.w	r3, r7, #32
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f004 fa17 	bl	800b250 <HAL_RCC_OscConfig>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d001      	beq.n	8006e2c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8006e28:	f000 f9e2 	bl	80071f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006e2c:	230f      	movs	r3, #15
 8006e2e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006e30:	2302      	movs	r3, #2
 8006e32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006e34:	2300      	movs	r3, #0
 8006e36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006e38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006e3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006e42:	f107 030c 	add.w	r3, r7, #12
 8006e46:	2102      	movs	r1, #2
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f004 fc79 	bl	800b740 <HAL_RCC_ClockConfig>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d001      	beq.n	8006e58 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8006e54:	f000 f9cc 	bl	80071f0 <Error_Handler>
  }
}
 8006e58:	bf00      	nop
 8006e5a:	3750      	adds	r7, #80	@ 0x50
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	40023800 	.word	0x40023800
 8006e64:	40007000 	.word	0x40007000

08006e68 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006e6c:	4b12      	ldr	r3, [pc, #72]	@ (8006eb8 <MX_I2C2_Init+0x50>)
 8006e6e:	4a13      	ldr	r2, [pc, #76]	@ (8006ebc <MX_I2C2_Init+0x54>)
 8006e70:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8006e72:	4b11      	ldr	r3, [pc, #68]	@ (8006eb8 <MX_I2C2_Init+0x50>)
 8006e74:	4a12      	ldr	r2, [pc, #72]	@ (8006ec0 <MX_I2C2_Init+0x58>)
 8006e76:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006e78:	4b0f      	ldr	r3, [pc, #60]	@ (8006eb8 <MX_I2C2_Init+0x50>)
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8006e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8006eb8 <MX_I2C2_Init+0x50>)
 8006e80:	2200      	movs	r2, #0
 8006e82:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006e84:	4b0c      	ldr	r3, [pc, #48]	@ (8006eb8 <MX_I2C2_Init+0x50>)
 8006e86:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006e8a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8006eb8 <MX_I2C2_Init+0x50>)
 8006e8e:	2200      	movs	r2, #0
 8006e90:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8006e92:	4b09      	ldr	r3, [pc, #36]	@ (8006eb8 <MX_I2C2_Init+0x50>)
 8006e94:	2200      	movs	r2, #0
 8006e96:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006e98:	4b07      	ldr	r3, [pc, #28]	@ (8006eb8 <MX_I2C2_Init+0x50>)
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006e9e:	4b06      	ldr	r3, [pc, #24]	@ (8006eb8 <MX_I2C2_Init+0x50>)
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006ea4:	4804      	ldr	r0, [pc, #16]	@ (8006eb8 <MX_I2C2_Init+0x50>)
 8006ea6:	f001 fb3f 	bl	8008528 <HAL_I2C_Init>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d001      	beq.n	8006eb4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8006eb0:	f000 f99e 	bl	80071f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006eb4:	bf00      	nop
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	200008c0 	.word	0x200008c0
 8006ebc:	40005800 	.word	0x40005800
 8006ec0:	000186a0 	.word	0x000186a0

08006ec4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI1_Init(void)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8006ec8:	4b17      	ldr	r3, [pc, #92]	@ (8006f28 <MX_SPI1_Init+0x64>)
 8006eca:	4a18      	ldr	r2, [pc, #96]	@ (8006f2c <MX_SPI1_Init+0x68>)
 8006ecc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006ece:	4b16      	ldr	r3, [pc, #88]	@ (8006f28 <MX_SPI1_Init+0x64>)
 8006ed0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006ed4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006ed6:	4b14      	ldr	r3, [pc, #80]	@ (8006f28 <MX_SPI1_Init+0x64>)
 8006ed8:	2200      	movs	r2, #0
 8006eda:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006edc:	4b12      	ldr	r3, [pc, #72]	@ (8006f28 <MX_SPI1_Init+0x64>)
 8006ede:	2200      	movs	r2, #0
 8006ee0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ee2:	4b11      	ldr	r3, [pc, #68]	@ (8006f28 <MX_SPI1_Init+0x64>)
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8006f28 <MX_SPI1_Init+0x64>)
 8006eea:	2200      	movs	r2, #0
 8006eec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006eee:	4b0e      	ldr	r3, [pc, #56]	@ (8006f28 <MX_SPI1_Init+0x64>)
 8006ef0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ef4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8006ef6:	4b0c      	ldr	r3, [pc, #48]	@ (8006f28 <MX_SPI1_Init+0x64>)
 8006ef8:	2218      	movs	r2, #24
 8006efa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006efc:	4b0a      	ldr	r3, [pc, #40]	@ (8006f28 <MX_SPI1_Init+0x64>)
 8006efe:	2200      	movs	r2, #0
 8006f00:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006f02:	4b09      	ldr	r3, [pc, #36]	@ (8006f28 <MX_SPI1_Init+0x64>)
 8006f04:	2200      	movs	r2, #0
 8006f06:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f08:	4b07      	ldr	r3, [pc, #28]	@ (8006f28 <MX_SPI1_Init+0x64>)
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8006f0e:	4b06      	ldr	r3, [pc, #24]	@ (8006f28 <MX_SPI1_Init+0x64>)
 8006f10:	220a      	movs	r2, #10
 8006f12:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006f14:	4804      	ldr	r0, [pc, #16]	@ (8006f28 <MX_SPI1_Init+0x64>)
 8006f16:	f004 fe33 	bl	800bb80 <HAL_SPI_Init>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d001      	beq.n	8006f24 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8006f20:	f000 f966 	bl	80071f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006f24:	bf00      	nop
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	20000914 	.word	0x20000914
 8006f2c:	40013000 	.word	0x40013000

08006f30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006f34:	4b11      	ldr	r3, [pc, #68]	@ (8006f7c <MX_USART2_UART_Init+0x4c>)
 8006f36:	4a12      	ldr	r2, [pc, #72]	@ (8006f80 <MX_USART2_UART_Init+0x50>)
 8006f38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8006f3a:	4b10      	ldr	r3, [pc, #64]	@ (8006f7c <MX_USART2_UART_Init+0x4c>)
 8006f3c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8006f40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006f42:	4b0e      	ldr	r3, [pc, #56]	@ (8006f7c <MX_USART2_UART_Init+0x4c>)
 8006f44:	2200      	movs	r2, #0
 8006f46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006f48:	4b0c      	ldr	r3, [pc, #48]	@ (8006f7c <MX_USART2_UART_Init+0x4c>)
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8006f7c <MX_USART2_UART_Init+0x4c>)
 8006f50:	2200      	movs	r2, #0
 8006f52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006f54:	4b09      	ldr	r3, [pc, #36]	@ (8006f7c <MX_USART2_UART_Init+0x4c>)
 8006f56:	220c      	movs	r2, #12
 8006f58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006f5a:	4b08      	ldr	r3, [pc, #32]	@ (8006f7c <MX_USART2_UART_Init+0x4c>)
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006f60:	4b06      	ldr	r3, [pc, #24]	@ (8006f7c <MX_USART2_UART_Init+0x4c>)
 8006f62:	2200      	movs	r2, #0
 8006f64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006f66:	4805      	ldr	r0, [pc, #20]	@ (8006f7c <MX_USART2_UART_Init+0x4c>)
 8006f68:	f005 f9c6 	bl	800c2f8 <HAL_UART_Init>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d001      	beq.n	8006f76 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006f72:	f000 f93d 	bl	80071f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006f76:	bf00      	nop
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	2000096c 	.word	0x2000096c
 8006f80:	40004400 	.word	0x40004400

08006f84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	607b      	str	r3, [r7, #4]
 8006f8e:	4b0c      	ldr	r3, [pc, #48]	@ (8006fc0 <MX_DMA_Init+0x3c>)
 8006f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f92:	4a0b      	ldr	r2, [pc, #44]	@ (8006fc0 <MX_DMA_Init+0x3c>)
 8006f94:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006f98:	6313      	str	r3, [r2, #48]	@ 0x30
 8006f9a:	4b09      	ldr	r3, [pc, #36]	@ (8006fc0 <MX_DMA_Init+0x3c>)
 8006f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006fa2:	607b      	str	r3, [r7, #4]
 8006fa4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	2100      	movs	r1, #0
 8006faa:	2010      	movs	r0, #16
 8006fac:	f000 fce5 	bl	800797a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8006fb0:	2010      	movs	r0, #16
 8006fb2:	f000 fcfe 	bl	80079b2 <HAL_NVIC_EnableIRQ>

}
 8006fb6:	bf00      	nop
 8006fb8:	3708      	adds	r7, #8
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop
 8006fc0:	40023800 	.word	0x40023800

08006fc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b08c      	sub	sp, #48	@ 0x30
 8006fc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fca:	f107 031c 	add.w	r3, r7, #28
 8006fce:	2200      	movs	r2, #0
 8006fd0:	601a      	str	r2, [r3, #0]
 8006fd2:	605a      	str	r2, [r3, #4]
 8006fd4:	609a      	str	r2, [r3, #8]
 8006fd6:	60da      	str	r2, [r3, #12]
 8006fd8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006fda:	2300      	movs	r3, #0
 8006fdc:	61bb      	str	r3, [r7, #24]
 8006fde:	4b7e      	ldr	r3, [pc, #504]	@ (80071d8 <MX_GPIO_Init+0x214>)
 8006fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fe2:	4a7d      	ldr	r2, [pc, #500]	@ (80071d8 <MX_GPIO_Init+0x214>)
 8006fe4:	f043 0310 	orr.w	r3, r3, #16
 8006fe8:	6313      	str	r3, [r2, #48]	@ 0x30
 8006fea:	4b7b      	ldr	r3, [pc, #492]	@ (80071d8 <MX_GPIO_Init+0x214>)
 8006fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fee:	f003 0310 	and.w	r3, r3, #16
 8006ff2:	61bb      	str	r3, [r7, #24]
 8006ff4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	617b      	str	r3, [r7, #20]
 8006ffa:	4b77      	ldr	r3, [pc, #476]	@ (80071d8 <MX_GPIO_Init+0x214>)
 8006ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ffe:	4a76      	ldr	r2, [pc, #472]	@ (80071d8 <MX_GPIO_Init+0x214>)
 8007000:	f043 0304 	orr.w	r3, r3, #4
 8007004:	6313      	str	r3, [r2, #48]	@ 0x30
 8007006:	4b74      	ldr	r3, [pc, #464]	@ (80071d8 <MX_GPIO_Init+0x214>)
 8007008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800700a:	f003 0304 	and.w	r3, r3, #4
 800700e:	617b      	str	r3, [r7, #20]
 8007010:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007012:	2300      	movs	r3, #0
 8007014:	613b      	str	r3, [r7, #16]
 8007016:	4b70      	ldr	r3, [pc, #448]	@ (80071d8 <MX_GPIO_Init+0x214>)
 8007018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800701a:	4a6f      	ldr	r2, [pc, #444]	@ (80071d8 <MX_GPIO_Init+0x214>)
 800701c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007020:	6313      	str	r3, [r2, #48]	@ 0x30
 8007022:	4b6d      	ldr	r3, [pc, #436]	@ (80071d8 <MX_GPIO_Init+0x214>)
 8007024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007026:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800702a:	613b      	str	r3, [r7, #16]
 800702c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800702e:	2300      	movs	r3, #0
 8007030:	60fb      	str	r3, [r7, #12]
 8007032:	4b69      	ldr	r3, [pc, #420]	@ (80071d8 <MX_GPIO_Init+0x214>)
 8007034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007036:	4a68      	ldr	r2, [pc, #416]	@ (80071d8 <MX_GPIO_Init+0x214>)
 8007038:	f043 0301 	orr.w	r3, r3, #1
 800703c:	6313      	str	r3, [r2, #48]	@ 0x30
 800703e:	4b66      	ldr	r3, [pc, #408]	@ (80071d8 <MX_GPIO_Init+0x214>)
 8007040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007042:	f003 0301 	and.w	r3, r3, #1
 8007046:	60fb      	str	r3, [r7, #12]
 8007048:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800704a:	2300      	movs	r3, #0
 800704c:	60bb      	str	r3, [r7, #8]
 800704e:	4b62      	ldr	r3, [pc, #392]	@ (80071d8 <MX_GPIO_Init+0x214>)
 8007050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007052:	4a61      	ldr	r2, [pc, #388]	@ (80071d8 <MX_GPIO_Init+0x214>)
 8007054:	f043 0302 	orr.w	r3, r3, #2
 8007058:	6313      	str	r3, [r2, #48]	@ 0x30
 800705a:	4b5f      	ldr	r3, [pc, #380]	@ (80071d8 <MX_GPIO_Init+0x214>)
 800705c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800705e:	f003 0302 	and.w	r3, r3, #2
 8007062:	60bb      	str	r3, [r7, #8]
 8007064:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007066:	2300      	movs	r3, #0
 8007068:	607b      	str	r3, [r7, #4]
 800706a:	4b5b      	ldr	r3, [pc, #364]	@ (80071d8 <MX_GPIO_Init+0x214>)
 800706c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800706e:	4a5a      	ldr	r2, [pc, #360]	@ (80071d8 <MX_GPIO_Init+0x214>)
 8007070:	f043 0308 	orr.w	r3, r3, #8
 8007074:	6313      	str	r3, [r2, #48]	@ 0x30
 8007076:	4b58      	ldr	r3, [pc, #352]	@ (80071d8 <MX_GPIO_Init+0x214>)
 8007078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800707a:	f003 0308 	and.w	r3, r3, #8
 800707e:	607b      	str	r3, [r7, #4]
 8007080:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8007082:	2200      	movs	r2, #0
 8007084:	2108      	movs	r1, #8
 8007086:	4855      	ldr	r0, [pc, #340]	@ (80071dc <MX_GPIO_Init+0x218>)
 8007088:	f001 fa34 	bl	80084f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800708c:	2201      	movs	r2, #1
 800708e:	2101      	movs	r1, #1
 8007090:	4853      	ldr	r0, [pc, #332]	@ (80071e0 <MX_GPIO_Init+0x21c>)
 8007092:	f001 fa2f 	bl	80084f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
 8007096:	2200      	movs	r2, #0
 8007098:	2113      	movs	r1, #19
 800709a:	4852      	ldr	r0, [pc, #328]	@ (80071e4 <MX_GPIO_Init+0x220>)
 800709c:	f001 fa2a 	bl	80084f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80070a0:	2200      	movs	r2, #0
 80070a2:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80070a6:	4850      	ldr	r0, [pc, #320]	@ (80071e8 <MX_GPIO_Init+0x224>)
 80070a8:	f001 fa24 	bl	80084f4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Lidar_xshutdown_GPIO_Port, Lidar_xshutdown_Pin, GPIO_PIN_SET);
 80070ac:	2201      	movs	r2, #1
 80070ae:	2120      	movs	r1, #32
 80070b0:	484e      	ldr	r0, [pc, #312]	@ (80071ec <MX_GPIO_Init+0x228>)
 80070b2:	f001 fa1f 	bl	80084f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80070b6:	2304      	movs	r3, #4
 80070b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80070ba:	2300      	movs	r3, #0
 80070bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070be:	2300      	movs	r3, #0
 80070c0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80070c2:	f107 031c 	add.w	r3, r7, #28
 80070c6:	4619      	mov	r1, r3
 80070c8:	4844      	ldr	r0, [pc, #272]	@ (80071dc <MX_GPIO_Init+0x218>)
 80070ca:	f001 f88f 	bl	80081ec <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80070ce:	2308      	movs	r3, #8
 80070d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80070d2:	2301      	movs	r3, #1
 80070d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070d6:	2300      	movs	r3, #0
 80070d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070da:	2300      	movs	r3, #0
 80070dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80070de:	f107 031c 	add.w	r3, r7, #28
 80070e2:	4619      	mov	r1, r3
 80070e4:	483d      	ldr	r0, [pc, #244]	@ (80071dc <MX_GPIO_Init+0x218>)
 80070e6:	f001 f881 	bl	80081ec <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80070ea:	2332      	movs	r3, #50	@ 0x32
 80070ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80070ee:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80070f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070f4:	2300      	movs	r3, #0
 80070f6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80070f8:	f107 031c 	add.w	r3, r7, #28
 80070fc:	4619      	mov	r1, r3
 80070fe:	4837      	ldr	r0, [pc, #220]	@ (80071dc <MX_GPIO_Init+0x218>)
 8007100:	f001 f874 	bl	80081ec <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8007104:	2301      	movs	r3, #1
 8007106:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007108:	2301      	movs	r3, #1
 800710a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800710c:	2300      	movs	r3, #0
 800710e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007110:	2300      	movs	r3, #0
 8007112:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8007114:	f107 031c 	add.w	r3, r7, #28
 8007118:	4619      	mov	r1, r3
 800711a:	4831      	ldr	r0, [pc, #196]	@ (80071e0 <MX_GPIO_Init+0x21c>)
 800711c:	f001 f866 	bl	80081ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8007120:	2308      	movs	r3, #8
 8007122:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007124:	2302      	movs	r3, #2
 8007126:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007128:	2300      	movs	r3, #0
 800712a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800712c:	2300      	movs	r3, #0
 800712e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007130:	2305      	movs	r3, #5
 8007132:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8007134:	f107 031c 	add.w	r3, r7, #28
 8007138:	4619      	mov	r1, r3
 800713a:	4829      	ldr	r0, [pc, #164]	@ (80071e0 <MX_GPIO_Init+0x21c>)
 800713c:	f001 f856 	bl	80081ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8007140:	2313      	movs	r3, #19
 8007142:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007144:	2301      	movs	r3, #1
 8007146:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007148:	2300      	movs	r3, #0
 800714a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800714c:	2302      	movs	r3, #2
 800714e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007150:	f107 031c 	add.w	r3, r7, #28
 8007154:	4619      	mov	r1, r3
 8007156:	4823      	ldr	r0, [pc, #140]	@ (80071e4 <MX_GPIO_Init+0x220>)
 8007158:	f001 f848 	bl	80081ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800715c:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8007160:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007162:	2301      	movs	r3, #1
 8007164:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007166:	2300      	movs	r3, #0
 8007168:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800716a:	2300      	movs	r3, #0
 800716c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800716e:	f107 031c 	add.w	r3, r7, #28
 8007172:	4619      	mov	r1, r3
 8007174:	481c      	ldr	r0, [pc, #112]	@ (80071e8 <MX_GPIO_Init+0x224>)
 8007176:	f001 f839 	bl	80081ec <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800717a:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 800717e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007180:	2302      	movs	r3, #2
 8007182:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007184:	2300      	movs	r3, #0
 8007186:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007188:	2300      	movs	r3, #0
 800718a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800718c:	2306      	movs	r3, #6
 800718e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007190:	f107 031c 	add.w	r3, r7, #28
 8007194:	4619      	mov	r1, r3
 8007196:	4812      	ldr	r0, [pc, #72]	@ (80071e0 <MX_GPIO_Init+0x21c>)
 8007198:	f001 f828 	bl	80081ec <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800719c:	2320      	movs	r3, #32
 800719e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80071a0:	2300      	movs	r3, #0
 80071a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071a4:	2300      	movs	r3, #0
 80071a6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80071a8:	f107 031c 	add.w	r3, r7, #28
 80071ac:	4619      	mov	r1, r3
 80071ae:	480e      	ldr	r0, [pc, #56]	@ (80071e8 <MX_GPIO_Init+0x224>)
 80071b0:	f001 f81c 	bl	80081ec <HAL_GPIO_Init>

  /*Configure GPIO pin : Lidar_xshutdown_Pin */
  GPIO_InitStruct.Pin = Lidar_xshutdown_Pin;
 80071b4:	2320      	movs	r3, #32
 80071b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80071b8:	2301      	movs	r3, #1
 80071ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071bc:	2300      	movs	r3, #0
 80071be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071c0:	2300      	movs	r3, #0
 80071c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Lidar_xshutdown_GPIO_Port, &GPIO_InitStruct);
 80071c4:	f107 031c 	add.w	r3, r7, #28
 80071c8:	4619      	mov	r1, r3
 80071ca:	4808      	ldr	r0, [pc, #32]	@ (80071ec <MX_GPIO_Init+0x228>)
 80071cc:	f001 f80e 	bl	80081ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80071d0:	bf00      	nop
 80071d2:	3730      	adds	r7, #48	@ 0x30
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}
 80071d8:	40023800 	.word	0x40023800
 80071dc:	40021000 	.word	0x40021000
 80071e0:	40020800 	.word	0x40020800
 80071e4:	40020000 	.word	0x40020000
 80071e8:	40020c00 	.word	0x40020c00
 80071ec:	40020400 	.word	0x40020400

080071f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80071f0:	b480      	push	{r7}
 80071f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80071f4:	b672      	cpsid	i
}
 80071f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80071f8:	bf00      	nop
 80071fa:	e7fd      	b.n	80071f8 <Error_Handler+0x8>

080071fc <xorshift32>:
#include "stm32f4xx_hal.h"
#include "rng.h"

static uint32_t rng_state = 0x12345678;

uint32_t xorshift32(void) {
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
    uint32_t x = rng_state;
 8007202:	4b0e      	ldr	r3, [pc, #56]	@ (800723c <xorshift32+0x40>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	607b      	str	r3, [r7, #4]
    x ^= x << 13;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	035b      	lsls	r3, r3, #13
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	4053      	eors	r3, r2
 8007210:	607b      	str	r3, [r7, #4]
    x ^= x >> 17;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	0c5b      	lsrs	r3, r3, #17
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	4053      	eors	r3, r2
 800721a:	607b      	str	r3, [r7, #4]
    x ^= x << 5;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	015b      	lsls	r3, r3, #5
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	4053      	eors	r3, r2
 8007224:	607b      	str	r3, [r7, #4]
    rng_state = x;
 8007226:	4a05      	ldr	r2, [pc, #20]	@ (800723c <xorshift32+0x40>)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6013      	str	r3, [r2, #0]
    return x;
 800722c:	687b      	ldr	r3, [r7, #4]
}
 800722e:	4618      	mov	r0, r3
 8007230:	370c      	adds	r7, #12
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr
 800723a:	bf00      	nop
 800723c:	200002c8 	.word	0x200002c8

08007240 <rng_seed>:

void rng_seed(uint32_t seed) {
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
    rng_state = seed;
 8007248:	4a04      	ldr	r2, [pc, #16]	@ (800725c <rng_seed+0x1c>)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6013      	str	r3, [r2, #0]
}
 800724e:	bf00      	nop
 8007250:	370c      	adds	r7, #12
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	200002c8 	.word	0x200002c8

08007260 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007266:	2300      	movs	r3, #0
 8007268:	607b      	str	r3, [r7, #4]
 800726a:	4b10      	ldr	r3, [pc, #64]	@ (80072ac <HAL_MspInit+0x4c>)
 800726c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800726e:	4a0f      	ldr	r2, [pc, #60]	@ (80072ac <HAL_MspInit+0x4c>)
 8007270:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007274:	6453      	str	r3, [r2, #68]	@ 0x44
 8007276:	4b0d      	ldr	r3, [pc, #52]	@ (80072ac <HAL_MspInit+0x4c>)
 8007278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800727a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800727e:	607b      	str	r3, [r7, #4]
 8007280:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007282:	2300      	movs	r3, #0
 8007284:	603b      	str	r3, [r7, #0]
 8007286:	4b09      	ldr	r3, [pc, #36]	@ (80072ac <HAL_MspInit+0x4c>)
 8007288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800728a:	4a08      	ldr	r2, [pc, #32]	@ (80072ac <HAL_MspInit+0x4c>)
 800728c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007290:	6413      	str	r3, [r2, #64]	@ 0x40
 8007292:	4b06      	ldr	r3, [pc, #24]	@ (80072ac <HAL_MspInit+0x4c>)
 8007294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007296:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800729a:	603b      	str	r3, [r7, #0]
 800729c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800729e:	2007      	movs	r0, #7
 80072a0:	f000 fb60 	bl	8007964 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80072a4:	bf00      	nop
 80072a6:	3708      	adds	r7, #8
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}
 80072ac:	40023800 	.word	0x40023800

080072b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b08a      	sub	sp, #40	@ 0x28
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072b8:	f107 0314 	add.w	r3, r7, #20
 80072bc:	2200      	movs	r2, #0
 80072be:	601a      	str	r2, [r3, #0]
 80072c0:	605a      	str	r2, [r3, #4]
 80072c2:	609a      	str	r2, [r3, #8]
 80072c4:	60da      	str	r2, [r3, #12]
 80072c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a21      	ldr	r2, [pc, #132]	@ (8007354 <HAL_I2C_MspInit+0xa4>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d13c      	bne.n	800734c <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80072d2:	2300      	movs	r3, #0
 80072d4:	613b      	str	r3, [r7, #16]
 80072d6:	4b20      	ldr	r3, [pc, #128]	@ (8007358 <HAL_I2C_MspInit+0xa8>)
 80072d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072da:	4a1f      	ldr	r2, [pc, #124]	@ (8007358 <HAL_I2C_MspInit+0xa8>)
 80072dc:	f043 0302 	orr.w	r3, r3, #2
 80072e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80072e2:	4b1d      	ldr	r3, [pc, #116]	@ (8007358 <HAL_I2C_MspInit+0xa8>)
 80072e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072e6:	f003 0302 	and.w	r3, r3, #2
 80072ea:	613b      	str	r3, [r7, #16]
 80072ec:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80072ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80072f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80072f4:	2312      	movs	r3, #18
 80072f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80072f8:	2301      	movs	r3, #1
 80072fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072fc:	2300      	movs	r3, #0
 80072fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8007300:	2304      	movs	r3, #4
 8007302:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007304:	f107 0314 	add.w	r3, r7, #20
 8007308:	4619      	mov	r1, r3
 800730a:	4814      	ldr	r0, [pc, #80]	@ (800735c <HAL_I2C_MspInit+0xac>)
 800730c:	f000 ff6e 	bl	80081ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007310:	2308      	movs	r3, #8
 8007312:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007314:	2312      	movs	r3, #18
 8007316:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007318:	2301      	movs	r3, #1
 800731a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800731c:	2300      	movs	r3, #0
 800731e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8007320:	2309      	movs	r3, #9
 8007322:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007324:	f107 0314 	add.w	r3, r7, #20
 8007328:	4619      	mov	r1, r3
 800732a:	480c      	ldr	r0, [pc, #48]	@ (800735c <HAL_I2C_MspInit+0xac>)
 800732c:	f000 ff5e 	bl	80081ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007330:	2300      	movs	r3, #0
 8007332:	60fb      	str	r3, [r7, #12]
 8007334:	4b08      	ldr	r3, [pc, #32]	@ (8007358 <HAL_I2C_MspInit+0xa8>)
 8007336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007338:	4a07      	ldr	r2, [pc, #28]	@ (8007358 <HAL_I2C_MspInit+0xa8>)
 800733a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800733e:	6413      	str	r3, [r2, #64]	@ 0x40
 8007340:	4b05      	ldr	r3, [pc, #20]	@ (8007358 <HAL_I2C_MspInit+0xa8>)
 8007342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007344:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007348:	60fb      	str	r3, [r7, #12]
 800734a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 800734c:	bf00      	nop
 800734e:	3728      	adds	r7, #40	@ 0x28
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}
 8007354:	40005800 	.word	0x40005800
 8007358:	40023800 	.word	0x40023800
 800735c:	40020400 	.word	0x40020400

08007360 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b08a      	sub	sp, #40	@ 0x28
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007368:	f107 0314 	add.w	r3, r7, #20
 800736c:	2200      	movs	r2, #0
 800736e:	601a      	str	r2, [r3, #0]
 8007370:	605a      	str	r2, [r3, #4]
 8007372:	609a      	str	r2, [r3, #8]
 8007374:	60da      	str	r2, [r3, #12]
 8007376:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a1d      	ldr	r2, [pc, #116]	@ (80073f4 <HAL_SPI_MspInit+0x94>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d133      	bne.n	80073ea <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007382:	2300      	movs	r3, #0
 8007384:	613b      	str	r3, [r7, #16]
 8007386:	4b1c      	ldr	r3, [pc, #112]	@ (80073f8 <HAL_SPI_MspInit+0x98>)
 8007388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800738a:	4a1b      	ldr	r2, [pc, #108]	@ (80073f8 <HAL_SPI_MspInit+0x98>)
 800738c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007390:	6453      	str	r3, [r2, #68]	@ 0x44
 8007392:	4b19      	ldr	r3, [pc, #100]	@ (80073f8 <HAL_SPI_MspInit+0x98>)
 8007394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007396:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800739a:	613b      	str	r3, [r7, #16]
 800739c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800739e:	2300      	movs	r3, #0
 80073a0:	60fb      	str	r3, [r7, #12]
 80073a2:	4b15      	ldr	r3, [pc, #84]	@ (80073f8 <HAL_SPI_MspInit+0x98>)
 80073a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073a6:	4a14      	ldr	r2, [pc, #80]	@ (80073f8 <HAL_SPI_MspInit+0x98>)
 80073a8:	f043 0301 	orr.w	r3, r3, #1
 80073ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80073ae:	4b12      	ldr	r3, [pc, #72]	@ (80073f8 <HAL_SPI_MspInit+0x98>)
 80073b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073b2:	f003 0301 	and.w	r3, r3, #1
 80073b6:	60fb      	str	r3, [r7, #12]
 80073b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80073ba:	23e0      	movs	r3, #224	@ 0xe0
 80073bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073be:	2302      	movs	r3, #2
 80073c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073c2:	2300      	movs	r3, #0
 80073c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073c6:	2303      	movs	r3, #3
 80073c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80073ca:	2305      	movs	r3, #5
 80073cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80073ce:	f107 0314 	add.w	r3, r7, #20
 80073d2:	4619      	mov	r1, r3
 80073d4:	4809      	ldr	r0, [pc, #36]	@ (80073fc <HAL_SPI_MspInit+0x9c>)
 80073d6:	f000 ff09 	bl	80081ec <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80073da:	2200      	movs	r2, #0
 80073dc:	2100      	movs	r1, #0
 80073de:	2023      	movs	r0, #35	@ 0x23
 80073e0:	f000 facb 	bl	800797a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80073e4:	2023      	movs	r0, #35	@ 0x23
 80073e6:	f000 fae4 	bl	80079b2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80073ea:	bf00      	nop
 80073ec:	3728      	adds	r7, #40	@ 0x28
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	bf00      	nop
 80073f4:	40013000 	.word	0x40013000
 80073f8:	40023800 	.word	0x40023800
 80073fc:	40020000 	.word	0x40020000

08007400 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b08a      	sub	sp, #40	@ 0x28
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007408:	f107 0314 	add.w	r3, r7, #20
 800740c:	2200      	movs	r2, #0
 800740e:	601a      	str	r2, [r3, #0]
 8007410:	605a      	str	r2, [r3, #4]
 8007412:	609a      	str	r2, [r3, #8]
 8007414:	60da      	str	r2, [r3, #12]
 8007416:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a34      	ldr	r2, [pc, #208]	@ (80074f0 <HAL_UART_MspInit+0xf0>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d162      	bne.n	80074e8 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007422:	2300      	movs	r3, #0
 8007424:	613b      	str	r3, [r7, #16]
 8007426:	4b33      	ldr	r3, [pc, #204]	@ (80074f4 <HAL_UART_MspInit+0xf4>)
 8007428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800742a:	4a32      	ldr	r2, [pc, #200]	@ (80074f4 <HAL_UART_MspInit+0xf4>)
 800742c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007430:	6413      	str	r3, [r2, #64]	@ 0x40
 8007432:	4b30      	ldr	r3, [pc, #192]	@ (80074f4 <HAL_UART_MspInit+0xf4>)
 8007434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800743a:	613b      	str	r3, [r7, #16]
 800743c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800743e:	2300      	movs	r3, #0
 8007440:	60fb      	str	r3, [r7, #12]
 8007442:	4b2c      	ldr	r3, [pc, #176]	@ (80074f4 <HAL_UART_MspInit+0xf4>)
 8007444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007446:	4a2b      	ldr	r2, [pc, #172]	@ (80074f4 <HAL_UART_MspInit+0xf4>)
 8007448:	f043 0301 	orr.w	r3, r3, #1
 800744c:	6313      	str	r3, [r2, #48]	@ 0x30
 800744e:	4b29      	ldr	r3, [pc, #164]	@ (80074f4 <HAL_UART_MspInit+0xf4>)
 8007450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007452:	f003 0301 	and.w	r3, r3, #1
 8007456:	60fb      	str	r3, [r7, #12]
 8007458:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800745a:	230c      	movs	r3, #12
 800745c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800745e:	2302      	movs	r3, #2
 8007460:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007462:	2300      	movs	r3, #0
 8007464:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007466:	2303      	movs	r3, #3
 8007468:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800746a:	2307      	movs	r3, #7
 800746c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800746e:	f107 0314 	add.w	r3, r7, #20
 8007472:	4619      	mov	r1, r3
 8007474:	4820      	ldr	r0, [pc, #128]	@ (80074f8 <HAL_UART_MspInit+0xf8>)
 8007476:	f000 feb9 	bl	80081ec <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800747a:	4b20      	ldr	r3, [pc, #128]	@ (80074fc <HAL_UART_MspInit+0xfc>)
 800747c:	4a20      	ldr	r2, [pc, #128]	@ (8007500 <HAL_UART_MspInit+0x100>)
 800747e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8007480:	4b1e      	ldr	r3, [pc, #120]	@ (80074fc <HAL_UART_MspInit+0xfc>)
 8007482:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8007486:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007488:	4b1c      	ldr	r3, [pc, #112]	@ (80074fc <HAL_UART_MspInit+0xfc>)
 800748a:	2200      	movs	r2, #0
 800748c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800748e:	4b1b      	ldr	r3, [pc, #108]	@ (80074fc <HAL_UART_MspInit+0xfc>)
 8007490:	2200      	movs	r2, #0
 8007492:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007494:	4b19      	ldr	r3, [pc, #100]	@ (80074fc <HAL_UART_MspInit+0xfc>)
 8007496:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800749a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800749c:	4b17      	ldr	r3, [pc, #92]	@ (80074fc <HAL_UART_MspInit+0xfc>)
 800749e:	2200      	movs	r2, #0
 80074a0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80074a2:	4b16      	ldr	r3, [pc, #88]	@ (80074fc <HAL_UART_MspInit+0xfc>)
 80074a4:	2200      	movs	r2, #0
 80074a6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80074a8:	4b14      	ldr	r3, [pc, #80]	@ (80074fc <HAL_UART_MspInit+0xfc>)
 80074aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80074ae:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80074b0:	4b12      	ldr	r3, [pc, #72]	@ (80074fc <HAL_UART_MspInit+0xfc>)
 80074b2:	2200      	movs	r2, #0
 80074b4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80074b6:	4b11      	ldr	r3, [pc, #68]	@ (80074fc <HAL_UART_MspInit+0xfc>)
 80074b8:	2200      	movs	r2, #0
 80074ba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80074bc:	480f      	ldr	r0, [pc, #60]	@ (80074fc <HAL_UART_MspInit+0xfc>)
 80074be:	f000 fa93 	bl	80079e8 <HAL_DMA_Init>
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d001      	beq.n	80074cc <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80074c8:	f7ff fe92 	bl	80071f0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	4a0b      	ldr	r2, [pc, #44]	@ (80074fc <HAL_UART_MspInit+0xfc>)
 80074d0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80074d2:	4a0a      	ldr	r2, [pc, #40]	@ (80074fc <HAL_UART_MspInit+0xfc>)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80074d8:	2200      	movs	r2, #0
 80074da:	2100      	movs	r1, #0
 80074dc:	2026      	movs	r0, #38	@ 0x26
 80074de:	f000 fa4c 	bl	800797a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80074e2:	2026      	movs	r0, #38	@ 0x26
 80074e4:	f000 fa65 	bl	80079b2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80074e8:	bf00      	nop
 80074ea:	3728      	adds	r7, #40	@ 0x28
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}
 80074f0:	40004400 	.word	0x40004400
 80074f4:	40023800 	.word	0x40023800
 80074f8:	40020000 	.word	0x40020000
 80074fc:	200009b4 	.word	0x200009b4
 8007500:	40026088 	.word	0x40026088

08007504 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007504:	b480      	push	{r7}
 8007506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007508:	bf00      	nop
 800750a:	e7fd      	b.n	8007508 <NMI_Handler+0x4>

0800750c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800750c:	b480      	push	{r7}
 800750e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007510:	bf00      	nop
 8007512:	e7fd      	b.n	8007510 <HardFault_Handler+0x4>

08007514 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007514:	b480      	push	{r7}
 8007516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007518:	bf00      	nop
 800751a:	e7fd      	b.n	8007518 <MemManage_Handler+0x4>

0800751c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800751c:	b480      	push	{r7}
 800751e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007520:	bf00      	nop
 8007522:	e7fd      	b.n	8007520 <BusFault_Handler+0x4>

08007524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007524:	b480      	push	{r7}
 8007526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007528:	bf00      	nop
 800752a:	e7fd      	b.n	8007528 <UsageFault_Handler+0x4>

0800752c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800752c:	b480      	push	{r7}
 800752e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007530:	bf00      	nop
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr

0800753a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800753a:	b480      	push	{r7}
 800753c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800753e:	bf00      	nop
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007548:	b480      	push	{r7}
 800754a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800754c:	bf00      	nop
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr

08007556 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007556:	b580      	push	{r7, lr}
 8007558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800755a:	f000 f8ef 	bl	800773c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800755e:	bf00      	nop
 8007560:	bd80      	pop	{r7, pc}
	...

08007564 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8007568:	4802      	ldr	r0, [pc, #8]	@ (8007574 <DMA1_Stream5_IRQHandler+0x10>)
 800756a:	f000 fbd5 	bl	8007d18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800756e:	bf00      	nop
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop
 8007574:	200009b4 	.word	0x200009b4

08007578 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800757c:	4802      	ldr	r0, [pc, #8]	@ (8007588 <SPI1_IRQHandler+0x10>)
 800757e:	f004 fccd 	bl	800bf1c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8007582:	bf00      	nop
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	20000914 	.word	0x20000914

0800758c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8007590:	4802      	ldr	r0, [pc, #8]	@ (800759c <USART2_IRQHandler+0x10>)
 8007592:	f004 ff5b 	bl	800c44c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8007596:	bf00      	nop
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	2000096c 	.word	0x2000096c

080075a0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80075a4:	4802      	ldr	r0, [pc, #8]	@ (80075b0 <OTG_FS_IRQHandler+0x10>)
 80075a6:	f002 fd45 	bl	800a034 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80075aa:	bf00      	nop
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	20004f50 	.word	0x20004f50

080075b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b086      	sub	sp, #24
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80075bc:	4a14      	ldr	r2, [pc, #80]	@ (8007610 <_sbrk+0x5c>)
 80075be:	4b15      	ldr	r3, [pc, #84]	@ (8007614 <_sbrk+0x60>)
 80075c0:	1ad3      	subs	r3, r2, r3
 80075c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80075c8:	4b13      	ldr	r3, [pc, #76]	@ (8007618 <_sbrk+0x64>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d102      	bne.n	80075d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80075d0:	4b11      	ldr	r3, [pc, #68]	@ (8007618 <_sbrk+0x64>)
 80075d2:	4a12      	ldr	r2, [pc, #72]	@ (800761c <_sbrk+0x68>)
 80075d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80075d6:	4b10      	ldr	r3, [pc, #64]	@ (8007618 <_sbrk+0x64>)
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4413      	add	r3, r2
 80075de:	693a      	ldr	r2, [r7, #16]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d207      	bcs.n	80075f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80075e4:	f00a f91a 	bl	801181c <__errno>
 80075e8:	4603      	mov	r3, r0
 80075ea:	220c      	movs	r2, #12
 80075ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80075ee:	f04f 33ff 	mov.w	r3, #4294967295
 80075f2:	e009      	b.n	8007608 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80075f4:	4b08      	ldr	r3, [pc, #32]	@ (8007618 <_sbrk+0x64>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80075fa:	4b07      	ldr	r3, [pc, #28]	@ (8007618 <_sbrk+0x64>)
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	4413      	add	r3, r2
 8007602:	4a05      	ldr	r2, [pc, #20]	@ (8007618 <_sbrk+0x64>)
 8007604:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007606:	68fb      	ldr	r3, [r7, #12]
}
 8007608:	4618      	mov	r0, r3
 800760a:	3718      	adds	r7, #24
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}
 8007610:	20020000 	.word	0x20020000
 8007614:	00000400 	.word	0x00000400
 8007618:	20003a68 	.word	0x20003a68
 800761c:	200057a0 	.word	0x200057a0

08007620 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007620:	b480      	push	{r7}
 8007622:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007624:	4b06      	ldr	r3, [pc, #24]	@ (8007640 <SystemInit+0x20>)
 8007626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800762a:	4a05      	ldr	r2, [pc, #20]	@ (8007640 <SystemInit+0x20>)
 800762c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007630:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007634:	bf00      	nop
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr
 800763e:	bf00      	nop
 8007640:	e000ed00 	.word	0xe000ed00

08007644 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8007644:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800767c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8007648:	f7ff ffea 	bl	8007620 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800764c:	480c      	ldr	r0, [pc, #48]	@ (8007680 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800764e:	490d      	ldr	r1, [pc, #52]	@ (8007684 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007650:	4a0d      	ldr	r2, [pc, #52]	@ (8007688 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007652:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007654:	e002      	b.n	800765c <LoopCopyDataInit>

08007656 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007656:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007658:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800765a:	3304      	adds	r3, #4

0800765c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800765c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800765e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007660:	d3f9      	bcc.n	8007656 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007662:	4a0a      	ldr	r2, [pc, #40]	@ (800768c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007664:	4c0a      	ldr	r4, [pc, #40]	@ (8007690 <LoopFillZerobss+0x22>)
  movs r3, #0
 8007666:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007668:	e001      	b.n	800766e <LoopFillZerobss>

0800766a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800766a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800766c:	3204      	adds	r2, #4

0800766e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800766e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007670:	d3fb      	bcc.n	800766a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007672:	f00a f8d9 	bl	8011828 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007676:	f7ff f9b1 	bl	80069dc <main>
  bx  lr    
 800767a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800767c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007680:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007684:	20000418 	.word	0x20000418
  ldr r2, =_sidata
 8007688:	0801268c 	.word	0x0801268c
  ldr r2, =_sbss
 800768c:	20000418 	.word	0x20000418
  ldr r4, =_ebss
 8007690:	2000579c 	.word	0x2000579c

08007694 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007694:	e7fe      	b.n	8007694 <ADC_IRQHandler>
	...

08007698 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800769c:	4b0e      	ldr	r3, [pc, #56]	@ (80076d8 <HAL_Init+0x40>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a0d      	ldr	r2, [pc, #52]	@ (80076d8 <HAL_Init+0x40>)
 80076a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80076a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80076a8:	4b0b      	ldr	r3, [pc, #44]	@ (80076d8 <HAL_Init+0x40>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a0a      	ldr	r2, [pc, #40]	@ (80076d8 <HAL_Init+0x40>)
 80076ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80076b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80076b4:	4b08      	ldr	r3, [pc, #32]	@ (80076d8 <HAL_Init+0x40>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a07      	ldr	r2, [pc, #28]	@ (80076d8 <HAL_Init+0x40>)
 80076ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80076c0:	2003      	movs	r0, #3
 80076c2:	f000 f94f 	bl	8007964 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80076c6:	2000      	movs	r0, #0
 80076c8:	f000 f808 	bl	80076dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80076cc:	f7ff fdc8 	bl	8007260 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop
 80076d8:	40023c00 	.word	0x40023c00

080076dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80076e4:	4b12      	ldr	r3, [pc, #72]	@ (8007730 <HAL_InitTick+0x54>)
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	4b12      	ldr	r3, [pc, #72]	@ (8007734 <HAL_InitTick+0x58>)
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	4619      	mov	r1, r3
 80076ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80076f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80076f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80076fa:	4618      	mov	r0, r3
 80076fc:	f000 f967 	bl	80079ce <HAL_SYSTICK_Config>
 8007700:	4603      	mov	r3, r0
 8007702:	2b00      	cmp	r3, #0
 8007704:	d001      	beq.n	800770a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007706:	2301      	movs	r3, #1
 8007708:	e00e      	b.n	8007728 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2b0f      	cmp	r3, #15
 800770e:	d80a      	bhi.n	8007726 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007710:	2200      	movs	r2, #0
 8007712:	6879      	ldr	r1, [r7, #4]
 8007714:	f04f 30ff 	mov.w	r0, #4294967295
 8007718:	f000 f92f 	bl	800797a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800771c:	4a06      	ldr	r2, [pc, #24]	@ (8007738 <HAL_InitTick+0x5c>)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007722:	2300      	movs	r3, #0
 8007724:	e000      	b.n	8007728 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007726:	2301      	movs	r3, #1
}
 8007728:	4618      	mov	r0, r3
 800772a:	3708      	adds	r7, #8
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}
 8007730:	200002cc 	.word	0x200002cc
 8007734:	200002d4 	.word	0x200002d4
 8007738:	200002d0 	.word	0x200002d0

0800773c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800773c:	b480      	push	{r7}
 800773e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007740:	4b06      	ldr	r3, [pc, #24]	@ (800775c <HAL_IncTick+0x20>)
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	461a      	mov	r2, r3
 8007746:	4b06      	ldr	r3, [pc, #24]	@ (8007760 <HAL_IncTick+0x24>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4413      	add	r3, r2
 800774c:	4a04      	ldr	r2, [pc, #16]	@ (8007760 <HAL_IncTick+0x24>)
 800774e:	6013      	str	r3, [r2, #0]
}
 8007750:	bf00      	nop
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr
 800775a:	bf00      	nop
 800775c:	200002d4 	.word	0x200002d4
 8007760:	20003a6c 	.word	0x20003a6c

08007764 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007764:	b480      	push	{r7}
 8007766:	af00      	add	r7, sp, #0
  return uwTick;
 8007768:	4b03      	ldr	r3, [pc, #12]	@ (8007778 <HAL_GetTick+0x14>)
 800776a:	681b      	ldr	r3, [r3, #0]
}
 800776c:	4618      	mov	r0, r3
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr
 8007776:	bf00      	nop
 8007778:	20003a6c 	.word	0x20003a6c

0800777c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007784:	f7ff ffee 	bl	8007764 <HAL_GetTick>
 8007788:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007794:	d005      	beq.n	80077a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007796:	4b0a      	ldr	r3, [pc, #40]	@ (80077c0 <HAL_Delay+0x44>)
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	461a      	mov	r2, r3
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	4413      	add	r3, r2
 80077a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80077a2:	bf00      	nop
 80077a4:	f7ff ffde 	bl	8007764 <HAL_GetTick>
 80077a8:	4602      	mov	r2, r0
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	1ad3      	subs	r3, r2, r3
 80077ae:	68fa      	ldr	r2, [r7, #12]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d8f7      	bhi.n	80077a4 <HAL_Delay+0x28>
  {
  }
}
 80077b4:	bf00      	nop
 80077b6:	bf00      	nop
 80077b8:	3710      	adds	r7, #16
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	200002d4 	.word	0x200002d4

080077c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b085      	sub	sp, #20
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f003 0307 	and.w	r3, r3, #7
 80077d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80077d4:	4b0c      	ldr	r3, [pc, #48]	@ (8007808 <__NVIC_SetPriorityGrouping+0x44>)
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80077da:	68ba      	ldr	r2, [r7, #8]
 80077dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80077e0:	4013      	ands	r3, r2
 80077e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80077ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80077f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80077f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80077f6:	4a04      	ldr	r2, [pc, #16]	@ (8007808 <__NVIC_SetPriorityGrouping+0x44>)
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	60d3      	str	r3, [r2, #12]
}
 80077fc:	bf00      	nop
 80077fe:	3714      	adds	r7, #20
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr
 8007808:	e000ed00 	.word	0xe000ed00

0800780c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800780c:	b480      	push	{r7}
 800780e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007810:	4b04      	ldr	r3, [pc, #16]	@ (8007824 <__NVIC_GetPriorityGrouping+0x18>)
 8007812:	68db      	ldr	r3, [r3, #12]
 8007814:	0a1b      	lsrs	r3, r3, #8
 8007816:	f003 0307 	and.w	r3, r3, #7
}
 800781a:	4618      	mov	r0, r3
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr
 8007824:	e000ed00 	.word	0xe000ed00

08007828 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007828:	b480      	push	{r7}
 800782a:	b083      	sub	sp, #12
 800782c:	af00      	add	r7, sp, #0
 800782e:	4603      	mov	r3, r0
 8007830:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007836:	2b00      	cmp	r3, #0
 8007838:	db0b      	blt.n	8007852 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800783a:	79fb      	ldrb	r3, [r7, #7]
 800783c:	f003 021f 	and.w	r2, r3, #31
 8007840:	4907      	ldr	r1, [pc, #28]	@ (8007860 <__NVIC_EnableIRQ+0x38>)
 8007842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007846:	095b      	lsrs	r3, r3, #5
 8007848:	2001      	movs	r0, #1
 800784a:	fa00 f202 	lsl.w	r2, r0, r2
 800784e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007852:	bf00      	nop
 8007854:	370c      	adds	r7, #12
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr
 800785e:	bf00      	nop
 8007860:	e000e100 	.word	0xe000e100

08007864 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	4603      	mov	r3, r0
 800786c:	6039      	str	r1, [r7, #0]
 800786e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007874:	2b00      	cmp	r3, #0
 8007876:	db0a      	blt.n	800788e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	b2da      	uxtb	r2, r3
 800787c:	490c      	ldr	r1, [pc, #48]	@ (80078b0 <__NVIC_SetPriority+0x4c>)
 800787e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007882:	0112      	lsls	r2, r2, #4
 8007884:	b2d2      	uxtb	r2, r2
 8007886:	440b      	add	r3, r1
 8007888:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800788c:	e00a      	b.n	80078a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	b2da      	uxtb	r2, r3
 8007892:	4908      	ldr	r1, [pc, #32]	@ (80078b4 <__NVIC_SetPriority+0x50>)
 8007894:	79fb      	ldrb	r3, [r7, #7]
 8007896:	f003 030f 	and.w	r3, r3, #15
 800789a:	3b04      	subs	r3, #4
 800789c:	0112      	lsls	r2, r2, #4
 800789e:	b2d2      	uxtb	r2, r2
 80078a0:	440b      	add	r3, r1
 80078a2:	761a      	strb	r2, [r3, #24]
}
 80078a4:	bf00      	nop
 80078a6:	370c      	adds	r7, #12
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr
 80078b0:	e000e100 	.word	0xe000e100
 80078b4:	e000ed00 	.word	0xe000ed00

080078b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b089      	sub	sp, #36	@ 0x24
 80078bc:	af00      	add	r7, sp, #0
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	60b9      	str	r1, [r7, #8]
 80078c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f003 0307 	and.w	r3, r3, #7
 80078ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	f1c3 0307 	rsb	r3, r3, #7
 80078d2:	2b04      	cmp	r3, #4
 80078d4:	bf28      	it	cs
 80078d6:	2304      	movcs	r3, #4
 80078d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80078da:	69fb      	ldr	r3, [r7, #28]
 80078dc:	3304      	adds	r3, #4
 80078de:	2b06      	cmp	r3, #6
 80078e0:	d902      	bls.n	80078e8 <NVIC_EncodePriority+0x30>
 80078e2:	69fb      	ldr	r3, [r7, #28]
 80078e4:	3b03      	subs	r3, #3
 80078e6:	e000      	b.n	80078ea <NVIC_EncodePriority+0x32>
 80078e8:	2300      	movs	r3, #0
 80078ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80078ec:	f04f 32ff 	mov.w	r2, #4294967295
 80078f0:	69bb      	ldr	r3, [r7, #24]
 80078f2:	fa02 f303 	lsl.w	r3, r2, r3
 80078f6:	43da      	mvns	r2, r3
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	401a      	ands	r2, r3
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007900:	f04f 31ff 	mov.w	r1, #4294967295
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	fa01 f303 	lsl.w	r3, r1, r3
 800790a:	43d9      	mvns	r1, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007910:	4313      	orrs	r3, r2
         );
}
 8007912:	4618      	mov	r0, r3
 8007914:	3724      	adds	r7, #36	@ 0x24
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr
	...

08007920 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b082      	sub	sp, #8
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	3b01      	subs	r3, #1
 800792c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007930:	d301      	bcc.n	8007936 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007932:	2301      	movs	r3, #1
 8007934:	e00f      	b.n	8007956 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007936:	4a0a      	ldr	r2, [pc, #40]	@ (8007960 <SysTick_Config+0x40>)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	3b01      	subs	r3, #1
 800793c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800793e:	210f      	movs	r1, #15
 8007940:	f04f 30ff 	mov.w	r0, #4294967295
 8007944:	f7ff ff8e 	bl	8007864 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007948:	4b05      	ldr	r3, [pc, #20]	@ (8007960 <SysTick_Config+0x40>)
 800794a:	2200      	movs	r2, #0
 800794c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800794e:	4b04      	ldr	r3, [pc, #16]	@ (8007960 <SysTick_Config+0x40>)
 8007950:	2207      	movs	r2, #7
 8007952:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3708      	adds	r7, #8
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	e000e010 	.word	0xe000e010

08007964 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b082      	sub	sp, #8
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f7ff ff29 	bl	80077c4 <__NVIC_SetPriorityGrouping>
}
 8007972:	bf00      	nop
 8007974:	3708      	adds	r7, #8
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}

0800797a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800797a:	b580      	push	{r7, lr}
 800797c:	b086      	sub	sp, #24
 800797e:	af00      	add	r7, sp, #0
 8007980:	4603      	mov	r3, r0
 8007982:	60b9      	str	r1, [r7, #8]
 8007984:	607a      	str	r2, [r7, #4]
 8007986:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007988:	2300      	movs	r3, #0
 800798a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800798c:	f7ff ff3e 	bl	800780c <__NVIC_GetPriorityGrouping>
 8007990:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	68b9      	ldr	r1, [r7, #8]
 8007996:	6978      	ldr	r0, [r7, #20]
 8007998:	f7ff ff8e 	bl	80078b8 <NVIC_EncodePriority>
 800799c:	4602      	mov	r2, r0
 800799e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079a2:	4611      	mov	r1, r2
 80079a4:	4618      	mov	r0, r3
 80079a6:	f7ff ff5d 	bl	8007864 <__NVIC_SetPriority>
}
 80079aa:	bf00      	nop
 80079ac:	3718      	adds	r7, #24
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}

080079b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80079b2:	b580      	push	{r7, lr}
 80079b4:	b082      	sub	sp, #8
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	4603      	mov	r3, r0
 80079ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80079bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079c0:	4618      	mov	r0, r3
 80079c2:	f7ff ff31 	bl	8007828 <__NVIC_EnableIRQ>
}
 80079c6:	bf00      	nop
 80079c8:	3708      	adds	r7, #8
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}

080079ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80079ce:	b580      	push	{r7, lr}
 80079d0:	b082      	sub	sp, #8
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f7ff ffa2 	bl	8007920 <SysTick_Config>
 80079dc:	4603      	mov	r3, r0
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3708      	adds	r7, #8
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
	...

080079e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b086      	sub	sp, #24
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80079f0:	2300      	movs	r3, #0
 80079f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80079f4:	f7ff feb6 	bl	8007764 <HAL_GetTick>
 80079f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d101      	bne.n	8007a04 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007a00:	2301      	movs	r3, #1
 8007a02:	e099      	b.n	8007b38 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2202      	movs	r2, #2
 8007a08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f022 0201 	bic.w	r2, r2, #1
 8007a22:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007a24:	e00f      	b.n	8007a46 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007a26:	f7ff fe9d 	bl	8007764 <HAL_GetTick>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	1ad3      	subs	r3, r2, r3
 8007a30:	2b05      	cmp	r3, #5
 8007a32:	d908      	bls.n	8007a46 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2220      	movs	r2, #32
 8007a38:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2203      	movs	r2, #3
 8007a3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8007a42:	2303      	movs	r3, #3
 8007a44:	e078      	b.n	8007b38 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f003 0301 	and.w	r3, r3, #1
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d1e8      	bne.n	8007a26 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007a5c:	697a      	ldr	r2, [r7, #20]
 8007a5e:	4b38      	ldr	r3, [pc, #224]	@ (8007b40 <HAL_DMA_Init+0x158>)
 8007a60:	4013      	ands	r3, r2
 8007a62:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	685a      	ldr	r2, [r3, #4]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007a72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	691b      	ldr	r3, [r3, #16]
 8007a78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007a7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	699b      	ldr	r3, [r3, #24]
 8007a84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007a8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6a1b      	ldr	r3, [r3, #32]
 8007a90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007a92:	697a      	ldr	r2, [r7, #20]
 8007a94:	4313      	orrs	r3, r2
 8007a96:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a9c:	2b04      	cmp	r3, #4
 8007a9e:	d107      	bne.n	8007ab0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	697a      	ldr	r2, [r7, #20]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	697a      	ldr	r2, [r7, #20]
 8007ab6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	695b      	ldr	r3, [r3, #20]
 8007abe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	f023 0307 	bic.w	r3, r3, #7
 8007ac6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007acc:	697a      	ldr	r2, [r7, #20]
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ad6:	2b04      	cmp	r3, #4
 8007ad8:	d117      	bne.n	8007b0a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ade:	697a      	ldr	r2, [r7, #20]
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d00e      	beq.n	8007b0a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 fb01 	bl	80080f4 <DMA_CheckFifoParam>
 8007af2:	4603      	mov	r3, r0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d008      	beq.n	8007b0a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2240      	movs	r2, #64	@ 0x40
 8007afc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2201      	movs	r2, #1
 8007b02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8007b06:	2301      	movs	r3, #1
 8007b08:	e016      	b.n	8007b38 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	697a      	ldr	r2, [r7, #20]
 8007b10:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 fab8 	bl	8008088 <DMA_CalcBaseAndBitshift>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b20:	223f      	movs	r2, #63	@ 0x3f
 8007b22:	409a      	lsls	r2, r3
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2201      	movs	r2, #1
 8007b32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8007b36:	2300      	movs	r3, #0
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3718      	adds	r7, #24
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}
 8007b40:	f010803f 	.word	0xf010803f

08007b44 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b086      	sub	sp, #24
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	60b9      	str	r1, [r7, #8]
 8007b4e:	607a      	str	r2, [r7, #4]
 8007b50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b52:	2300      	movs	r3, #0
 8007b54:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b5a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d101      	bne.n	8007b6a <HAL_DMA_Start_IT+0x26>
 8007b66:	2302      	movs	r3, #2
 8007b68:	e040      	b.n	8007bec <HAL_DMA_Start_IT+0xa8>
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d12f      	bne.n	8007bde <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2202      	movs	r2, #2
 8007b82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	68b9      	ldr	r1, [r7, #8]
 8007b92:	68f8      	ldr	r0, [r7, #12]
 8007b94:	f000 fa4a 	bl	800802c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b9c:	223f      	movs	r2, #63	@ 0x3f
 8007b9e:	409a      	lsls	r2, r3
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f042 0216 	orr.w	r2, r2, #22
 8007bb2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d007      	beq.n	8007bcc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f042 0208 	orr.w	r2, r2, #8
 8007bca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f042 0201 	orr.w	r2, r2, #1
 8007bda:	601a      	str	r2, [r3, #0]
 8007bdc:	e005      	b.n	8007bea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007be6:	2302      	movs	r3, #2
 8007be8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007bea:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3718      	adds	r7, #24
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c00:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007c02:	f7ff fdaf 	bl	8007764 <HAL_GetTick>
 8007c06:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	2b02      	cmp	r3, #2
 8007c12:	d008      	beq.n	8007c26 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2280      	movs	r2, #128	@ 0x80
 8007c18:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8007c22:	2301      	movs	r3, #1
 8007c24:	e052      	b.n	8007ccc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f022 0216 	bic.w	r2, r2, #22
 8007c34:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	695a      	ldr	r2, [r3, #20]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007c44:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d103      	bne.n	8007c56 <HAL_DMA_Abort+0x62>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d007      	beq.n	8007c66 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f022 0208 	bic.w	r2, r2, #8
 8007c64:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f022 0201 	bic.w	r2, r2, #1
 8007c74:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007c76:	e013      	b.n	8007ca0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007c78:	f7ff fd74 	bl	8007764 <HAL_GetTick>
 8007c7c:	4602      	mov	r2, r0
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	1ad3      	subs	r3, r2, r3
 8007c82:	2b05      	cmp	r3, #5
 8007c84:	d90c      	bls.n	8007ca0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2220      	movs	r2, #32
 8007c8a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2203      	movs	r2, #3
 8007c90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8007c9c:	2303      	movs	r3, #3
 8007c9e:	e015      	b.n	8007ccc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 0301 	and.w	r3, r3, #1
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d1e4      	bne.n	8007c78 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cb2:	223f      	movs	r2, #63	@ 0x3f
 8007cb4:	409a      	lsls	r2, r3
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8007cca:	2300      	movs	r3, #0
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3710      	adds	r7, #16
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	2b02      	cmp	r3, #2
 8007ce6:	d004      	beq.n	8007cf2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2280      	movs	r2, #128	@ 0x80
 8007cec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	e00c      	b.n	8007d0c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2205      	movs	r2, #5
 8007cf6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f022 0201 	bic.w	r2, r2, #1
 8007d08:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007d0a:	2300      	movs	r3, #0
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	370c      	adds	r7, #12
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr

08007d18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b086      	sub	sp, #24
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007d20:	2300      	movs	r3, #0
 8007d22:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007d24:	4b8e      	ldr	r3, [pc, #568]	@ (8007f60 <HAL_DMA_IRQHandler+0x248>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a8e      	ldr	r2, [pc, #568]	@ (8007f64 <HAL_DMA_IRQHandler+0x24c>)
 8007d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d2e:	0a9b      	lsrs	r3, r3, #10
 8007d30:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d36:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d42:	2208      	movs	r2, #8
 8007d44:	409a      	lsls	r2, r3
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	4013      	ands	r3, r2
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d01a      	beq.n	8007d84 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f003 0304 	and.w	r3, r3, #4
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d013      	beq.n	8007d84 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f022 0204 	bic.w	r2, r2, #4
 8007d6a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d70:	2208      	movs	r2, #8
 8007d72:	409a      	lsls	r2, r3
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d7c:	f043 0201 	orr.w	r2, r3, #1
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d88:	2201      	movs	r2, #1
 8007d8a:	409a      	lsls	r2, r3
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	4013      	ands	r3, r2
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d012      	beq.n	8007dba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	695b      	ldr	r3, [r3, #20]
 8007d9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d00b      	beq.n	8007dba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007da6:	2201      	movs	r2, #1
 8007da8:	409a      	lsls	r2, r3
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007db2:	f043 0202 	orr.w	r2, r3, #2
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007dbe:	2204      	movs	r2, #4
 8007dc0:	409a      	lsls	r2, r3
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	4013      	ands	r3, r2
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d012      	beq.n	8007df0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f003 0302 	and.w	r3, r3, #2
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d00b      	beq.n	8007df0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ddc:	2204      	movs	r2, #4
 8007dde:	409a      	lsls	r2, r3
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007de8:	f043 0204 	orr.w	r2, r3, #4
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007df4:	2210      	movs	r2, #16
 8007df6:	409a      	lsls	r2, r3
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	4013      	ands	r3, r2
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d043      	beq.n	8007e88 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f003 0308 	and.w	r3, r3, #8
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d03c      	beq.n	8007e88 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e12:	2210      	movs	r2, #16
 8007e14:	409a      	lsls	r2, r3
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d018      	beq.n	8007e5a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d108      	bne.n	8007e48 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d024      	beq.n	8007e88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	4798      	blx	r3
 8007e46:	e01f      	b.n	8007e88 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d01b      	beq.n	8007e88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	4798      	blx	r3
 8007e58:	e016      	b.n	8007e88 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d107      	bne.n	8007e78 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f022 0208 	bic.w	r2, r2, #8
 8007e76:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d003      	beq.n	8007e88 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e8c:	2220      	movs	r2, #32
 8007e8e:	409a      	lsls	r2, r3
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	4013      	ands	r3, r2
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	f000 808f 	beq.w	8007fb8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f003 0310 	and.w	r3, r3, #16
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	f000 8087 	beq.w	8007fb8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007eae:	2220      	movs	r2, #32
 8007eb0:	409a      	lsls	r2, r3
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	2b05      	cmp	r3, #5
 8007ec0:	d136      	bne.n	8007f30 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f022 0216 	bic.w	r2, r2, #22
 8007ed0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	695a      	ldr	r2, [r3, #20]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007ee0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d103      	bne.n	8007ef2 <HAL_DMA_IRQHandler+0x1da>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d007      	beq.n	8007f02 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f022 0208 	bic.w	r2, r2, #8
 8007f00:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f06:	223f      	movs	r2, #63	@ 0x3f
 8007f08:	409a      	lsls	r2, r3
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2201      	movs	r2, #1
 8007f12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d07e      	beq.n	8008024 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	4798      	blx	r3
        }
        return;
 8007f2e:	e079      	b.n	8008024 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d01d      	beq.n	8007f7a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d10d      	bne.n	8007f68 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d031      	beq.n	8007fb8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	4798      	blx	r3
 8007f5c:	e02c      	b.n	8007fb8 <HAL_DMA_IRQHandler+0x2a0>
 8007f5e:	bf00      	nop
 8007f60:	200002cc 	.word	0x200002cc
 8007f64:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d023      	beq.n	8007fb8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	4798      	blx	r3
 8007f78:	e01e      	b.n	8007fb8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d10f      	bne.n	8007fa8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f022 0210 	bic.w	r2, r2, #16
 8007f96:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d003      	beq.n	8007fb8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d032      	beq.n	8008026 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fc4:	f003 0301 	and.w	r3, r3, #1
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d022      	beq.n	8008012 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2205      	movs	r2, #5
 8007fd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f022 0201 	bic.w	r2, r2, #1
 8007fe2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	60bb      	str	r3, [r7, #8]
 8007fea:	697a      	ldr	r2, [r7, #20]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d307      	bcc.n	8008000 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f003 0301 	and.w	r3, r3, #1
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d1f2      	bne.n	8007fe4 <HAL_DMA_IRQHandler+0x2cc>
 8007ffe:	e000      	b.n	8008002 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008000:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2201      	movs	r2, #1
 8008006:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008016:	2b00      	cmp	r3, #0
 8008018:	d005      	beq.n	8008026 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	4798      	blx	r3
 8008022:	e000      	b.n	8008026 <HAL_DMA_IRQHandler+0x30e>
        return;
 8008024:	bf00      	nop
    }
  }
}
 8008026:	3718      	adds	r7, #24
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}

0800802c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800802c:	b480      	push	{r7}
 800802e:	b085      	sub	sp, #20
 8008030:	af00      	add	r7, sp, #0
 8008032:	60f8      	str	r0, [r7, #12]
 8008034:	60b9      	str	r1, [r7, #8]
 8008036:	607a      	str	r2, [r7, #4]
 8008038:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008048:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	683a      	ldr	r2, [r7, #0]
 8008050:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	2b40      	cmp	r3, #64	@ 0x40
 8008058:	d108      	bne.n	800806c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	68ba      	ldr	r2, [r7, #8]
 8008068:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800806a:	e007      	b.n	800807c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	68ba      	ldr	r2, [r7, #8]
 8008072:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	60da      	str	r2, [r3, #12]
}
 800807c:	bf00      	nop
 800807e:	3714      	adds	r7, #20
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr

08008088 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008088:	b480      	push	{r7}
 800808a:	b085      	sub	sp, #20
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	b2db      	uxtb	r3, r3
 8008096:	3b10      	subs	r3, #16
 8008098:	4a14      	ldr	r2, [pc, #80]	@ (80080ec <DMA_CalcBaseAndBitshift+0x64>)
 800809a:	fba2 2303 	umull	r2, r3, r2, r3
 800809e:	091b      	lsrs	r3, r3, #4
 80080a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80080a2:	4a13      	ldr	r2, [pc, #76]	@ (80080f0 <DMA_CalcBaseAndBitshift+0x68>)
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	4413      	add	r3, r2
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	461a      	mov	r2, r3
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2b03      	cmp	r3, #3
 80080b4:	d909      	bls.n	80080ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80080be:	f023 0303 	bic.w	r3, r3, #3
 80080c2:	1d1a      	adds	r2, r3, #4
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	659a      	str	r2, [r3, #88]	@ 0x58
 80080c8:	e007      	b.n	80080da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80080d2:	f023 0303 	bic.w	r3, r3, #3
 80080d6:	687a      	ldr	r2, [r7, #4]
 80080d8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3714      	adds	r7, #20
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr
 80080ea:	bf00      	nop
 80080ec:	aaaaaaab 	.word	0xaaaaaaab
 80080f0:	08012540 	.word	0x08012540

080080f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b085      	sub	sp, #20
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080fc:	2300      	movs	r3, #0
 80080fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008104:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	699b      	ldr	r3, [r3, #24]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d11f      	bne.n	800814e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	2b03      	cmp	r3, #3
 8008112:	d856      	bhi.n	80081c2 <DMA_CheckFifoParam+0xce>
 8008114:	a201      	add	r2, pc, #4	@ (adr r2, 800811c <DMA_CheckFifoParam+0x28>)
 8008116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800811a:	bf00      	nop
 800811c:	0800812d 	.word	0x0800812d
 8008120:	0800813f 	.word	0x0800813f
 8008124:	0800812d 	.word	0x0800812d
 8008128:	080081c3 	.word	0x080081c3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008130:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008134:	2b00      	cmp	r3, #0
 8008136:	d046      	beq.n	80081c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008138:	2301      	movs	r3, #1
 800813a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800813c:	e043      	b.n	80081c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008142:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008146:	d140      	bne.n	80081ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008148:	2301      	movs	r3, #1
 800814a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800814c:	e03d      	b.n	80081ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	699b      	ldr	r3, [r3, #24]
 8008152:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008156:	d121      	bne.n	800819c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	2b03      	cmp	r3, #3
 800815c:	d837      	bhi.n	80081ce <DMA_CheckFifoParam+0xda>
 800815e:	a201      	add	r2, pc, #4	@ (adr r2, 8008164 <DMA_CheckFifoParam+0x70>)
 8008160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008164:	08008175 	.word	0x08008175
 8008168:	0800817b 	.word	0x0800817b
 800816c:	08008175 	.word	0x08008175
 8008170:	0800818d 	.word	0x0800818d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008174:	2301      	movs	r3, #1
 8008176:	73fb      	strb	r3, [r7, #15]
      break;
 8008178:	e030      	b.n	80081dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800817e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008182:	2b00      	cmp	r3, #0
 8008184:	d025      	beq.n	80081d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008186:	2301      	movs	r3, #1
 8008188:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800818a:	e022      	b.n	80081d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008190:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008194:	d11f      	bne.n	80081d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800819a:	e01c      	b.n	80081d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	2b02      	cmp	r3, #2
 80081a0:	d903      	bls.n	80081aa <DMA_CheckFifoParam+0xb6>
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	2b03      	cmp	r3, #3
 80081a6:	d003      	beq.n	80081b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80081a8:	e018      	b.n	80081dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80081aa:	2301      	movs	r3, #1
 80081ac:	73fb      	strb	r3, [r7, #15]
      break;
 80081ae:	e015      	b.n	80081dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d00e      	beq.n	80081da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80081bc:	2301      	movs	r3, #1
 80081be:	73fb      	strb	r3, [r7, #15]
      break;
 80081c0:	e00b      	b.n	80081da <DMA_CheckFifoParam+0xe6>
      break;
 80081c2:	bf00      	nop
 80081c4:	e00a      	b.n	80081dc <DMA_CheckFifoParam+0xe8>
      break;
 80081c6:	bf00      	nop
 80081c8:	e008      	b.n	80081dc <DMA_CheckFifoParam+0xe8>
      break;
 80081ca:	bf00      	nop
 80081cc:	e006      	b.n	80081dc <DMA_CheckFifoParam+0xe8>
      break;
 80081ce:	bf00      	nop
 80081d0:	e004      	b.n	80081dc <DMA_CheckFifoParam+0xe8>
      break;
 80081d2:	bf00      	nop
 80081d4:	e002      	b.n	80081dc <DMA_CheckFifoParam+0xe8>
      break;   
 80081d6:	bf00      	nop
 80081d8:	e000      	b.n	80081dc <DMA_CheckFifoParam+0xe8>
      break;
 80081da:	bf00      	nop
    }
  } 
  
  return status; 
 80081dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3714      	adds	r7, #20
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr
 80081ea:	bf00      	nop

080081ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b089      	sub	sp, #36	@ 0x24
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80081f6:	2300      	movs	r3, #0
 80081f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80081fa:	2300      	movs	r3, #0
 80081fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80081fe:	2300      	movs	r3, #0
 8008200:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008202:	2300      	movs	r3, #0
 8008204:	61fb      	str	r3, [r7, #28]
 8008206:	e159      	b.n	80084bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008208:	2201      	movs	r2, #1
 800820a:	69fb      	ldr	r3, [r7, #28]
 800820c:	fa02 f303 	lsl.w	r3, r2, r3
 8008210:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	697a      	ldr	r2, [r7, #20]
 8008218:	4013      	ands	r3, r2
 800821a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800821c:	693a      	ldr	r2, [r7, #16]
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	429a      	cmp	r2, r3
 8008222:	f040 8148 	bne.w	80084b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	f003 0303 	and.w	r3, r3, #3
 800822e:	2b01      	cmp	r3, #1
 8008230:	d005      	beq.n	800823e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800823a:	2b02      	cmp	r3, #2
 800823c:	d130      	bne.n	80082a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	005b      	lsls	r3, r3, #1
 8008248:	2203      	movs	r2, #3
 800824a:	fa02 f303 	lsl.w	r3, r2, r3
 800824e:	43db      	mvns	r3, r3
 8008250:	69ba      	ldr	r2, [r7, #24]
 8008252:	4013      	ands	r3, r2
 8008254:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	68da      	ldr	r2, [r3, #12]
 800825a:	69fb      	ldr	r3, [r7, #28]
 800825c:	005b      	lsls	r3, r3, #1
 800825e:	fa02 f303 	lsl.w	r3, r2, r3
 8008262:	69ba      	ldr	r2, [r7, #24]
 8008264:	4313      	orrs	r3, r2
 8008266:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	69ba      	ldr	r2, [r7, #24]
 800826c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008274:	2201      	movs	r2, #1
 8008276:	69fb      	ldr	r3, [r7, #28]
 8008278:	fa02 f303 	lsl.w	r3, r2, r3
 800827c:	43db      	mvns	r3, r3
 800827e:	69ba      	ldr	r2, [r7, #24]
 8008280:	4013      	ands	r3, r2
 8008282:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	091b      	lsrs	r3, r3, #4
 800828a:	f003 0201 	and.w	r2, r3, #1
 800828e:	69fb      	ldr	r3, [r7, #28]
 8008290:	fa02 f303 	lsl.w	r3, r2, r3
 8008294:	69ba      	ldr	r2, [r7, #24]
 8008296:	4313      	orrs	r3, r2
 8008298:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	69ba      	ldr	r2, [r7, #24]
 800829e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	f003 0303 	and.w	r3, r3, #3
 80082a8:	2b03      	cmp	r3, #3
 80082aa:	d017      	beq.n	80082dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80082b2:	69fb      	ldr	r3, [r7, #28]
 80082b4:	005b      	lsls	r3, r3, #1
 80082b6:	2203      	movs	r2, #3
 80082b8:	fa02 f303 	lsl.w	r3, r2, r3
 80082bc:	43db      	mvns	r3, r3
 80082be:	69ba      	ldr	r2, [r7, #24]
 80082c0:	4013      	ands	r3, r2
 80082c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	689a      	ldr	r2, [r3, #8]
 80082c8:	69fb      	ldr	r3, [r7, #28]
 80082ca:	005b      	lsls	r3, r3, #1
 80082cc:	fa02 f303 	lsl.w	r3, r2, r3
 80082d0:	69ba      	ldr	r2, [r7, #24]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	69ba      	ldr	r2, [r7, #24]
 80082da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	f003 0303 	and.w	r3, r3, #3
 80082e4:	2b02      	cmp	r3, #2
 80082e6:	d123      	bne.n	8008330 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80082e8:	69fb      	ldr	r3, [r7, #28]
 80082ea:	08da      	lsrs	r2, r3, #3
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	3208      	adds	r2, #8
 80082f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80082f6:	69fb      	ldr	r3, [r7, #28]
 80082f8:	f003 0307 	and.w	r3, r3, #7
 80082fc:	009b      	lsls	r3, r3, #2
 80082fe:	220f      	movs	r2, #15
 8008300:	fa02 f303 	lsl.w	r3, r2, r3
 8008304:	43db      	mvns	r3, r3
 8008306:	69ba      	ldr	r2, [r7, #24]
 8008308:	4013      	ands	r3, r2
 800830a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	691a      	ldr	r2, [r3, #16]
 8008310:	69fb      	ldr	r3, [r7, #28]
 8008312:	f003 0307 	and.w	r3, r3, #7
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	fa02 f303 	lsl.w	r3, r2, r3
 800831c:	69ba      	ldr	r2, [r7, #24]
 800831e:	4313      	orrs	r3, r2
 8008320:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008322:	69fb      	ldr	r3, [r7, #28]
 8008324:	08da      	lsrs	r2, r3, #3
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	3208      	adds	r2, #8
 800832a:	69b9      	ldr	r1, [r7, #24]
 800832c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008336:	69fb      	ldr	r3, [r7, #28]
 8008338:	005b      	lsls	r3, r3, #1
 800833a:	2203      	movs	r2, #3
 800833c:	fa02 f303 	lsl.w	r3, r2, r3
 8008340:	43db      	mvns	r3, r3
 8008342:	69ba      	ldr	r2, [r7, #24]
 8008344:	4013      	ands	r3, r2
 8008346:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	f003 0203 	and.w	r2, r3, #3
 8008350:	69fb      	ldr	r3, [r7, #28]
 8008352:	005b      	lsls	r3, r3, #1
 8008354:	fa02 f303 	lsl.w	r3, r2, r3
 8008358:	69ba      	ldr	r2, [r7, #24]
 800835a:	4313      	orrs	r3, r2
 800835c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	69ba      	ldr	r2, [r7, #24]
 8008362:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800836c:	2b00      	cmp	r3, #0
 800836e:	f000 80a2 	beq.w	80084b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008372:	2300      	movs	r3, #0
 8008374:	60fb      	str	r3, [r7, #12]
 8008376:	4b57      	ldr	r3, [pc, #348]	@ (80084d4 <HAL_GPIO_Init+0x2e8>)
 8008378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800837a:	4a56      	ldr	r2, [pc, #344]	@ (80084d4 <HAL_GPIO_Init+0x2e8>)
 800837c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008380:	6453      	str	r3, [r2, #68]	@ 0x44
 8008382:	4b54      	ldr	r3, [pc, #336]	@ (80084d4 <HAL_GPIO_Init+0x2e8>)
 8008384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008386:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800838a:	60fb      	str	r3, [r7, #12]
 800838c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800838e:	4a52      	ldr	r2, [pc, #328]	@ (80084d8 <HAL_GPIO_Init+0x2ec>)
 8008390:	69fb      	ldr	r3, [r7, #28]
 8008392:	089b      	lsrs	r3, r3, #2
 8008394:	3302      	adds	r3, #2
 8008396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800839a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800839c:	69fb      	ldr	r3, [r7, #28]
 800839e:	f003 0303 	and.w	r3, r3, #3
 80083a2:	009b      	lsls	r3, r3, #2
 80083a4:	220f      	movs	r2, #15
 80083a6:	fa02 f303 	lsl.w	r3, r2, r3
 80083aa:	43db      	mvns	r3, r3
 80083ac:	69ba      	ldr	r2, [r7, #24]
 80083ae:	4013      	ands	r3, r2
 80083b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	4a49      	ldr	r2, [pc, #292]	@ (80084dc <HAL_GPIO_Init+0x2f0>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d019      	beq.n	80083ee <HAL_GPIO_Init+0x202>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	4a48      	ldr	r2, [pc, #288]	@ (80084e0 <HAL_GPIO_Init+0x2f4>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d013      	beq.n	80083ea <HAL_GPIO_Init+0x1fe>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	4a47      	ldr	r2, [pc, #284]	@ (80084e4 <HAL_GPIO_Init+0x2f8>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d00d      	beq.n	80083e6 <HAL_GPIO_Init+0x1fa>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	4a46      	ldr	r2, [pc, #280]	@ (80084e8 <HAL_GPIO_Init+0x2fc>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d007      	beq.n	80083e2 <HAL_GPIO_Init+0x1f6>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	4a45      	ldr	r2, [pc, #276]	@ (80084ec <HAL_GPIO_Init+0x300>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d101      	bne.n	80083de <HAL_GPIO_Init+0x1f2>
 80083da:	2304      	movs	r3, #4
 80083dc:	e008      	b.n	80083f0 <HAL_GPIO_Init+0x204>
 80083de:	2307      	movs	r3, #7
 80083e0:	e006      	b.n	80083f0 <HAL_GPIO_Init+0x204>
 80083e2:	2303      	movs	r3, #3
 80083e4:	e004      	b.n	80083f0 <HAL_GPIO_Init+0x204>
 80083e6:	2302      	movs	r3, #2
 80083e8:	e002      	b.n	80083f0 <HAL_GPIO_Init+0x204>
 80083ea:	2301      	movs	r3, #1
 80083ec:	e000      	b.n	80083f0 <HAL_GPIO_Init+0x204>
 80083ee:	2300      	movs	r3, #0
 80083f0:	69fa      	ldr	r2, [r7, #28]
 80083f2:	f002 0203 	and.w	r2, r2, #3
 80083f6:	0092      	lsls	r2, r2, #2
 80083f8:	4093      	lsls	r3, r2
 80083fa:	69ba      	ldr	r2, [r7, #24]
 80083fc:	4313      	orrs	r3, r2
 80083fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008400:	4935      	ldr	r1, [pc, #212]	@ (80084d8 <HAL_GPIO_Init+0x2ec>)
 8008402:	69fb      	ldr	r3, [r7, #28]
 8008404:	089b      	lsrs	r3, r3, #2
 8008406:	3302      	adds	r3, #2
 8008408:	69ba      	ldr	r2, [r7, #24]
 800840a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800840e:	4b38      	ldr	r3, [pc, #224]	@ (80084f0 <HAL_GPIO_Init+0x304>)
 8008410:	689b      	ldr	r3, [r3, #8]
 8008412:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	43db      	mvns	r3, r3
 8008418:	69ba      	ldr	r2, [r7, #24]
 800841a:	4013      	ands	r3, r2
 800841c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008426:	2b00      	cmp	r3, #0
 8008428:	d003      	beq.n	8008432 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800842a:	69ba      	ldr	r2, [r7, #24]
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	4313      	orrs	r3, r2
 8008430:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008432:	4a2f      	ldr	r2, [pc, #188]	@ (80084f0 <HAL_GPIO_Init+0x304>)
 8008434:	69bb      	ldr	r3, [r7, #24]
 8008436:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008438:	4b2d      	ldr	r3, [pc, #180]	@ (80084f0 <HAL_GPIO_Init+0x304>)
 800843a:	68db      	ldr	r3, [r3, #12]
 800843c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	43db      	mvns	r3, r3
 8008442:	69ba      	ldr	r2, [r7, #24]
 8008444:	4013      	ands	r3, r2
 8008446:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008450:	2b00      	cmp	r3, #0
 8008452:	d003      	beq.n	800845c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8008454:	69ba      	ldr	r2, [r7, #24]
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	4313      	orrs	r3, r2
 800845a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800845c:	4a24      	ldr	r2, [pc, #144]	@ (80084f0 <HAL_GPIO_Init+0x304>)
 800845e:	69bb      	ldr	r3, [r7, #24]
 8008460:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008462:	4b23      	ldr	r3, [pc, #140]	@ (80084f0 <HAL_GPIO_Init+0x304>)
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	43db      	mvns	r3, r3
 800846c:	69ba      	ldr	r2, [r7, #24]
 800846e:	4013      	ands	r3, r2
 8008470:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800847a:	2b00      	cmp	r3, #0
 800847c:	d003      	beq.n	8008486 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800847e:	69ba      	ldr	r2, [r7, #24]
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	4313      	orrs	r3, r2
 8008484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008486:	4a1a      	ldr	r2, [pc, #104]	@ (80084f0 <HAL_GPIO_Init+0x304>)
 8008488:	69bb      	ldr	r3, [r7, #24]
 800848a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800848c:	4b18      	ldr	r3, [pc, #96]	@ (80084f0 <HAL_GPIO_Init+0x304>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	43db      	mvns	r3, r3
 8008496:	69ba      	ldr	r2, [r7, #24]
 8008498:	4013      	ands	r3, r2
 800849a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d003      	beq.n	80084b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80084a8:	69ba      	ldr	r2, [r7, #24]
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	4313      	orrs	r3, r2
 80084ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80084b0:	4a0f      	ldr	r2, [pc, #60]	@ (80084f0 <HAL_GPIO_Init+0x304>)
 80084b2:	69bb      	ldr	r3, [r7, #24]
 80084b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80084b6:	69fb      	ldr	r3, [r7, #28]
 80084b8:	3301      	adds	r3, #1
 80084ba:	61fb      	str	r3, [r7, #28]
 80084bc:	69fb      	ldr	r3, [r7, #28]
 80084be:	2b0f      	cmp	r3, #15
 80084c0:	f67f aea2 	bls.w	8008208 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80084c4:	bf00      	nop
 80084c6:	bf00      	nop
 80084c8:	3724      	adds	r7, #36	@ 0x24
 80084ca:	46bd      	mov	sp, r7
 80084cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d0:	4770      	bx	lr
 80084d2:	bf00      	nop
 80084d4:	40023800 	.word	0x40023800
 80084d8:	40013800 	.word	0x40013800
 80084dc:	40020000 	.word	0x40020000
 80084e0:	40020400 	.word	0x40020400
 80084e4:	40020800 	.word	0x40020800
 80084e8:	40020c00 	.word	0x40020c00
 80084ec:	40021000 	.word	0x40021000
 80084f0:	40013c00 	.word	0x40013c00

080084f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	460b      	mov	r3, r1
 80084fe:	807b      	strh	r3, [r7, #2]
 8008500:	4613      	mov	r3, r2
 8008502:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008504:	787b      	ldrb	r3, [r7, #1]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d003      	beq.n	8008512 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800850a:	887a      	ldrh	r2, [r7, #2]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008510:	e003      	b.n	800851a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008512:	887b      	ldrh	r3, [r7, #2]
 8008514:	041a      	lsls	r2, r3, #16
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	619a      	str	r2, [r3, #24]
}
 800851a:	bf00      	nop
 800851c:	370c      	adds	r7, #12
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr
	...

08008528 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b084      	sub	sp, #16
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d101      	bne.n	800853a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008536:	2301      	movs	r3, #1
 8008538:	e12b      	b.n	8008792 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008540:	b2db      	uxtb	r3, r3
 8008542:	2b00      	cmp	r3, #0
 8008544:	d106      	bne.n	8008554 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2200      	movs	r2, #0
 800854a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f7fe feae 	bl	80072b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2224      	movs	r2, #36	@ 0x24
 8008558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f022 0201 	bic.w	r2, r2, #1
 800856a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800857a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800858a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800858c:	f003 fad0 	bl	800bb30 <HAL_RCC_GetPCLK1Freq>
 8008590:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	4a81      	ldr	r2, [pc, #516]	@ (800879c <HAL_I2C_Init+0x274>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d807      	bhi.n	80085ac <HAL_I2C_Init+0x84>
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	4a80      	ldr	r2, [pc, #512]	@ (80087a0 <HAL_I2C_Init+0x278>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	bf94      	ite	ls
 80085a4:	2301      	movls	r3, #1
 80085a6:	2300      	movhi	r3, #0
 80085a8:	b2db      	uxtb	r3, r3
 80085aa:	e006      	b.n	80085ba <HAL_I2C_Init+0x92>
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	4a7d      	ldr	r2, [pc, #500]	@ (80087a4 <HAL_I2C_Init+0x27c>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	bf94      	ite	ls
 80085b4:	2301      	movls	r3, #1
 80085b6:	2300      	movhi	r3, #0
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d001      	beq.n	80085c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80085be:	2301      	movs	r3, #1
 80085c0:	e0e7      	b.n	8008792 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	4a78      	ldr	r2, [pc, #480]	@ (80087a8 <HAL_I2C_Init+0x280>)
 80085c6:	fba2 2303 	umull	r2, r3, r2, r3
 80085ca:	0c9b      	lsrs	r3, r3, #18
 80085cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	68ba      	ldr	r2, [r7, #8]
 80085de:	430a      	orrs	r2, r1
 80085e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	6a1b      	ldr	r3, [r3, #32]
 80085e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	4a6a      	ldr	r2, [pc, #424]	@ (800879c <HAL_I2C_Init+0x274>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d802      	bhi.n	80085fc <HAL_I2C_Init+0xd4>
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	3301      	adds	r3, #1
 80085fa:	e009      	b.n	8008610 <HAL_I2C_Init+0xe8>
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8008602:	fb02 f303 	mul.w	r3, r2, r3
 8008606:	4a69      	ldr	r2, [pc, #420]	@ (80087ac <HAL_I2C_Init+0x284>)
 8008608:	fba2 2303 	umull	r2, r3, r2, r3
 800860c:	099b      	lsrs	r3, r3, #6
 800860e:	3301      	adds	r3, #1
 8008610:	687a      	ldr	r2, [r7, #4]
 8008612:	6812      	ldr	r2, [r2, #0]
 8008614:	430b      	orrs	r3, r1
 8008616:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	69db      	ldr	r3, [r3, #28]
 800861e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8008622:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	495c      	ldr	r1, [pc, #368]	@ (800879c <HAL_I2C_Init+0x274>)
 800862c:	428b      	cmp	r3, r1
 800862e:	d819      	bhi.n	8008664 <HAL_I2C_Init+0x13c>
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	1e59      	subs	r1, r3, #1
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	005b      	lsls	r3, r3, #1
 800863a:	fbb1 f3f3 	udiv	r3, r1, r3
 800863e:	1c59      	adds	r1, r3, #1
 8008640:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008644:	400b      	ands	r3, r1
 8008646:	2b00      	cmp	r3, #0
 8008648:	d00a      	beq.n	8008660 <HAL_I2C_Init+0x138>
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	1e59      	subs	r1, r3, #1
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	005b      	lsls	r3, r3, #1
 8008654:	fbb1 f3f3 	udiv	r3, r1, r3
 8008658:	3301      	adds	r3, #1
 800865a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800865e:	e051      	b.n	8008704 <HAL_I2C_Init+0x1dc>
 8008660:	2304      	movs	r3, #4
 8008662:	e04f      	b.n	8008704 <HAL_I2C_Init+0x1dc>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	689b      	ldr	r3, [r3, #8]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d111      	bne.n	8008690 <HAL_I2C_Init+0x168>
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	1e58      	subs	r0, r3, #1
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6859      	ldr	r1, [r3, #4]
 8008674:	460b      	mov	r3, r1
 8008676:	005b      	lsls	r3, r3, #1
 8008678:	440b      	add	r3, r1
 800867a:	fbb0 f3f3 	udiv	r3, r0, r3
 800867e:	3301      	adds	r3, #1
 8008680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008684:	2b00      	cmp	r3, #0
 8008686:	bf0c      	ite	eq
 8008688:	2301      	moveq	r3, #1
 800868a:	2300      	movne	r3, #0
 800868c:	b2db      	uxtb	r3, r3
 800868e:	e012      	b.n	80086b6 <HAL_I2C_Init+0x18e>
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	1e58      	subs	r0, r3, #1
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6859      	ldr	r1, [r3, #4]
 8008698:	460b      	mov	r3, r1
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	440b      	add	r3, r1
 800869e:	0099      	lsls	r1, r3, #2
 80086a0:	440b      	add	r3, r1
 80086a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80086a6:	3301      	adds	r3, #1
 80086a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	bf0c      	ite	eq
 80086b0:	2301      	moveq	r3, #1
 80086b2:	2300      	movne	r3, #0
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d001      	beq.n	80086be <HAL_I2C_Init+0x196>
 80086ba:	2301      	movs	r3, #1
 80086bc:	e022      	b.n	8008704 <HAL_I2C_Init+0x1dc>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d10e      	bne.n	80086e4 <HAL_I2C_Init+0x1bc>
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	1e58      	subs	r0, r3, #1
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6859      	ldr	r1, [r3, #4]
 80086ce:	460b      	mov	r3, r1
 80086d0:	005b      	lsls	r3, r3, #1
 80086d2:	440b      	add	r3, r1
 80086d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80086d8:	3301      	adds	r3, #1
 80086da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80086de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086e2:	e00f      	b.n	8008704 <HAL_I2C_Init+0x1dc>
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	1e58      	subs	r0, r3, #1
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6859      	ldr	r1, [r3, #4]
 80086ec:	460b      	mov	r3, r1
 80086ee:	009b      	lsls	r3, r3, #2
 80086f0:	440b      	add	r3, r1
 80086f2:	0099      	lsls	r1, r3, #2
 80086f4:	440b      	add	r3, r1
 80086f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80086fa:	3301      	adds	r3, #1
 80086fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008700:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008704:	6879      	ldr	r1, [r7, #4]
 8008706:	6809      	ldr	r1, [r1, #0]
 8008708:	4313      	orrs	r3, r2
 800870a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	69da      	ldr	r2, [r3, #28]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6a1b      	ldr	r3, [r3, #32]
 800871e:	431a      	orrs	r2, r3
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	430a      	orrs	r2, r1
 8008726:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8008732:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	6911      	ldr	r1, [r2, #16]
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	68d2      	ldr	r2, [r2, #12]
 800873e:	4311      	orrs	r1, r2
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	6812      	ldr	r2, [r2, #0]
 8008744:	430b      	orrs	r3, r1
 8008746:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	68db      	ldr	r3, [r3, #12]
 800874e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	695a      	ldr	r2, [r3, #20]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	699b      	ldr	r3, [r3, #24]
 800875a:	431a      	orrs	r2, r3
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	430a      	orrs	r2, r1
 8008762:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	681a      	ldr	r2, [r3, #0]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f042 0201 	orr.w	r2, r2, #1
 8008772:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2200      	movs	r2, #0
 8008778:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2220      	movs	r2, #32
 800877e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2200      	movs	r2, #0
 8008786:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2200      	movs	r2, #0
 800878c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008790:	2300      	movs	r3, #0
}
 8008792:	4618      	mov	r0, r3
 8008794:	3710      	adds	r7, #16
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
 800879a:	bf00      	nop
 800879c:	000186a0 	.word	0x000186a0
 80087a0:	001e847f 	.word	0x001e847f
 80087a4:	003d08ff 	.word	0x003d08ff
 80087a8:	431bde83 	.word	0x431bde83
 80087ac:	10624dd3 	.word	0x10624dd3

080087b0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b088      	sub	sp, #32
 80087b4:	af02      	add	r7, sp, #8
 80087b6:	60f8      	str	r0, [r7, #12]
 80087b8:	607a      	str	r2, [r7, #4]
 80087ba:	461a      	mov	r2, r3
 80087bc:	460b      	mov	r3, r1
 80087be:	817b      	strh	r3, [r7, #10]
 80087c0:	4613      	mov	r3, r2
 80087c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80087c4:	f7fe ffce 	bl	8007764 <HAL_GetTick>
 80087c8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80087d0:	b2db      	uxtb	r3, r3
 80087d2:	2b20      	cmp	r3, #32
 80087d4:	f040 80e0 	bne.w	8008998 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	9300      	str	r3, [sp, #0]
 80087dc:	2319      	movs	r3, #25
 80087de:	2201      	movs	r2, #1
 80087e0:	4970      	ldr	r1, [pc, #448]	@ (80089a4 <HAL_I2C_Master_Transmit+0x1f4>)
 80087e2:	68f8      	ldr	r0, [r7, #12]
 80087e4:	f001 f8ac 	bl	8009940 <I2C_WaitOnFlagUntilTimeout>
 80087e8:	4603      	mov	r3, r0
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d001      	beq.n	80087f2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80087ee:	2302      	movs	r3, #2
 80087f0:	e0d3      	b.n	800899a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d101      	bne.n	8008800 <HAL_I2C_Master_Transmit+0x50>
 80087fc:	2302      	movs	r3, #2
 80087fe:	e0cc      	b.n	800899a <HAL_I2C_Master_Transmit+0x1ea>
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2201      	movs	r2, #1
 8008804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f003 0301 	and.w	r3, r3, #1
 8008812:	2b01      	cmp	r3, #1
 8008814:	d007      	beq.n	8008826 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f042 0201 	orr.w	r2, r2, #1
 8008824:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008834:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2221      	movs	r2, #33	@ 0x21
 800883a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2210      	movs	r2, #16
 8008842:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2200      	movs	r2, #0
 800884a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	893a      	ldrh	r2, [r7, #8]
 8008856:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800885c:	b29a      	uxth	r2, r3
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	4a50      	ldr	r2, [pc, #320]	@ (80089a8 <HAL_I2C_Master_Transmit+0x1f8>)
 8008866:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008868:	8979      	ldrh	r1, [r7, #10]
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	6a3a      	ldr	r2, [r7, #32]
 800886e:	68f8      	ldr	r0, [r7, #12]
 8008870:	f000 fe2e 	bl	80094d0 <I2C_MasterRequestWrite>
 8008874:	4603      	mov	r3, r0
 8008876:	2b00      	cmp	r3, #0
 8008878:	d001      	beq.n	800887e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800887a:	2301      	movs	r3, #1
 800887c:	e08d      	b.n	800899a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800887e:	2300      	movs	r3, #0
 8008880:	613b      	str	r3, [r7, #16]
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	695b      	ldr	r3, [r3, #20]
 8008888:	613b      	str	r3, [r7, #16]
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	699b      	ldr	r3, [r3, #24]
 8008890:	613b      	str	r3, [r7, #16]
 8008892:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008894:	e066      	b.n	8008964 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008896:	697a      	ldr	r2, [r7, #20]
 8008898:	6a39      	ldr	r1, [r7, #32]
 800889a:	68f8      	ldr	r0, [r7, #12]
 800889c:	f001 f96a 	bl	8009b74 <I2C_WaitOnTXEFlagUntilTimeout>
 80088a0:	4603      	mov	r3, r0
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d00d      	beq.n	80088c2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088aa:	2b04      	cmp	r3, #4
 80088ac:	d107      	bne.n	80088be <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80088bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80088be:	2301      	movs	r3, #1
 80088c0:	e06b      	b.n	800899a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088c6:	781a      	ldrb	r2, [r3, #0]
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088d2:	1c5a      	adds	r2, r3, #1
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088dc:	b29b      	uxth	r3, r3
 80088de:	3b01      	subs	r3, #1
 80088e0:	b29a      	uxth	r2, r3
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088ea:	3b01      	subs	r3, #1
 80088ec:	b29a      	uxth	r2, r3
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	695b      	ldr	r3, [r3, #20]
 80088f8:	f003 0304 	and.w	r3, r3, #4
 80088fc:	2b04      	cmp	r3, #4
 80088fe:	d11b      	bne.n	8008938 <HAL_I2C_Master_Transmit+0x188>
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008904:	2b00      	cmp	r3, #0
 8008906:	d017      	beq.n	8008938 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800890c:	781a      	ldrb	r2, [r3, #0]
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008918:	1c5a      	adds	r2, r3, #1
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008922:	b29b      	uxth	r3, r3
 8008924:	3b01      	subs	r3, #1
 8008926:	b29a      	uxth	r2, r3
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008930:	3b01      	subs	r3, #1
 8008932:	b29a      	uxth	r2, r3
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008938:	697a      	ldr	r2, [r7, #20]
 800893a:	6a39      	ldr	r1, [r7, #32]
 800893c:	68f8      	ldr	r0, [r7, #12]
 800893e:	f001 f961 	bl	8009c04 <I2C_WaitOnBTFFlagUntilTimeout>
 8008942:	4603      	mov	r3, r0
 8008944:	2b00      	cmp	r3, #0
 8008946:	d00d      	beq.n	8008964 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800894c:	2b04      	cmp	r3, #4
 800894e:	d107      	bne.n	8008960 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	681a      	ldr	r2, [r3, #0]
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800895e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008960:	2301      	movs	r3, #1
 8008962:	e01a      	b.n	800899a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008968:	2b00      	cmp	r3, #0
 800896a:	d194      	bne.n	8008896 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800897a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2220      	movs	r2, #32
 8008980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2200      	movs	r2, #0
 8008988:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2200      	movs	r2, #0
 8008990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008994:	2300      	movs	r3, #0
 8008996:	e000      	b.n	800899a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008998:	2302      	movs	r3, #2
  }
}
 800899a:	4618      	mov	r0, r3
 800899c:	3718      	adds	r7, #24
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}
 80089a2:	bf00      	nop
 80089a4:	00100002 	.word	0x00100002
 80089a8:	ffff0000 	.word	0xffff0000

080089ac <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b08c      	sub	sp, #48	@ 0x30
 80089b0:	af02      	add	r7, sp, #8
 80089b2:	60f8      	str	r0, [r7, #12]
 80089b4:	607a      	str	r2, [r7, #4]
 80089b6:	461a      	mov	r2, r3
 80089b8:	460b      	mov	r3, r1
 80089ba:	817b      	strh	r3, [r7, #10]
 80089bc:	4613      	mov	r3, r2
 80089be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80089c0:	f7fe fed0 	bl	8007764 <HAL_GetTick>
 80089c4:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80089cc:	b2db      	uxtb	r3, r3
 80089ce:	2b20      	cmp	r3, #32
 80089d0:	f040 8217 	bne.w	8008e02 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80089d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089d6:	9300      	str	r3, [sp, #0]
 80089d8:	2319      	movs	r3, #25
 80089da:	2201      	movs	r2, #1
 80089dc:	497c      	ldr	r1, [pc, #496]	@ (8008bd0 <HAL_I2C_Master_Receive+0x224>)
 80089de:	68f8      	ldr	r0, [r7, #12]
 80089e0:	f000 ffae 	bl	8009940 <I2C_WaitOnFlagUntilTimeout>
 80089e4:	4603      	mov	r3, r0
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d001      	beq.n	80089ee <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80089ea:	2302      	movs	r3, #2
 80089ec:	e20a      	b.n	8008e04 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d101      	bne.n	80089fc <HAL_I2C_Master_Receive+0x50>
 80089f8:	2302      	movs	r3, #2
 80089fa:	e203      	b.n	8008e04 <HAL_I2C_Master_Receive+0x458>
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2201      	movs	r2, #1
 8008a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f003 0301 	and.w	r3, r3, #1
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	d007      	beq.n	8008a22 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	681a      	ldr	r2, [r3, #0]
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f042 0201 	orr.w	r2, r2, #1
 8008a20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	681a      	ldr	r2, [r3, #0]
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008a30:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2222      	movs	r2, #34	@ 0x22
 8008a36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2210      	movs	r2, #16
 8008a3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2200      	movs	r2, #0
 8008a46:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	893a      	ldrh	r2, [r7, #8]
 8008a52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a58:	b29a      	uxth	r2, r3
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	4a5c      	ldr	r2, [pc, #368]	@ (8008bd4 <HAL_I2C_Master_Receive+0x228>)
 8008a62:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008a64:	8979      	ldrh	r1, [r7, #10]
 8008a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a6a:	68f8      	ldr	r0, [r7, #12]
 8008a6c:	f000 fdb2 	bl	80095d4 <I2C_MasterRequestRead>
 8008a70:	4603      	mov	r3, r0
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d001      	beq.n	8008a7a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8008a76:	2301      	movs	r3, #1
 8008a78:	e1c4      	b.n	8008e04 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d113      	bne.n	8008aaa <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a82:	2300      	movs	r3, #0
 8008a84:	623b      	str	r3, [r7, #32]
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	695b      	ldr	r3, [r3, #20]
 8008a8c:	623b      	str	r3, [r7, #32]
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	699b      	ldr	r3, [r3, #24]
 8008a94:	623b      	str	r3, [r7, #32]
 8008a96:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008aa6:	601a      	str	r2, [r3, #0]
 8008aa8:	e198      	b.n	8008ddc <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	d11b      	bne.n	8008aea <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	681a      	ldr	r2, [r3, #0]
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008ac0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	61fb      	str	r3, [r7, #28]
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	695b      	ldr	r3, [r3, #20]
 8008acc:	61fb      	str	r3, [r7, #28]
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	699b      	ldr	r3, [r3, #24]
 8008ad4:	61fb      	str	r3, [r7, #28]
 8008ad6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	681a      	ldr	r2, [r3, #0]
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008ae6:	601a      	str	r2, [r3, #0]
 8008ae8:	e178      	b.n	8008ddc <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008aee:	2b02      	cmp	r3, #2
 8008af0:	d11b      	bne.n	8008b2a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008b00:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	681a      	ldr	r2, [r3, #0]
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008b10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b12:	2300      	movs	r3, #0
 8008b14:	61bb      	str	r3, [r7, #24]
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	695b      	ldr	r3, [r3, #20]
 8008b1c:	61bb      	str	r3, [r7, #24]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	699b      	ldr	r3, [r3, #24]
 8008b24:	61bb      	str	r3, [r7, #24]
 8008b26:	69bb      	ldr	r3, [r7, #24]
 8008b28:	e158      	b.n	8008ddc <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008b38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	617b      	str	r3, [r7, #20]
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	695b      	ldr	r3, [r3, #20]
 8008b44:	617b      	str	r3, [r7, #20]
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	699b      	ldr	r3, [r3, #24]
 8008b4c:	617b      	str	r3, [r7, #20]
 8008b4e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008b50:	e144      	b.n	8008ddc <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b56:	2b03      	cmp	r3, #3
 8008b58:	f200 80f1 	bhi.w	8008d3e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	d123      	bne.n	8008bac <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b66:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008b68:	68f8      	ldr	r0, [r7, #12]
 8008b6a:	f001 f893 	bl	8009c94 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d001      	beq.n	8008b78 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8008b74:	2301      	movs	r3, #1
 8008b76:	e145      	b.n	8008e04 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	691a      	ldr	r2, [r3, #16]
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b82:	b2d2      	uxtb	r2, r2
 8008b84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b8a:	1c5a      	adds	r2, r3, #1
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b94:	3b01      	subs	r3, #1
 8008b96:	b29a      	uxth	r2, r3
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	3b01      	subs	r3, #1
 8008ba4:	b29a      	uxth	r2, r3
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008baa:	e117      	b.n	8008ddc <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008bb0:	2b02      	cmp	r3, #2
 8008bb2:	d14e      	bne.n	8008c52 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bb6:	9300      	str	r3, [sp, #0]
 8008bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bba:	2200      	movs	r2, #0
 8008bbc:	4906      	ldr	r1, [pc, #24]	@ (8008bd8 <HAL_I2C_Master_Receive+0x22c>)
 8008bbe:	68f8      	ldr	r0, [r7, #12]
 8008bc0:	f000 febe 	bl	8009940 <I2C_WaitOnFlagUntilTimeout>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d008      	beq.n	8008bdc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	e11a      	b.n	8008e04 <HAL_I2C_Master_Receive+0x458>
 8008bce:	bf00      	nop
 8008bd0:	00100002 	.word	0x00100002
 8008bd4:	ffff0000 	.word	0xffff0000
 8008bd8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	681a      	ldr	r2, [r3, #0]
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008bea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	691a      	ldr	r2, [r3, #16]
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bf6:	b2d2      	uxtb	r2, r2
 8008bf8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bfe:	1c5a      	adds	r2, r3, #1
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c08:	3b01      	subs	r3, #1
 8008c0a:	b29a      	uxth	r2, r3
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	3b01      	subs	r3, #1
 8008c18:	b29a      	uxth	r2, r3
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	691a      	ldr	r2, [r3, #16]
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c28:	b2d2      	uxtb	r2, r2
 8008c2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c30:	1c5a      	adds	r2, r3, #1
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c3a:	3b01      	subs	r3, #1
 8008c3c:	b29a      	uxth	r2, r3
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	3b01      	subs	r3, #1
 8008c4a:	b29a      	uxth	r2, r3
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008c50:	e0c4      	b.n	8008ddc <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c54:	9300      	str	r3, [sp, #0]
 8008c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c58:	2200      	movs	r2, #0
 8008c5a:	496c      	ldr	r1, [pc, #432]	@ (8008e0c <HAL_I2C_Master_Receive+0x460>)
 8008c5c:	68f8      	ldr	r0, [r7, #12]
 8008c5e:	f000 fe6f 	bl	8009940 <I2C_WaitOnFlagUntilTimeout>
 8008c62:	4603      	mov	r3, r0
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d001      	beq.n	8008c6c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	e0cb      	b.n	8008e04 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	681a      	ldr	r2, [r3, #0]
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008c7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	691a      	ldr	r2, [r3, #16]
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c86:	b2d2      	uxtb	r2, r2
 8008c88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c8e:	1c5a      	adds	r2, r3, #1
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c98:	3b01      	subs	r3, #1
 8008c9a:	b29a      	uxth	r2, r3
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ca4:	b29b      	uxth	r3, r3
 8008ca6:	3b01      	subs	r3, #1
 8008ca8:	b29a      	uxth	r2, r3
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cb0:	9300      	str	r3, [sp, #0]
 8008cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	4955      	ldr	r1, [pc, #340]	@ (8008e0c <HAL_I2C_Master_Receive+0x460>)
 8008cb8:	68f8      	ldr	r0, [r7, #12]
 8008cba:	f000 fe41 	bl	8009940 <I2C_WaitOnFlagUntilTimeout>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d001      	beq.n	8008cc8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	e09d      	b.n	8008e04 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	681a      	ldr	r2, [r3, #0]
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008cd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	691a      	ldr	r2, [r3, #16]
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ce2:	b2d2      	uxtb	r2, r2
 8008ce4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cea:	1c5a      	adds	r2, r3, #1
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008cf4:	3b01      	subs	r3, #1
 8008cf6:	b29a      	uxth	r2, r3
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	3b01      	subs	r3, #1
 8008d04:	b29a      	uxth	r2, r3
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	691a      	ldr	r2, [r3, #16]
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d14:	b2d2      	uxtb	r2, r2
 8008d16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d1c:	1c5a      	adds	r2, r3, #1
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d26:	3b01      	subs	r3, #1
 8008d28:	b29a      	uxth	r2, r3
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d32:	b29b      	uxth	r3, r3
 8008d34:	3b01      	subs	r3, #1
 8008d36:	b29a      	uxth	r2, r3
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008d3c:	e04e      	b.n	8008ddc <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008d3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d40:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008d42:	68f8      	ldr	r0, [r7, #12]
 8008d44:	f000 ffa6 	bl	8009c94 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d001      	beq.n	8008d52 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	e058      	b.n	8008e04 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	691a      	ldr	r2, [r3, #16]
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d5c:	b2d2      	uxtb	r2, r2
 8008d5e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d64:	1c5a      	adds	r2, r3, #1
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d6e:	3b01      	subs	r3, #1
 8008d70:	b29a      	uxth	r2, r3
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	3b01      	subs	r3, #1
 8008d7e:	b29a      	uxth	r2, r3
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	695b      	ldr	r3, [r3, #20]
 8008d8a:	f003 0304 	and.w	r3, r3, #4
 8008d8e:	2b04      	cmp	r3, #4
 8008d90:	d124      	bne.n	8008ddc <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d96:	2b03      	cmp	r3, #3
 8008d98:	d107      	bne.n	8008daa <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	681a      	ldr	r2, [r3, #0]
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008da8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	691a      	ldr	r2, [r3, #16]
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008db4:	b2d2      	uxtb	r2, r2
 8008db6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dbc:	1c5a      	adds	r2, r3, #1
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008dc6:	3b01      	subs	r3, #1
 8008dc8:	b29a      	uxth	r2, r3
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008dd2:	b29b      	uxth	r3, r3
 8008dd4:	3b01      	subs	r3, #1
 8008dd6:	b29a      	uxth	r2, r3
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	f47f aeb6 	bne.w	8008b52 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2220      	movs	r2, #32
 8008dea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2200      	movs	r2, #0
 8008df2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	e000      	b.n	8008e04 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8008e02:	2302      	movs	r3, #2
  }
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3728      	adds	r7, #40	@ 0x28
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}
 8008e0c:	00010004 	.word	0x00010004

08008e10 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b08c      	sub	sp, #48	@ 0x30
 8008e14:	af02      	add	r7, sp, #8
 8008e16:	60f8      	str	r0, [r7, #12]
 8008e18:	4608      	mov	r0, r1
 8008e1a:	4611      	mov	r1, r2
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	4603      	mov	r3, r0
 8008e20:	817b      	strh	r3, [r7, #10]
 8008e22:	460b      	mov	r3, r1
 8008e24:	813b      	strh	r3, [r7, #8]
 8008e26:	4613      	mov	r3, r2
 8008e28:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008e2a:	f7fe fc9b 	bl	8007764 <HAL_GetTick>
 8008e2e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	2b20      	cmp	r3, #32
 8008e3a:	f040 8214 	bne.w	8009266 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e40:	9300      	str	r3, [sp, #0]
 8008e42:	2319      	movs	r3, #25
 8008e44:	2201      	movs	r2, #1
 8008e46:	497b      	ldr	r1, [pc, #492]	@ (8009034 <HAL_I2C_Mem_Read+0x224>)
 8008e48:	68f8      	ldr	r0, [r7, #12]
 8008e4a:	f000 fd79 	bl	8009940 <I2C_WaitOnFlagUntilTimeout>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d001      	beq.n	8008e58 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008e54:	2302      	movs	r3, #2
 8008e56:	e207      	b.n	8009268 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008e5e:	2b01      	cmp	r3, #1
 8008e60:	d101      	bne.n	8008e66 <HAL_I2C_Mem_Read+0x56>
 8008e62:	2302      	movs	r3, #2
 8008e64:	e200      	b.n	8009268 <HAL_I2C_Mem_Read+0x458>
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2201      	movs	r2, #1
 8008e6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f003 0301 	and.w	r3, r3, #1
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	d007      	beq.n	8008e8c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f042 0201 	orr.w	r2, r2, #1
 8008e8a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	681a      	ldr	r2, [r3, #0]
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008e9a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	2222      	movs	r2, #34	@ 0x22
 8008ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2240      	movs	r2, #64	@ 0x40
 8008ea8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008eb6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8008ebc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ec2:	b29a      	uxth	r2, r3
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	4a5b      	ldr	r2, [pc, #364]	@ (8009038 <HAL_I2C_Mem_Read+0x228>)
 8008ecc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008ece:	88f8      	ldrh	r0, [r7, #6]
 8008ed0:	893a      	ldrh	r2, [r7, #8]
 8008ed2:	8979      	ldrh	r1, [r7, #10]
 8008ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ed6:	9301      	str	r3, [sp, #4]
 8008ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eda:	9300      	str	r3, [sp, #0]
 8008edc:	4603      	mov	r3, r0
 8008ede:	68f8      	ldr	r0, [r7, #12]
 8008ee0:	f000 fc46 	bl	8009770 <I2C_RequestMemoryRead>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d001      	beq.n	8008eee <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8008eea:	2301      	movs	r3, #1
 8008eec:	e1bc      	b.n	8009268 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d113      	bne.n	8008f1e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	623b      	str	r3, [r7, #32]
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	695b      	ldr	r3, [r3, #20]
 8008f00:	623b      	str	r3, [r7, #32]
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	699b      	ldr	r3, [r3, #24]
 8008f08:	623b      	str	r3, [r7, #32]
 8008f0a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	681a      	ldr	r2, [r3, #0]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008f1a:	601a      	str	r2, [r3, #0]
 8008f1c:	e190      	b.n	8009240 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f22:	2b01      	cmp	r3, #1
 8008f24:	d11b      	bne.n	8008f5e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	681a      	ldr	r2, [r3, #0]
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008f34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f36:	2300      	movs	r3, #0
 8008f38:	61fb      	str	r3, [r7, #28]
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	695b      	ldr	r3, [r3, #20]
 8008f40:	61fb      	str	r3, [r7, #28]
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	699b      	ldr	r3, [r3, #24]
 8008f48:	61fb      	str	r3, [r7, #28]
 8008f4a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	681a      	ldr	r2, [r3, #0]
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008f5a:	601a      	str	r2, [r3, #0]
 8008f5c:	e170      	b.n	8009240 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f62:	2b02      	cmp	r3, #2
 8008f64:	d11b      	bne.n	8008f9e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	681a      	ldr	r2, [r3, #0]
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008f74:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	681a      	ldr	r2, [r3, #0]
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008f84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f86:	2300      	movs	r3, #0
 8008f88:	61bb      	str	r3, [r7, #24]
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	695b      	ldr	r3, [r3, #20]
 8008f90:	61bb      	str	r3, [r7, #24]
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	699b      	ldr	r3, [r3, #24]
 8008f98:	61bb      	str	r3, [r7, #24]
 8008f9a:	69bb      	ldr	r3, [r7, #24]
 8008f9c:	e150      	b.n	8009240 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	617b      	str	r3, [r7, #20]
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	695b      	ldr	r3, [r3, #20]
 8008fa8:	617b      	str	r3, [r7, #20]
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	699b      	ldr	r3, [r3, #24]
 8008fb0:	617b      	str	r3, [r7, #20]
 8008fb2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008fb4:	e144      	b.n	8009240 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008fba:	2b03      	cmp	r3, #3
 8008fbc:	f200 80f1 	bhi.w	80091a2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d123      	bne.n	8009010 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008fc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008fcc:	68f8      	ldr	r0, [r7, #12]
 8008fce:	f000 fe61 	bl	8009c94 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d001      	beq.n	8008fdc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	e145      	b.n	8009268 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	691a      	ldr	r2, [r3, #16]
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fe6:	b2d2      	uxtb	r2, r2
 8008fe8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fee:	1c5a      	adds	r2, r3, #1
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ff8:	3b01      	subs	r3, #1
 8008ffa:	b29a      	uxth	r2, r3
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009004:	b29b      	uxth	r3, r3
 8009006:	3b01      	subs	r3, #1
 8009008:	b29a      	uxth	r2, r3
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800900e:	e117      	b.n	8009240 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009014:	2b02      	cmp	r3, #2
 8009016:	d14e      	bne.n	80090b6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800901a:	9300      	str	r3, [sp, #0]
 800901c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800901e:	2200      	movs	r2, #0
 8009020:	4906      	ldr	r1, [pc, #24]	@ (800903c <HAL_I2C_Mem_Read+0x22c>)
 8009022:	68f8      	ldr	r0, [r7, #12]
 8009024:	f000 fc8c 	bl	8009940 <I2C_WaitOnFlagUntilTimeout>
 8009028:	4603      	mov	r3, r0
 800902a:	2b00      	cmp	r3, #0
 800902c:	d008      	beq.n	8009040 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800902e:	2301      	movs	r3, #1
 8009030:	e11a      	b.n	8009268 <HAL_I2C_Mem_Read+0x458>
 8009032:	bf00      	nop
 8009034:	00100002 	.word	0x00100002
 8009038:	ffff0000 	.word	0xffff0000
 800903c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800904e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	691a      	ldr	r2, [r3, #16]
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800905a:	b2d2      	uxtb	r2, r2
 800905c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009062:	1c5a      	adds	r2, r3, #1
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800906c:	3b01      	subs	r3, #1
 800906e:	b29a      	uxth	r2, r3
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009078:	b29b      	uxth	r3, r3
 800907a:	3b01      	subs	r3, #1
 800907c:	b29a      	uxth	r2, r3
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	691a      	ldr	r2, [r3, #16]
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800908c:	b2d2      	uxtb	r2, r2
 800908e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009094:	1c5a      	adds	r2, r3, #1
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800909e:	3b01      	subs	r3, #1
 80090a0:	b29a      	uxth	r2, r3
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	3b01      	subs	r3, #1
 80090ae:	b29a      	uxth	r2, r3
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80090b4:	e0c4      	b.n	8009240 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80090b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090b8:	9300      	str	r3, [sp, #0]
 80090ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090bc:	2200      	movs	r2, #0
 80090be:	496c      	ldr	r1, [pc, #432]	@ (8009270 <HAL_I2C_Mem_Read+0x460>)
 80090c0:	68f8      	ldr	r0, [r7, #12]
 80090c2:	f000 fc3d 	bl	8009940 <I2C_WaitOnFlagUntilTimeout>
 80090c6:	4603      	mov	r3, r0
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d001      	beq.n	80090d0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80090cc:	2301      	movs	r3, #1
 80090ce:	e0cb      	b.n	8009268 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	681a      	ldr	r2, [r3, #0]
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80090de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	691a      	ldr	r2, [r3, #16]
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090ea:	b2d2      	uxtb	r2, r2
 80090ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090f2:	1c5a      	adds	r2, r3, #1
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80090fc:	3b01      	subs	r3, #1
 80090fe:	b29a      	uxth	r2, r3
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009108:	b29b      	uxth	r3, r3
 800910a:	3b01      	subs	r3, #1
 800910c:	b29a      	uxth	r2, r3
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009114:	9300      	str	r3, [sp, #0]
 8009116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009118:	2200      	movs	r2, #0
 800911a:	4955      	ldr	r1, [pc, #340]	@ (8009270 <HAL_I2C_Mem_Read+0x460>)
 800911c:	68f8      	ldr	r0, [r7, #12]
 800911e:	f000 fc0f 	bl	8009940 <I2C_WaitOnFlagUntilTimeout>
 8009122:	4603      	mov	r3, r0
 8009124:	2b00      	cmp	r3, #0
 8009126:	d001      	beq.n	800912c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8009128:	2301      	movs	r3, #1
 800912a:	e09d      	b.n	8009268 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	681a      	ldr	r2, [r3, #0]
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800913a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	691a      	ldr	r2, [r3, #16]
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009146:	b2d2      	uxtb	r2, r2
 8009148:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800914e:	1c5a      	adds	r2, r3, #1
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009158:	3b01      	subs	r3, #1
 800915a:	b29a      	uxth	r2, r3
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009164:	b29b      	uxth	r3, r3
 8009166:	3b01      	subs	r3, #1
 8009168:	b29a      	uxth	r2, r3
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	691a      	ldr	r2, [r3, #16]
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009178:	b2d2      	uxtb	r2, r2
 800917a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009180:	1c5a      	adds	r2, r3, #1
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800918a:	3b01      	subs	r3, #1
 800918c:	b29a      	uxth	r2, r3
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009196:	b29b      	uxth	r3, r3
 8009198:	3b01      	subs	r3, #1
 800919a:	b29a      	uxth	r2, r3
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80091a0:	e04e      	b.n	8009240 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80091a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091a4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80091a6:	68f8      	ldr	r0, [r7, #12]
 80091a8:	f000 fd74 	bl	8009c94 <I2C_WaitOnRXNEFlagUntilTimeout>
 80091ac:	4603      	mov	r3, r0
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d001      	beq.n	80091b6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80091b2:	2301      	movs	r3, #1
 80091b4:	e058      	b.n	8009268 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	691a      	ldr	r2, [r3, #16]
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091c0:	b2d2      	uxtb	r2, r2
 80091c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091c8:	1c5a      	adds	r2, r3, #1
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091d2:	3b01      	subs	r3, #1
 80091d4:	b29a      	uxth	r2, r3
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091de:	b29b      	uxth	r3, r3
 80091e0:	3b01      	subs	r3, #1
 80091e2:	b29a      	uxth	r2, r3
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	695b      	ldr	r3, [r3, #20]
 80091ee:	f003 0304 	and.w	r3, r3, #4
 80091f2:	2b04      	cmp	r3, #4
 80091f4:	d124      	bne.n	8009240 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091fa:	2b03      	cmp	r3, #3
 80091fc:	d107      	bne.n	800920e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	681a      	ldr	r2, [r3, #0]
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800920c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	691a      	ldr	r2, [r3, #16]
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009218:	b2d2      	uxtb	r2, r2
 800921a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009220:	1c5a      	adds	r2, r3, #1
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800922a:	3b01      	subs	r3, #1
 800922c:	b29a      	uxth	r2, r3
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009236:	b29b      	uxth	r3, r3
 8009238:	3b01      	subs	r3, #1
 800923a:	b29a      	uxth	r2, r3
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009244:	2b00      	cmp	r3, #0
 8009246:	f47f aeb6 	bne.w	8008fb6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2220      	movs	r2, #32
 800924e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2200      	movs	r2, #0
 8009256:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2200      	movs	r2, #0
 800925e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009262:	2300      	movs	r3, #0
 8009264:	e000      	b.n	8009268 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8009266:	2302      	movs	r3, #2
  }
}
 8009268:	4618      	mov	r0, r3
 800926a:	3728      	adds	r7, #40	@ 0x28
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}
 8009270:	00010004 	.word	0x00010004

08009274 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b08a      	sub	sp, #40	@ 0x28
 8009278:	af02      	add	r7, sp, #8
 800927a:	60f8      	str	r0, [r7, #12]
 800927c:	607a      	str	r2, [r7, #4]
 800927e:	603b      	str	r3, [r7, #0]
 8009280:	460b      	mov	r3, r1
 8009282:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8009284:	f7fe fa6e 	bl	8007764 <HAL_GetTick>
 8009288:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800928a:	2300      	movs	r3, #0
 800928c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009294:	b2db      	uxtb	r3, r3
 8009296:	2b20      	cmp	r3, #32
 8009298:	f040 8111 	bne.w	80094be <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800929c:	69fb      	ldr	r3, [r7, #28]
 800929e:	9300      	str	r3, [sp, #0]
 80092a0:	2319      	movs	r3, #25
 80092a2:	2201      	movs	r2, #1
 80092a4:	4988      	ldr	r1, [pc, #544]	@ (80094c8 <HAL_I2C_IsDeviceReady+0x254>)
 80092a6:	68f8      	ldr	r0, [r7, #12]
 80092a8:	f000 fb4a 	bl	8009940 <I2C_WaitOnFlagUntilTimeout>
 80092ac:	4603      	mov	r3, r0
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d001      	beq.n	80092b6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80092b2:	2302      	movs	r3, #2
 80092b4:	e104      	b.n	80094c0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80092bc:	2b01      	cmp	r3, #1
 80092be:	d101      	bne.n	80092c4 <HAL_I2C_IsDeviceReady+0x50>
 80092c0:	2302      	movs	r3, #2
 80092c2:	e0fd      	b.n	80094c0 <HAL_I2C_IsDeviceReady+0x24c>
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2201      	movs	r2, #1
 80092c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f003 0301 	and.w	r3, r3, #1
 80092d6:	2b01      	cmp	r3, #1
 80092d8:	d007      	beq.n	80092ea <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	681a      	ldr	r2, [r3, #0]
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f042 0201 	orr.w	r2, r2, #1
 80092e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80092f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2224      	movs	r2, #36	@ 0x24
 80092fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2200      	movs	r2, #0
 8009306:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	4a70      	ldr	r2, [pc, #448]	@ (80094cc <HAL_I2C_IsDeviceReady+0x258>)
 800930c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	681a      	ldr	r2, [r3, #0]
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800931c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800931e:	69fb      	ldr	r3, [r7, #28]
 8009320:	9300      	str	r3, [sp, #0]
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	2200      	movs	r2, #0
 8009326:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800932a:	68f8      	ldr	r0, [r7, #12]
 800932c:	f000 fb08 	bl	8009940 <I2C_WaitOnFlagUntilTimeout>
 8009330:	4603      	mov	r3, r0
 8009332:	2b00      	cmp	r3, #0
 8009334:	d00d      	beq.n	8009352 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009340:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009344:	d103      	bne.n	800934e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800934c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800934e:	2303      	movs	r3, #3
 8009350:	e0b6      	b.n	80094c0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009352:	897b      	ldrh	r3, [r7, #10]
 8009354:	b2db      	uxtb	r3, r3
 8009356:	461a      	mov	r2, r3
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009360:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8009362:	f7fe f9ff 	bl	8007764 <HAL_GetTick>
 8009366:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	695b      	ldr	r3, [r3, #20]
 800936e:	f003 0302 	and.w	r3, r3, #2
 8009372:	2b02      	cmp	r3, #2
 8009374:	bf0c      	ite	eq
 8009376:	2301      	moveq	r3, #1
 8009378:	2300      	movne	r3, #0
 800937a:	b2db      	uxtb	r3, r3
 800937c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	695b      	ldr	r3, [r3, #20]
 8009384:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009388:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800938c:	bf0c      	ite	eq
 800938e:	2301      	moveq	r3, #1
 8009390:	2300      	movne	r3, #0
 8009392:	b2db      	uxtb	r3, r3
 8009394:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8009396:	e025      	b.n	80093e4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009398:	f7fe f9e4 	bl	8007764 <HAL_GetTick>
 800939c:	4602      	mov	r2, r0
 800939e:	69fb      	ldr	r3, [r7, #28]
 80093a0:	1ad3      	subs	r3, r2, r3
 80093a2:	683a      	ldr	r2, [r7, #0]
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d302      	bcc.n	80093ae <HAL_I2C_IsDeviceReady+0x13a>
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d103      	bne.n	80093b6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	22a0      	movs	r2, #160	@ 0xa0
 80093b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	695b      	ldr	r3, [r3, #20]
 80093bc:	f003 0302 	and.w	r3, r3, #2
 80093c0:	2b02      	cmp	r3, #2
 80093c2:	bf0c      	ite	eq
 80093c4:	2301      	moveq	r3, #1
 80093c6:	2300      	movne	r3, #0
 80093c8:	b2db      	uxtb	r3, r3
 80093ca:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	695b      	ldr	r3, [r3, #20]
 80093d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80093d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093da:	bf0c      	ite	eq
 80093dc:	2301      	moveq	r3, #1
 80093de:	2300      	movne	r3, #0
 80093e0:	b2db      	uxtb	r3, r3
 80093e2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80093ea:	b2db      	uxtb	r3, r3
 80093ec:	2ba0      	cmp	r3, #160	@ 0xa0
 80093ee:	d005      	beq.n	80093fc <HAL_I2C_IsDeviceReady+0x188>
 80093f0:	7dfb      	ldrb	r3, [r7, #23]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d102      	bne.n	80093fc <HAL_I2C_IsDeviceReady+0x188>
 80093f6:	7dbb      	ldrb	r3, [r7, #22]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d0cd      	beq.n	8009398 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2220      	movs	r2, #32
 8009400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	695b      	ldr	r3, [r3, #20]
 800940a:	f003 0302 	and.w	r3, r3, #2
 800940e:	2b02      	cmp	r3, #2
 8009410:	d129      	bne.n	8009466 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	681a      	ldr	r2, [r3, #0]
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009420:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009422:	2300      	movs	r3, #0
 8009424:	613b      	str	r3, [r7, #16]
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	695b      	ldr	r3, [r3, #20]
 800942c:	613b      	str	r3, [r7, #16]
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	699b      	ldr	r3, [r3, #24]
 8009434:	613b      	str	r3, [r7, #16]
 8009436:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009438:	69fb      	ldr	r3, [r7, #28]
 800943a:	9300      	str	r3, [sp, #0]
 800943c:	2319      	movs	r3, #25
 800943e:	2201      	movs	r2, #1
 8009440:	4921      	ldr	r1, [pc, #132]	@ (80094c8 <HAL_I2C_IsDeviceReady+0x254>)
 8009442:	68f8      	ldr	r0, [r7, #12]
 8009444:	f000 fa7c 	bl	8009940 <I2C_WaitOnFlagUntilTimeout>
 8009448:	4603      	mov	r3, r0
 800944a:	2b00      	cmp	r3, #0
 800944c:	d001      	beq.n	8009452 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800944e:	2301      	movs	r3, #1
 8009450:	e036      	b.n	80094c0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2220      	movs	r2, #32
 8009456:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2200      	movs	r2, #0
 800945e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8009462:	2300      	movs	r3, #0
 8009464:	e02c      	b.n	80094c0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	681a      	ldr	r2, [r3, #0]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009474:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800947e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009480:	69fb      	ldr	r3, [r7, #28]
 8009482:	9300      	str	r3, [sp, #0]
 8009484:	2319      	movs	r3, #25
 8009486:	2201      	movs	r2, #1
 8009488:	490f      	ldr	r1, [pc, #60]	@ (80094c8 <HAL_I2C_IsDeviceReady+0x254>)
 800948a:	68f8      	ldr	r0, [r7, #12]
 800948c:	f000 fa58 	bl	8009940 <I2C_WaitOnFlagUntilTimeout>
 8009490:	4603      	mov	r3, r0
 8009492:	2b00      	cmp	r3, #0
 8009494:	d001      	beq.n	800949a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8009496:	2301      	movs	r3, #1
 8009498:	e012      	b.n	80094c0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800949a:	69bb      	ldr	r3, [r7, #24]
 800949c:	3301      	adds	r3, #1
 800949e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80094a0:	69ba      	ldr	r2, [r7, #24]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	429a      	cmp	r2, r3
 80094a6:	f4ff af32 	bcc.w	800930e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2220      	movs	r2, #32
 80094ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2200      	movs	r2, #0
 80094b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80094ba:	2301      	movs	r3, #1
 80094bc:	e000      	b.n	80094c0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80094be:	2302      	movs	r3, #2
  }
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3720      	adds	r7, #32
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}
 80094c8:	00100002 	.word	0x00100002
 80094cc:	ffff0000 	.word	0xffff0000

080094d0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b088      	sub	sp, #32
 80094d4:	af02      	add	r7, sp, #8
 80094d6:	60f8      	str	r0, [r7, #12]
 80094d8:	607a      	str	r2, [r7, #4]
 80094da:	603b      	str	r3, [r7, #0]
 80094dc:	460b      	mov	r3, r1
 80094de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094e4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	2b08      	cmp	r3, #8
 80094ea:	d006      	beq.n	80094fa <I2C_MasterRequestWrite+0x2a>
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	d003      	beq.n	80094fa <I2C_MasterRequestWrite+0x2a>
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80094f8:	d108      	bne.n	800950c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	681a      	ldr	r2, [r3, #0]
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009508:	601a      	str	r2, [r3, #0]
 800950a:	e00b      	b.n	8009524 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009510:	2b12      	cmp	r3, #18
 8009512:	d107      	bne.n	8009524 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	681a      	ldr	r2, [r3, #0]
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009522:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	9300      	str	r3, [sp, #0]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2200      	movs	r2, #0
 800952c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009530:	68f8      	ldr	r0, [r7, #12]
 8009532:	f000 fa05 	bl	8009940 <I2C_WaitOnFlagUntilTimeout>
 8009536:	4603      	mov	r3, r0
 8009538:	2b00      	cmp	r3, #0
 800953a:	d00d      	beq.n	8009558 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009546:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800954a:	d103      	bne.n	8009554 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009552:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009554:	2303      	movs	r3, #3
 8009556:	e035      	b.n	80095c4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	691b      	ldr	r3, [r3, #16]
 800955c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009560:	d108      	bne.n	8009574 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009562:	897b      	ldrh	r3, [r7, #10]
 8009564:	b2db      	uxtb	r3, r3
 8009566:	461a      	mov	r2, r3
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009570:	611a      	str	r2, [r3, #16]
 8009572:	e01b      	b.n	80095ac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009574:	897b      	ldrh	r3, [r7, #10]
 8009576:	11db      	asrs	r3, r3, #7
 8009578:	b2db      	uxtb	r3, r3
 800957a:	f003 0306 	and.w	r3, r3, #6
 800957e:	b2db      	uxtb	r3, r3
 8009580:	f063 030f 	orn	r3, r3, #15
 8009584:	b2da      	uxtb	r2, r3
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	490e      	ldr	r1, [pc, #56]	@ (80095cc <I2C_MasterRequestWrite+0xfc>)
 8009592:	68f8      	ldr	r0, [r7, #12]
 8009594:	f000 fa4e 	bl	8009a34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009598:	4603      	mov	r3, r0
 800959a:	2b00      	cmp	r3, #0
 800959c:	d001      	beq.n	80095a2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800959e:	2301      	movs	r3, #1
 80095a0:	e010      	b.n	80095c4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80095a2:	897b      	ldrh	r3, [r7, #10]
 80095a4:	b2da      	uxtb	r2, r3
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	687a      	ldr	r2, [r7, #4]
 80095b0:	4907      	ldr	r1, [pc, #28]	@ (80095d0 <I2C_MasterRequestWrite+0x100>)
 80095b2:	68f8      	ldr	r0, [r7, #12]
 80095b4:	f000 fa3e 	bl	8009a34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80095b8:	4603      	mov	r3, r0
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d001      	beq.n	80095c2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80095be:	2301      	movs	r3, #1
 80095c0:	e000      	b.n	80095c4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80095c2:	2300      	movs	r3, #0
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3718      	adds	r7, #24
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}
 80095cc:	00010008 	.word	0x00010008
 80095d0:	00010002 	.word	0x00010002

080095d4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b088      	sub	sp, #32
 80095d8:	af02      	add	r7, sp, #8
 80095da:	60f8      	str	r0, [r7, #12]
 80095dc:	607a      	str	r2, [r7, #4]
 80095de:	603b      	str	r3, [r7, #0]
 80095e0:	460b      	mov	r3, r1
 80095e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095e8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	681a      	ldr	r2, [r3, #0]
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80095f8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	2b08      	cmp	r3, #8
 80095fe:	d006      	beq.n	800960e <I2C_MasterRequestRead+0x3a>
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	2b01      	cmp	r3, #1
 8009604:	d003      	beq.n	800960e <I2C_MasterRequestRead+0x3a>
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800960c:	d108      	bne.n	8009620 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	681a      	ldr	r2, [r3, #0]
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800961c:	601a      	str	r2, [r3, #0]
 800961e:	e00b      	b.n	8009638 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009624:	2b11      	cmp	r3, #17
 8009626:	d107      	bne.n	8009638 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	681a      	ldr	r2, [r3, #0]
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009636:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	9300      	str	r3, [sp, #0]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2200      	movs	r2, #0
 8009640:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009644:	68f8      	ldr	r0, [r7, #12]
 8009646:	f000 f97b 	bl	8009940 <I2C_WaitOnFlagUntilTimeout>
 800964a:	4603      	mov	r3, r0
 800964c:	2b00      	cmp	r3, #0
 800964e:	d00d      	beq.n	800966c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800965a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800965e:	d103      	bne.n	8009668 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009666:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009668:	2303      	movs	r3, #3
 800966a:	e079      	b.n	8009760 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	691b      	ldr	r3, [r3, #16]
 8009670:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009674:	d108      	bne.n	8009688 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009676:	897b      	ldrh	r3, [r7, #10]
 8009678:	b2db      	uxtb	r3, r3
 800967a:	f043 0301 	orr.w	r3, r3, #1
 800967e:	b2da      	uxtb	r2, r3
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	611a      	str	r2, [r3, #16]
 8009686:	e05f      	b.n	8009748 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009688:	897b      	ldrh	r3, [r7, #10]
 800968a:	11db      	asrs	r3, r3, #7
 800968c:	b2db      	uxtb	r3, r3
 800968e:	f003 0306 	and.w	r3, r3, #6
 8009692:	b2db      	uxtb	r3, r3
 8009694:	f063 030f 	orn	r3, r3, #15
 8009698:	b2da      	uxtb	r2, r3
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	687a      	ldr	r2, [r7, #4]
 80096a4:	4930      	ldr	r1, [pc, #192]	@ (8009768 <I2C_MasterRequestRead+0x194>)
 80096a6:	68f8      	ldr	r0, [r7, #12]
 80096a8:	f000 f9c4 	bl	8009a34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80096ac:	4603      	mov	r3, r0
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d001      	beq.n	80096b6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80096b2:	2301      	movs	r3, #1
 80096b4:	e054      	b.n	8009760 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80096b6:	897b      	ldrh	r3, [r7, #10]
 80096b8:	b2da      	uxtb	r2, r3
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	687a      	ldr	r2, [r7, #4]
 80096c4:	4929      	ldr	r1, [pc, #164]	@ (800976c <I2C_MasterRequestRead+0x198>)
 80096c6:	68f8      	ldr	r0, [r7, #12]
 80096c8:	f000 f9b4 	bl	8009a34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80096cc:	4603      	mov	r3, r0
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d001      	beq.n	80096d6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80096d2:	2301      	movs	r3, #1
 80096d4:	e044      	b.n	8009760 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80096d6:	2300      	movs	r3, #0
 80096d8:	613b      	str	r3, [r7, #16]
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	695b      	ldr	r3, [r3, #20]
 80096e0:	613b      	str	r3, [r7, #16]
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	699b      	ldr	r3, [r3, #24]
 80096e8:	613b      	str	r3, [r7, #16]
 80096ea:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	681a      	ldr	r2, [r3, #0]
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80096fa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	9300      	str	r3, [sp, #0]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2200      	movs	r2, #0
 8009704:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009708:	68f8      	ldr	r0, [r7, #12]
 800970a:	f000 f919 	bl	8009940 <I2C_WaitOnFlagUntilTimeout>
 800970e:	4603      	mov	r3, r0
 8009710:	2b00      	cmp	r3, #0
 8009712:	d00d      	beq.n	8009730 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800971e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009722:	d103      	bne.n	800972c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800972a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800972c:	2303      	movs	r3, #3
 800972e:	e017      	b.n	8009760 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8009730:	897b      	ldrh	r3, [r7, #10]
 8009732:	11db      	asrs	r3, r3, #7
 8009734:	b2db      	uxtb	r3, r3
 8009736:	f003 0306 	and.w	r3, r3, #6
 800973a:	b2db      	uxtb	r3, r3
 800973c:	f063 030e 	orn	r3, r3, #14
 8009740:	b2da      	uxtb	r2, r3
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	687a      	ldr	r2, [r7, #4]
 800974c:	4907      	ldr	r1, [pc, #28]	@ (800976c <I2C_MasterRequestRead+0x198>)
 800974e:	68f8      	ldr	r0, [r7, #12]
 8009750:	f000 f970 	bl	8009a34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009754:	4603      	mov	r3, r0
 8009756:	2b00      	cmp	r3, #0
 8009758:	d001      	beq.n	800975e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800975a:	2301      	movs	r3, #1
 800975c:	e000      	b.n	8009760 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800975e:	2300      	movs	r3, #0
}
 8009760:	4618      	mov	r0, r3
 8009762:	3718      	adds	r7, #24
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}
 8009768:	00010008 	.word	0x00010008
 800976c:	00010002 	.word	0x00010002

08009770 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b088      	sub	sp, #32
 8009774:	af02      	add	r7, sp, #8
 8009776:	60f8      	str	r0, [r7, #12]
 8009778:	4608      	mov	r0, r1
 800977a:	4611      	mov	r1, r2
 800977c:	461a      	mov	r2, r3
 800977e:	4603      	mov	r3, r0
 8009780:	817b      	strh	r3, [r7, #10]
 8009782:	460b      	mov	r3, r1
 8009784:	813b      	strh	r3, [r7, #8]
 8009786:	4613      	mov	r3, r2
 8009788:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	681a      	ldr	r2, [r3, #0]
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009798:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	681a      	ldr	r2, [r3, #0]
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80097a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80097aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ac:	9300      	str	r3, [sp, #0]
 80097ae:	6a3b      	ldr	r3, [r7, #32]
 80097b0:	2200      	movs	r2, #0
 80097b2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80097b6:	68f8      	ldr	r0, [r7, #12]
 80097b8:	f000 f8c2 	bl	8009940 <I2C_WaitOnFlagUntilTimeout>
 80097bc:	4603      	mov	r3, r0
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d00d      	beq.n	80097de <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097d0:	d103      	bne.n	80097da <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80097d8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80097da:	2303      	movs	r3, #3
 80097dc:	e0aa      	b.n	8009934 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80097de:	897b      	ldrh	r3, [r7, #10]
 80097e0:	b2db      	uxtb	r3, r3
 80097e2:	461a      	mov	r2, r3
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80097ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80097ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097f0:	6a3a      	ldr	r2, [r7, #32]
 80097f2:	4952      	ldr	r1, [pc, #328]	@ (800993c <I2C_RequestMemoryRead+0x1cc>)
 80097f4:	68f8      	ldr	r0, [r7, #12]
 80097f6:	f000 f91d 	bl	8009a34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80097fa:	4603      	mov	r3, r0
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d001      	beq.n	8009804 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009800:	2301      	movs	r3, #1
 8009802:	e097      	b.n	8009934 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009804:	2300      	movs	r3, #0
 8009806:	617b      	str	r3, [r7, #20]
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	695b      	ldr	r3, [r3, #20]
 800980e:	617b      	str	r3, [r7, #20]
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	699b      	ldr	r3, [r3, #24]
 8009816:	617b      	str	r3, [r7, #20]
 8009818:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800981a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800981c:	6a39      	ldr	r1, [r7, #32]
 800981e:	68f8      	ldr	r0, [r7, #12]
 8009820:	f000 f9a8 	bl	8009b74 <I2C_WaitOnTXEFlagUntilTimeout>
 8009824:	4603      	mov	r3, r0
 8009826:	2b00      	cmp	r3, #0
 8009828:	d00d      	beq.n	8009846 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800982e:	2b04      	cmp	r3, #4
 8009830:	d107      	bne.n	8009842 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	681a      	ldr	r2, [r3, #0]
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009840:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009842:	2301      	movs	r3, #1
 8009844:	e076      	b.n	8009934 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009846:	88fb      	ldrh	r3, [r7, #6]
 8009848:	2b01      	cmp	r3, #1
 800984a:	d105      	bne.n	8009858 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800984c:	893b      	ldrh	r3, [r7, #8]
 800984e:	b2da      	uxtb	r2, r3
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	611a      	str	r2, [r3, #16]
 8009856:	e021      	b.n	800989c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009858:	893b      	ldrh	r3, [r7, #8]
 800985a:	0a1b      	lsrs	r3, r3, #8
 800985c:	b29b      	uxth	r3, r3
 800985e:	b2da      	uxtb	r2, r3
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009866:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009868:	6a39      	ldr	r1, [r7, #32]
 800986a:	68f8      	ldr	r0, [r7, #12]
 800986c:	f000 f982 	bl	8009b74 <I2C_WaitOnTXEFlagUntilTimeout>
 8009870:	4603      	mov	r3, r0
 8009872:	2b00      	cmp	r3, #0
 8009874:	d00d      	beq.n	8009892 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800987a:	2b04      	cmp	r3, #4
 800987c:	d107      	bne.n	800988e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	681a      	ldr	r2, [r3, #0]
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800988c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800988e:	2301      	movs	r3, #1
 8009890:	e050      	b.n	8009934 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009892:	893b      	ldrh	r3, [r7, #8]
 8009894:	b2da      	uxtb	r2, r3
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800989c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800989e:	6a39      	ldr	r1, [r7, #32]
 80098a0:	68f8      	ldr	r0, [r7, #12]
 80098a2:	f000 f967 	bl	8009b74 <I2C_WaitOnTXEFlagUntilTimeout>
 80098a6:	4603      	mov	r3, r0
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d00d      	beq.n	80098c8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098b0:	2b04      	cmp	r3, #4
 80098b2:	d107      	bne.n	80098c4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	681a      	ldr	r2, [r3, #0]
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80098c2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80098c4:	2301      	movs	r3, #1
 80098c6:	e035      	b.n	8009934 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	681a      	ldr	r2, [r3, #0]
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80098d6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80098d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098da:	9300      	str	r3, [sp, #0]
 80098dc:	6a3b      	ldr	r3, [r7, #32]
 80098de:	2200      	movs	r2, #0
 80098e0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80098e4:	68f8      	ldr	r0, [r7, #12]
 80098e6:	f000 f82b 	bl	8009940 <I2C_WaitOnFlagUntilTimeout>
 80098ea:	4603      	mov	r3, r0
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d00d      	beq.n	800990c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098fe:	d103      	bne.n	8009908 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009906:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009908:	2303      	movs	r3, #3
 800990a:	e013      	b.n	8009934 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800990c:	897b      	ldrh	r3, [r7, #10]
 800990e:	b2db      	uxtb	r3, r3
 8009910:	f043 0301 	orr.w	r3, r3, #1
 8009914:	b2da      	uxtb	r2, r3
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800991c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800991e:	6a3a      	ldr	r2, [r7, #32]
 8009920:	4906      	ldr	r1, [pc, #24]	@ (800993c <I2C_RequestMemoryRead+0x1cc>)
 8009922:	68f8      	ldr	r0, [r7, #12]
 8009924:	f000 f886 	bl	8009a34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009928:	4603      	mov	r3, r0
 800992a:	2b00      	cmp	r3, #0
 800992c:	d001      	beq.n	8009932 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800992e:	2301      	movs	r3, #1
 8009930:	e000      	b.n	8009934 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009932:	2300      	movs	r3, #0
}
 8009934:	4618      	mov	r0, r3
 8009936:	3718      	adds	r7, #24
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}
 800993c:	00010002 	.word	0x00010002

08009940 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b084      	sub	sp, #16
 8009944:	af00      	add	r7, sp, #0
 8009946:	60f8      	str	r0, [r7, #12]
 8009948:	60b9      	str	r1, [r7, #8]
 800994a:	603b      	str	r3, [r7, #0]
 800994c:	4613      	mov	r3, r2
 800994e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009950:	e048      	b.n	80099e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009958:	d044      	beq.n	80099e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800995a:	f7fd ff03 	bl	8007764 <HAL_GetTick>
 800995e:	4602      	mov	r2, r0
 8009960:	69bb      	ldr	r3, [r7, #24]
 8009962:	1ad3      	subs	r3, r2, r3
 8009964:	683a      	ldr	r2, [r7, #0]
 8009966:	429a      	cmp	r2, r3
 8009968:	d302      	bcc.n	8009970 <I2C_WaitOnFlagUntilTimeout+0x30>
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d139      	bne.n	80099e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	0c1b      	lsrs	r3, r3, #16
 8009974:	b2db      	uxtb	r3, r3
 8009976:	2b01      	cmp	r3, #1
 8009978:	d10d      	bne.n	8009996 <I2C_WaitOnFlagUntilTimeout+0x56>
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	695b      	ldr	r3, [r3, #20]
 8009980:	43da      	mvns	r2, r3
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	4013      	ands	r3, r2
 8009986:	b29b      	uxth	r3, r3
 8009988:	2b00      	cmp	r3, #0
 800998a:	bf0c      	ite	eq
 800998c:	2301      	moveq	r3, #1
 800998e:	2300      	movne	r3, #0
 8009990:	b2db      	uxtb	r3, r3
 8009992:	461a      	mov	r2, r3
 8009994:	e00c      	b.n	80099b0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	699b      	ldr	r3, [r3, #24]
 800999c:	43da      	mvns	r2, r3
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	4013      	ands	r3, r2
 80099a2:	b29b      	uxth	r3, r3
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	bf0c      	ite	eq
 80099a8:	2301      	moveq	r3, #1
 80099aa:	2300      	movne	r3, #0
 80099ac:	b2db      	uxtb	r3, r3
 80099ae:	461a      	mov	r2, r3
 80099b0:	79fb      	ldrb	r3, [r7, #7]
 80099b2:	429a      	cmp	r2, r3
 80099b4:	d116      	bne.n	80099e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	2200      	movs	r2, #0
 80099ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	2220      	movs	r2, #32
 80099c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	2200      	movs	r2, #0
 80099c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099d0:	f043 0220 	orr.w	r2, r3, #32
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	2200      	movs	r2, #0
 80099dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80099e0:	2301      	movs	r3, #1
 80099e2:	e023      	b.n	8009a2c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	0c1b      	lsrs	r3, r3, #16
 80099e8:	b2db      	uxtb	r3, r3
 80099ea:	2b01      	cmp	r3, #1
 80099ec:	d10d      	bne.n	8009a0a <I2C_WaitOnFlagUntilTimeout+0xca>
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	695b      	ldr	r3, [r3, #20]
 80099f4:	43da      	mvns	r2, r3
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	4013      	ands	r3, r2
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	bf0c      	ite	eq
 8009a00:	2301      	moveq	r3, #1
 8009a02:	2300      	movne	r3, #0
 8009a04:	b2db      	uxtb	r3, r3
 8009a06:	461a      	mov	r2, r3
 8009a08:	e00c      	b.n	8009a24 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	699b      	ldr	r3, [r3, #24]
 8009a10:	43da      	mvns	r2, r3
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	4013      	ands	r3, r2
 8009a16:	b29b      	uxth	r3, r3
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	bf0c      	ite	eq
 8009a1c:	2301      	moveq	r3, #1
 8009a1e:	2300      	movne	r3, #0
 8009a20:	b2db      	uxtb	r3, r3
 8009a22:	461a      	mov	r2, r3
 8009a24:	79fb      	ldrb	r3, [r7, #7]
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d093      	beq.n	8009952 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009a2a:	2300      	movs	r3, #0
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3710      	adds	r7, #16
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}

08009a34 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b084      	sub	sp, #16
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	60f8      	str	r0, [r7, #12]
 8009a3c:	60b9      	str	r1, [r7, #8]
 8009a3e:	607a      	str	r2, [r7, #4]
 8009a40:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009a42:	e071      	b.n	8009b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	695b      	ldr	r3, [r3, #20]
 8009a4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009a4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a52:	d123      	bne.n	8009a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	681a      	ldr	r2, [r3, #0]
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009a62:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009a6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2200      	movs	r2, #0
 8009a72:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	2220      	movs	r2, #32
 8009a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a88:	f043 0204 	orr.w	r2, r3, #4
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	2200      	movs	r2, #0
 8009a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009a98:	2301      	movs	r3, #1
 8009a9a:	e067      	b.n	8009b6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aa2:	d041      	beq.n	8009b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009aa4:	f7fd fe5e 	bl	8007764 <HAL_GetTick>
 8009aa8:	4602      	mov	r2, r0
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	1ad3      	subs	r3, r2, r3
 8009aae:	687a      	ldr	r2, [r7, #4]
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d302      	bcc.n	8009aba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d136      	bne.n	8009b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	0c1b      	lsrs	r3, r3, #16
 8009abe:	b2db      	uxtb	r3, r3
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d10c      	bne.n	8009ade <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	695b      	ldr	r3, [r3, #20]
 8009aca:	43da      	mvns	r2, r3
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	4013      	ands	r3, r2
 8009ad0:	b29b      	uxth	r3, r3
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	bf14      	ite	ne
 8009ad6:	2301      	movne	r3, #1
 8009ad8:	2300      	moveq	r3, #0
 8009ada:	b2db      	uxtb	r3, r3
 8009adc:	e00b      	b.n	8009af6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	699b      	ldr	r3, [r3, #24]
 8009ae4:	43da      	mvns	r2, r3
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	4013      	ands	r3, r2
 8009aea:	b29b      	uxth	r3, r3
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	bf14      	ite	ne
 8009af0:	2301      	movne	r3, #1
 8009af2:	2300      	moveq	r3, #0
 8009af4:	b2db      	uxtb	r3, r3
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d016      	beq.n	8009b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2200      	movs	r2, #0
 8009afe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2220      	movs	r2, #32
 8009b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b14:	f043 0220 	orr.w	r2, r3, #32
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009b24:	2301      	movs	r3, #1
 8009b26:	e021      	b.n	8009b6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	0c1b      	lsrs	r3, r3, #16
 8009b2c:	b2db      	uxtb	r3, r3
 8009b2e:	2b01      	cmp	r3, #1
 8009b30:	d10c      	bne.n	8009b4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	695b      	ldr	r3, [r3, #20]
 8009b38:	43da      	mvns	r2, r3
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	4013      	ands	r3, r2
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	bf14      	ite	ne
 8009b44:	2301      	movne	r3, #1
 8009b46:	2300      	moveq	r3, #0
 8009b48:	b2db      	uxtb	r3, r3
 8009b4a:	e00b      	b.n	8009b64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	699b      	ldr	r3, [r3, #24]
 8009b52:	43da      	mvns	r2, r3
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	4013      	ands	r3, r2
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	bf14      	ite	ne
 8009b5e:	2301      	movne	r3, #1
 8009b60:	2300      	moveq	r3, #0
 8009b62:	b2db      	uxtb	r3, r3
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	f47f af6d 	bne.w	8009a44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8009b6a:	2300      	movs	r3, #0
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3710      	adds	r7, #16
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}

08009b74 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b084      	sub	sp, #16
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	60f8      	str	r0, [r7, #12]
 8009b7c:	60b9      	str	r1, [r7, #8]
 8009b7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009b80:	e034      	b.n	8009bec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009b82:	68f8      	ldr	r0, [r7, #12]
 8009b84:	f000 f8e3 	bl	8009d4e <I2C_IsAcknowledgeFailed>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d001      	beq.n	8009b92 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009b8e:	2301      	movs	r3, #1
 8009b90:	e034      	b.n	8009bfc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b98:	d028      	beq.n	8009bec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b9a:	f7fd fde3 	bl	8007764 <HAL_GetTick>
 8009b9e:	4602      	mov	r2, r0
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	1ad3      	subs	r3, r2, r3
 8009ba4:	68ba      	ldr	r2, [r7, #8]
 8009ba6:	429a      	cmp	r2, r3
 8009ba8:	d302      	bcc.n	8009bb0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d11d      	bne.n	8009bec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	695b      	ldr	r3, [r3, #20]
 8009bb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009bba:	2b80      	cmp	r3, #128	@ 0x80
 8009bbc:	d016      	beq.n	8009bec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	2220      	movs	r2, #32
 8009bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bd8:	f043 0220 	orr.w	r2, r3, #32
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2200      	movs	r2, #0
 8009be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009be8:	2301      	movs	r3, #1
 8009bea:	e007      	b.n	8009bfc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	695b      	ldr	r3, [r3, #20]
 8009bf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009bf6:	2b80      	cmp	r3, #128	@ 0x80
 8009bf8:	d1c3      	bne.n	8009b82 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009bfa:	2300      	movs	r3, #0
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3710      	adds	r7, #16
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}

08009c04 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b084      	sub	sp, #16
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	60f8      	str	r0, [r7, #12]
 8009c0c:	60b9      	str	r1, [r7, #8]
 8009c0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009c10:	e034      	b.n	8009c7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009c12:	68f8      	ldr	r0, [r7, #12]
 8009c14:	f000 f89b 	bl	8009d4e <I2C_IsAcknowledgeFailed>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d001      	beq.n	8009c22 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009c1e:	2301      	movs	r3, #1
 8009c20:	e034      	b.n	8009c8c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c28:	d028      	beq.n	8009c7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c2a:	f7fd fd9b 	bl	8007764 <HAL_GetTick>
 8009c2e:	4602      	mov	r2, r0
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	1ad3      	subs	r3, r2, r3
 8009c34:	68ba      	ldr	r2, [r7, #8]
 8009c36:	429a      	cmp	r2, r3
 8009c38:	d302      	bcc.n	8009c40 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d11d      	bne.n	8009c7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	695b      	ldr	r3, [r3, #20]
 8009c46:	f003 0304 	and.w	r3, r3, #4
 8009c4a:	2b04      	cmp	r3, #4
 8009c4c:	d016      	beq.n	8009c7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2200      	movs	r2, #0
 8009c52:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	2220      	movs	r2, #32
 8009c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c68:	f043 0220 	orr.w	r2, r3, #32
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2200      	movs	r2, #0
 8009c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009c78:	2301      	movs	r3, #1
 8009c7a:	e007      	b.n	8009c8c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	695b      	ldr	r3, [r3, #20]
 8009c82:	f003 0304 	and.w	r3, r3, #4
 8009c86:	2b04      	cmp	r3, #4
 8009c88:	d1c3      	bne.n	8009c12 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009c8a:	2300      	movs	r3, #0
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3710      	adds	r7, #16
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b084      	sub	sp, #16
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	60f8      	str	r0, [r7, #12]
 8009c9c:	60b9      	str	r1, [r7, #8]
 8009c9e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009ca0:	e049      	b.n	8009d36 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	695b      	ldr	r3, [r3, #20]
 8009ca8:	f003 0310 	and.w	r3, r3, #16
 8009cac:	2b10      	cmp	r3, #16
 8009cae:	d119      	bne.n	8009ce4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f06f 0210 	mvn.w	r2, #16
 8009cb8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	2220      	movs	r2, #32
 8009cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	e030      	b.n	8009d46 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ce4:	f7fd fd3e 	bl	8007764 <HAL_GetTick>
 8009ce8:	4602      	mov	r2, r0
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	1ad3      	subs	r3, r2, r3
 8009cee:	68ba      	ldr	r2, [r7, #8]
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	d302      	bcc.n	8009cfa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d11d      	bne.n	8009d36 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	695b      	ldr	r3, [r3, #20]
 8009d00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d04:	2b40      	cmp	r3, #64	@ 0x40
 8009d06:	d016      	beq.n	8009d36 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	2220      	movs	r2, #32
 8009d12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d22:	f043 0220 	orr.w	r2, r3, #32
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8009d32:	2301      	movs	r3, #1
 8009d34:	e007      	b.n	8009d46 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	695b      	ldr	r3, [r3, #20]
 8009d3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d40:	2b40      	cmp	r3, #64	@ 0x40
 8009d42:	d1ae      	bne.n	8009ca2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009d44:	2300      	movs	r3, #0
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3710      	adds	r7, #16
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}

08009d4e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009d4e:	b480      	push	{r7}
 8009d50:	b083      	sub	sp, #12
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	695b      	ldr	r3, [r3, #20]
 8009d5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009d60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d64:	d11b      	bne.n	8009d9e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009d6e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2200      	movs	r2, #0
 8009d74:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2220      	movs	r2, #32
 8009d7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2200      	movs	r2, #0
 8009d82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d8a:	f043 0204 	orr.w	r2, r3, #4
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2200      	movs	r2, #0
 8009d96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	e000      	b.n	8009da0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009d9e:	2300      	movs	r3, #0
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	370c      	adds	r7, #12
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr

08009dac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b086      	sub	sp, #24
 8009db0:	af02      	add	r7, sp, #8
 8009db2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d101      	bne.n	8009dbe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009dba:	2301      	movs	r3, #1
 8009dbc:	e101      	b.n	8009fc2 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8009dca:	b2db      	uxtb	r3, r3
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d106      	bne.n	8009dde <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f007 f923 	bl	8011024 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2203      	movs	r2, #3
 8009de2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009dec:	d102      	bne.n	8009df4 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2200      	movs	r2, #0
 8009df2:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f003 fce0 	bl	800d7be <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6818      	ldr	r0, [r3, #0]
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	7c1a      	ldrb	r2, [r3, #16]
 8009e06:	f88d 2000 	strb.w	r2, [sp]
 8009e0a:	3304      	adds	r3, #4
 8009e0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009e0e:	f003 fbbf 	bl	800d590 <USB_CoreInit>
 8009e12:	4603      	mov	r3, r0
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d005      	beq.n	8009e24 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2202      	movs	r2, #2
 8009e1c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8009e20:	2301      	movs	r3, #1
 8009e22:	e0ce      	b.n	8009fc2 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	2100      	movs	r1, #0
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f003 fcd8 	bl	800d7e0 <USB_SetCurrentMode>
 8009e30:	4603      	mov	r3, r0
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d005      	beq.n	8009e42 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2202      	movs	r2, #2
 8009e3a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8009e3e:	2301      	movs	r3, #1
 8009e40:	e0bf      	b.n	8009fc2 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009e42:	2300      	movs	r3, #0
 8009e44:	73fb      	strb	r3, [r7, #15]
 8009e46:	e04a      	b.n	8009ede <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009e48:	7bfa      	ldrb	r2, [r7, #15]
 8009e4a:	6879      	ldr	r1, [r7, #4]
 8009e4c:	4613      	mov	r3, r2
 8009e4e:	00db      	lsls	r3, r3, #3
 8009e50:	4413      	add	r3, r2
 8009e52:	009b      	lsls	r3, r3, #2
 8009e54:	440b      	add	r3, r1
 8009e56:	3315      	adds	r3, #21
 8009e58:	2201      	movs	r2, #1
 8009e5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009e5c:	7bfa      	ldrb	r2, [r7, #15]
 8009e5e:	6879      	ldr	r1, [r7, #4]
 8009e60:	4613      	mov	r3, r2
 8009e62:	00db      	lsls	r3, r3, #3
 8009e64:	4413      	add	r3, r2
 8009e66:	009b      	lsls	r3, r3, #2
 8009e68:	440b      	add	r3, r1
 8009e6a:	3314      	adds	r3, #20
 8009e6c:	7bfa      	ldrb	r2, [r7, #15]
 8009e6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009e70:	7bfa      	ldrb	r2, [r7, #15]
 8009e72:	7bfb      	ldrb	r3, [r7, #15]
 8009e74:	b298      	uxth	r0, r3
 8009e76:	6879      	ldr	r1, [r7, #4]
 8009e78:	4613      	mov	r3, r2
 8009e7a:	00db      	lsls	r3, r3, #3
 8009e7c:	4413      	add	r3, r2
 8009e7e:	009b      	lsls	r3, r3, #2
 8009e80:	440b      	add	r3, r1
 8009e82:	332e      	adds	r3, #46	@ 0x2e
 8009e84:	4602      	mov	r2, r0
 8009e86:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009e88:	7bfa      	ldrb	r2, [r7, #15]
 8009e8a:	6879      	ldr	r1, [r7, #4]
 8009e8c:	4613      	mov	r3, r2
 8009e8e:	00db      	lsls	r3, r3, #3
 8009e90:	4413      	add	r3, r2
 8009e92:	009b      	lsls	r3, r3, #2
 8009e94:	440b      	add	r3, r1
 8009e96:	3318      	adds	r3, #24
 8009e98:	2200      	movs	r2, #0
 8009e9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009e9c:	7bfa      	ldrb	r2, [r7, #15]
 8009e9e:	6879      	ldr	r1, [r7, #4]
 8009ea0:	4613      	mov	r3, r2
 8009ea2:	00db      	lsls	r3, r3, #3
 8009ea4:	4413      	add	r3, r2
 8009ea6:	009b      	lsls	r3, r3, #2
 8009ea8:	440b      	add	r3, r1
 8009eaa:	331c      	adds	r3, #28
 8009eac:	2200      	movs	r2, #0
 8009eae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009eb0:	7bfa      	ldrb	r2, [r7, #15]
 8009eb2:	6879      	ldr	r1, [r7, #4]
 8009eb4:	4613      	mov	r3, r2
 8009eb6:	00db      	lsls	r3, r3, #3
 8009eb8:	4413      	add	r3, r2
 8009eba:	009b      	lsls	r3, r3, #2
 8009ebc:	440b      	add	r3, r1
 8009ebe:	3320      	adds	r3, #32
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009ec4:	7bfa      	ldrb	r2, [r7, #15]
 8009ec6:	6879      	ldr	r1, [r7, #4]
 8009ec8:	4613      	mov	r3, r2
 8009eca:	00db      	lsls	r3, r3, #3
 8009ecc:	4413      	add	r3, r2
 8009ece:	009b      	lsls	r3, r3, #2
 8009ed0:	440b      	add	r3, r1
 8009ed2:	3324      	adds	r3, #36	@ 0x24
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009ed8:	7bfb      	ldrb	r3, [r7, #15]
 8009eda:	3301      	adds	r3, #1
 8009edc:	73fb      	strb	r3, [r7, #15]
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	791b      	ldrb	r3, [r3, #4]
 8009ee2:	7bfa      	ldrb	r2, [r7, #15]
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d3af      	bcc.n	8009e48 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009ee8:	2300      	movs	r3, #0
 8009eea:	73fb      	strb	r3, [r7, #15]
 8009eec:	e044      	b.n	8009f78 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009eee:	7bfa      	ldrb	r2, [r7, #15]
 8009ef0:	6879      	ldr	r1, [r7, #4]
 8009ef2:	4613      	mov	r3, r2
 8009ef4:	00db      	lsls	r3, r3, #3
 8009ef6:	4413      	add	r3, r2
 8009ef8:	009b      	lsls	r3, r3, #2
 8009efa:	440b      	add	r3, r1
 8009efc:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8009f00:	2200      	movs	r2, #0
 8009f02:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009f04:	7bfa      	ldrb	r2, [r7, #15]
 8009f06:	6879      	ldr	r1, [r7, #4]
 8009f08:	4613      	mov	r3, r2
 8009f0a:	00db      	lsls	r3, r3, #3
 8009f0c:	4413      	add	r3, r2
 8009f0e:	009b      	lsls	r3, r3, #2
 8009f10:	440b      	add	r3, r1
 8009f12:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8009f16:	7bfa      	ldrb	r2, [r7, #15]
 8009f18:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009f1a:	7bfa      	ldrb	r2, [r7, #15]
 8009f1c:	6879      	ldr	r1, [r7, #4]
 8009f1e:	4613      	mov	r3, r2
 8009f20:	00db      	lsls	r3, r3, #3
 8009f22:	4413      	add	r3, r2
 8009f24:	009b      	lsls	r3, r3, #2
 8009f26:	440b      	add	r3, r1
 8009f28:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009f30:	7bfa      	ldrb	r2, [r7, #15]
 8009f32:	6879      	ldr	r1, [r7, #4]
 8009f34:	4613      	mov	r3, r2
 8009f36:	00db      	lsls	r3, r3, #3
 8009f38:	4413      	add	r3, r2
 8009f3a:	009b      	lsls	r3, r3, #2
 8009f3c:	440b      	add	r3, r1
 8009f3e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8009f42:	2200      	movs	r2, #0
 8009f44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009f46:	7bfa      	ldrb	r2, [r7, #15]
 8009f48:	6879      	ldr	r1, [r7, #4]
 8009f4a:	4613      	mov	r3, r2
 8009f4c:	00db      	lsls	r3, r3, #3
 8009f4e:	4413      	add	r3, r2
 8009f50:	009b      	lsls	r3, r3, #2
 8009f52:	440b      	add	r3, r1
 8009f54:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009f58:	2200      	movs	r2, #0
 8009f5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009f5c:	7bfa      	ldrb	r2, [r7, #15]
 8009f5e:	6879      	ldr	r1, [r7, #4]
 8009f60:	4613      	mov	r3, r2
 8009f62:	00db      	lsls	r3, r3, #3
 8009f64:	4413      	add	r3, r2
 8009f66:	009b      	lsls	r3, r3, #2
 8009f68:	440b      	add	r3, r1
 8009f6a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8009f6e:	2200      	movs	r2, #0
 8009f70:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009f72:	7bfb      	ldrb	r3, [r7, #15]
 8009f74:	3301      	adds	r3, #1
 8009f76:	73fb      	strb	r3, [r7, #15]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	791b      	ldrb	r3, [r3, #4]
 8009f7c:	7bfa      	ldrb	r2, [r7, #15]
 8009f7e:	429a      	cmp	r2, r3
 8009f80:	d3b5      	bcc.n	8009eee <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6818      	ldr	r0, [r3, #0]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	7c1a      	ldrb	r2, [r3, #16]
 8009f8a:	f88d 2000 	strb.w	r2, [sp]
 8009f8e:	3304      	adds	r3, #4
 8009f90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009f92:	f003 fc71 	bl	800d878 <USB_DevInit>
 8009f96:	4603      	mov	r3, r0
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d005      	beq.n	8009fa8 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2202      	movs	r2, #2
 8009fa0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	e00c      	b.n	8009fc2 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2200      	movs	r2, #0
 8009fac:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2201      	movs	r2, #1
 8009fb2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f004 fcbb 	bl	800e936 <USB_DevDisconnect>

  return HAL_OK;
 8009fc0:	2300      	movs	r3, #0
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3710      	adds	r7, #16
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}

08009fca <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009fca:	b580      	push	{r7, lr}
 8009fcc:	b084      	sub	sp, #16
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009fde:	2b01      	cmp	r3, #1
 8009fe0:	d101      	bne.n	8009fe6 <HAL_PCD_Start+0x1c>
 8009fe2:	2302      	movs	r3, #2
 8009fe4:	e022      	b.n	800a02c <HAL_PCD_Start+0x62>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2201      	movs	r2, #1
 8009fea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	68db      	ldr	r3, [r3, #12]
 8009ff2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d009      	beq.n	800a00e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8009ffe:	2b01      	cmp	r3, #1
 800a000:	d105      	bne.n	800a00e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a006:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	4618      	mov	r0, r3
 800a014:	f003 fbc2 	bl	800d79c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	4618      	mov	r0, r3
 800a01e:	f004 fc69 	bl	800e8f4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2200      	movs	r2, #0
 800a026:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800a02a:	2300      	movs	r3, #0
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3710      	adds	r7, #16
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}

0800a034 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800a034:	b590      	push	{r4, r7, lr}
 800a036:	b08d      	sub	sp, #52	@ 0x34
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a042:	6a3b      	ldr	r3, [r7, #32]
 800a044:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	4618      	mov	r0, r3
 800a04c:	f004 fd27 	bl	800ea9e <USB_GetMode>
 800a050:	4603      	mov	r3, r0
 800a052:	2b00      	cmp	r3, #0
 800a054:	f040 848c 	bne.w	800a970 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4618      	mov	r0, r3
 800a05e:	f004 fc8b 	bl	800e978 <USB_ReadInterrupts>
 800a062:	4603      	mov	r3, r0
 800a064:	2b00      	cmp	r3, #0
 800a066:	f000 8482 	beq.w	800a96e <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800a06a:	69fb      	ldr	r3, [r7, #28]
 800a06c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a070:	689b      	ldr	r3, [r3, #8]
 800a072:	0a1b      	lsrs	r3, r3, #8
 800a074:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	4618      	mov	r0, r3
 800a084:	f004 fc78 	bl	800e978 <USB_ReadInterrupts>
 800a088:	4603      	mov	r3, r0
 800a08a:	f003 0302 	and.w	r3, r3, #2
 800a08e:	2b02      	cmp	r3, #2
 800a090:	d107      	bne.n	800a0a2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	695a      	ldr	r2, [r3, #20]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f002 0202 	and.w	r2, r2, #2
 800a0a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f004 fc66 	bl	800e978 <USB_ReadInterrupts>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	f003 0310 	and.w	r3, r3, #16
 800a0b2:	2b10      	cmp	r3, #16
 800a0b4:	d161      	bne.n	800a17a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	699a      	ldr	r2, [r3, #24]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f022 0210 	bic.w	r2, r2, #16
 800a0c4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800a0c6:	6a3b      	ldr	r3, [r7, #32]
 800a0c8:	6a1b      	ldr	r3, [r3, #32]
 800a0ca:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800a0cc:	69bb      	ldr	r3, [r7, #24]
 800a0ce:	f003 020f 	and.w	r2, r3, #15
 800a0d2:	4613      	mov	r3, r2
 800a0d4:	00db      	lsls	r3, r3, #3
 800a0d6:	4413      	add	r3, r2
 800a0d8:	009b      	lsls	r3, r3, #2
 800a0da:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a0de:	687a      	ldr	r2, [r7, #4]
 800a0e0:	4413      	add	r3, r2
 800a0e2:	3304      	adds	r3, #4
 800a0e4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800a0e6:	69bb      	ldr	r3, [r7, #24]
 800a0e8:	0c5b      	lsrs	r3, r3, #17
 800a0ea:	f003 030f 	and.w	r3, r3, #15
 800a0ee:	2b02      	cmp	r3, #2
 800a0f0:	d124      	bne.n	800a13c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800a0f2:	69ba      	ldr	r2, [r7, #24]
 800a0f4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800a0f8:	4013      	ands	r3, r2
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d035      	beq.n	800a16a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800a102:	69bb      	ldr	r3, [r7, #24]
 800a104:	091b      	lsrs	r3, r3, #4
 800a106:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a108:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a10c:	b29b      	uxth	r3, r3
 800a10e:	461a      	mov	r2, r3
 800a110:	6a38      	ldr	r0, [r7, #32]
 800a112:	f004 fa9d 	bl	800e650 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	68da      	ldr	r2, [r3, #12]
 800a11a:	69bb      	ldr	r3, [r7, #24]
 800a11c:	091b      	lsrs	r3, r3, #4
 800a11e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a122:	441a      	add	r2, r3
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	695a      	ldr	r2, [r3, #20]
 800a12c:	69bb      	ldr	r3, [r7, #24]
 800a12e:	091b      	lsrs	r3, r3, #4
 800a130:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a134:	441a      	add	r2, r3
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	615a      	str	r2, [r3, #20]
 800a13a:	e016      	b.n	800a16a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800a13c:	69bb      	ldr	r3, [r7, #24]
 800a13e:	0c5b      	lsrs	r3, r3, #17
 800a140:	f003 030f 	and.w	r3, r3, #15
 800a144:	2b06      	cmp	r3, #6
 800a146:	d110      	bne.n	800a16a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a14e:	2208      	movs	r2, #8
 800a150:	4619      	mov	r1, r3
 800a152:	6a38      	ldr	r0, [r7, #32]
 800a154:	f004 fa7c 	bl	800e650 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	695a      	ldr	r2, [r3, #20]
 800a15c:	69bb      	ldr	r3, [r7, #24]
 800a15e:	091b      	lsrs	r3, r3, #4
 800a160:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a164:	441a      	add	r2, r3
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	699a      	ldr	r2, [r3, #24]
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f042 0210 	orr.w	r2, r2, #16
 800a178:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	4618      	mov	r0, r3
 800a180:	f004 fbfa 	bl	800e978 <USB_ReadInterrupts>
 800a184:	4603      	mov	r3, r0
 800a186:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a18a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a18e:	f040 80a7 	bne.w	800a2e0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800a192:	2300      	movs	r3, #0
 800a194:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	4618      	mov	r0, r3
 800a19c:	f004 fbff 	bl	800e99e <USB_ReadDevAllOutEpInterrupt>
 800a1a0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800a1a2:	e099      	b.n	800a2d8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800a1a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1a6:	f003 0301 	and.w	r3, r3, #1
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	f000 808e 	beq.w	800a2cc <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a1b6:	b2d2      	uxtb	r2, r2
 800a1b8:	4611      	mov	r1, r2
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f004 fc23 	bl	800ea06 <USB_ReadDevOutEPInterrupt>
 800a1c0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	f003 0301 	and.w	r3, r3, #1
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d00c      	beq.n	800a1e6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800a1cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ce:	015a      	lsls	r2, r3, #5
 800a1d0:	69fb      	ldr	r3, [r7, #28]
 800a1d2:	4413      	add	r3, r2
 800a1d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1d8:	461a      	mov	r2, r3
 800a1da:	2301      	movs	r3, #1
 800a1dc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800a1de:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f000 fea3 	bl	800af2c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	f003 0308 	and.w	r3, r3, #8
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d00c      	beq.n	800a20a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800a1f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1f2:	015a      	lsls	r2, r3, #5
 800a1f4:	69fb      	ldr	r3, [r7, #28]
 800a1f6:	4413      	add	r3, r2
 800a1f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1fc:	461a      	mov	r2, r3
 800a1fe:	2308      	movs	r3, #8
 800a200:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800a202:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f000 ff79 	bl	800b0fc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800a20a:	693b      	ldr	r3, [r7, #16]
 800a20c:	f003 0310 	and.w	r3, r3, #16
 800a210:	2b00      	cmp	r3, #0
 800a212:	d008      	beq.n	800a226 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800a214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a216:	015a      	lsls	r2, r3, #5
 800a218:	69fb      	ldr	r3, [r7, #28]
 800a21a:	4413      	add	r3, r2
 800a21c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a220:	461a      	mov	r2, r3
 800a222:	2310      	movs	r3, #16
 800a224:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	f003 0302 	and.w	r3, r3, #2
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d030      	beq.n	800a292 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800a230:	6a3b      	ldr	r3, [r7, #32]
 800a232:	695b      	ldr	r3, [r3, #20]
 800a234:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a238:	2b80      	cmp	r3, #128	@ 0x80
 800a23a:	d109      	bne.n	800a250 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800a23c:	69fb      	ldr	r3, [r7, #28]
 800a23e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a242:	685b      	ldr	r3, [r3, #4]
 800a244:	69fa      	ldr	r2, [r7, #28]
 800a246:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a24a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a24e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800a250:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a252:	4613      	mov	r3, r2
 800a254:	00db      	lsls	r3, r3, #3
 800a256:	4413      	add	r3, r2
 800a258:	009b      	lsls	r3, r3, #2
 800a25a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a25e:	687a      	ldr	r2, [r7, #4]
 800a260:	4413      	add	r3, r2
 800a262:	3304      	adds	r3, #4
 800a264:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	78db      	ldrb	r3, [r3, #3]
 800a26a:	2b01      	cmp	r3, #1
 800a26c:	d108      	bne.n	800a280 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	2200      	movs	r2, #0
 800a272:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800a274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a276:	b2db      	uxtb	r3, r3
 800a278:	4619      	mov	r1, r3
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f006 ffdc 	bl	8011238 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800a280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a282:	015a      	lsls	r2, r3, #5
 800a284:	69fb      	ldr	r3, [r7, #28]
 800a286:	4413      	add	r3, r2
 800a288:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a28c:	461a      	mov	r2, r3
 800a28e:	2302      	movs	r3, #2
 800a290:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	f003 0320 	and.w	r3, r3, #32
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d008      	beq.n	800a2ae <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a29c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a29e:	015a      	lsls	r2, r3, #5
 800a2a0:	69fb      	ldr	r3, [r7, #28]
 800a2a2:	4413      	add	r3, r2
 800a2a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2a8:	461a      	mov	r2, r3
 800a2aa:	2320      	movs	r3, #32
 800a2ac:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d009      	beq.n	800a2cc <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800a2b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ba:	015a      	lsls	r2, r3, #5
 800a2bc:	69fb      	ldr	r3, [r7, #28]
 800a2be:	4413      	add	r3, r2
 800a2c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2c4:	461a      	mov	r2, r3
 800a2c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a2ca:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800a2cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800a2d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2d4:	085b      	lsrs	r3, r3, #1
 800a2d6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800a2d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	f47f af62 	bne.w	800a1a4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f004 fb47 	bl	800e978 <USB_ReadInterrupts>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a2f0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a2f4:	f040 80db 	bne.w	800a4ae <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f004 fb68 	bl	800e9d2 <USB_ReadDevAllInEpInterrupt>
 800a302:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800a304:	2300      	movs	r3, #0
 800a306:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800a308:	e0cd      	b.n	800a4a6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800a30a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a30c:	f003 0301 	and.w	r3, r3, #1
 800a310:	2b00      	cmp	r3, #0
 800a312:	f000 80c2 	beq.w	800a49a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a31c:	b2d2      	uxtb	r2, r2
 800a31e:	4611      	mov	r1, r2
 800a320:	4618      	mov	r0, r3
 800a322:	f004 fb8e 	bl	800ea42 <USB_ReadDevInEPInterrupt>
 800a326:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	f003 0301 	and.w	r3, r3, #1
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d057      	beq.n	800a3e2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a334:	f003 030f 	and.w	r3, r3, #15
 800a338:	2201      	movs	r2, #1
 800a33a:	fa02 f303 	lsl.w	r3, r2, r3
 800a33e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a340:	69fb      	ldr	r3, [r7, #28]
 800a342:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a346:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	43db      	mvns	r3, r3
 800a34c:	69f9      	ldr	r1, [r7, #28]
 800a34e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a352:	4013      	ands	r3, r2
 800a354:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800a356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a358:	015a      	lsls	r2, r3, #5
 800a35a:	69fb      	ldr	r3, [r7, #28]
 800a35c:	4413      	add	r3, r2
 800a35e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a362:	461a      	mov	r2, r3
 800a364:	2301      	movs	r3, #1
 800a366:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	799b      	ldrb	r3, [r3, #6]
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	d132      	bne.n	800a3d6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800a370:	6879      	ldr	r1, [r7, #4]
 800a372:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a374:	4613      	mov	r3, r2
 800a376:	00db      	lsls	r3, r3, #3
 800a378:	4413      	add	r3, r2
 800a37a:	009b      	lsls	r3, r3, #2
 800a37c:	440b      	add	r3, r1
 800a37e:	3320      	adds	r3, #32
 800a380:	6819      	ldr	r1, [r3, #0]
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a386:	4613      	mov	r3, r2
 800a388:	00db      	lsls	r3, r3, #3
 800a38a:	4413      	add	r3, r2
 800a38c:	009b      	lsls	r3, r3, #2
 800a38e:	4403      	add	r3, r0
 800a390:	331c      	adds	r3, #28
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	4419      	add	r1, r3
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a39a:	4613      	mov	r3, r2
 800a39c:	00db      	lsls	r3, r3, #3
 800a39e:	4413      	add	r3, r2
 800a3a0:	009b      	lsls	r3, r3, #2
 800a3a2:	4403      	add	r3, r0
 800a3a4:	3320      	adds	r3, #32
 800a3a6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800a3a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d113      	bne.n	800a3d6 <HAL_PCD_IRQHandler+0x3a2>
 800a3ae:	6879      	ldr	r1, [r7, #4]
 800a3b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a3b2:	4613      	mov	r3, r2
 800a3b4:	00db      	lsls	r3, r3, #3
 800a3b6:	4413      	add	r3, r2
 800a3b8:	009b      	lsls	r3, r3, #2
 800a3ba:	440b      	add	r3, r1
 800a3bc:	3324      	adds	r3, #36	@ 0x24
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d108      	bne.n	800a3d6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6818      	ldr	r0, [r3, #0]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a3ce:	461a      	mov	r2, r3
 800a3d0:	2101      	movs	r1, #1
 800a3d2:	f004 fb95 	bl	800eb00 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800a3d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3d8:	b2db      	uxtb	r3, r3
 800a3da:	4619      	mov	r1, r3
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f006 feb0 	bl	8011142 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800a3e2:	693b      	ldr	r3, [r7, #16]
 800a3e4:	f003 0308 	and.w	r3, r3, #8
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d008      	beq.n	800a3fe <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800a3ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3ee:	015a      	lsls	r2, r3, #5
 800a3f0:	69fb      	ldr	r3, [r7, #28]
 800a3f2:	4413      	add	r3, r2
 800a3f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3f8:	461a      	mov	r2, r3
 800a3fa:	2308      	movs	r3, #8
 800a3fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	f003 0310 	and.w	r3, r3, #16
 800a404:	2b00      	cmp	r3, #0
 800a406:	d008      	beq.n	800a41a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800a408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a40a:	015a      	lsls	r2, r3, #5
 800a40c:	69fb      	ldr	r3, [r7, #28]
 800a40e:	4413      	add	r3, r2
 800a410:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a414:	461a      	mov	r2, r3
 800a416:	2310      	movs	r3, #16
 800a418:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800a41a:	693b      	ldr	r3, [r7, #16]
 800a41c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a420:	2b00      	cmp	r3, #0
 800a422:	d008      	beq.n	800a436 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800a424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a426:	015a      	lsls	r2, r3, #5
 800a428:	69fb      	ldr	r3, [r7, #28]
 800a42a:	4413      	add	r3, r2
 800a42c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a430:	461a      	mov	r2, r3
 800a432:	2340      	movs	r3, #64	@ 0x40
 800a434:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	f003 0302 	and.w	r3, r3, #2
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d023      	beq.n	800a488 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800a440:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a442:	6a38      	ldr	r0, [r7, #32]
 800a444:	f003 fb7c 	bl	800db40 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800a448:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a44a:	4613      	mov	r3, r2
 800a44c:	00db      	lsls	r3, r3, #3
 800a44e:	4413      	add	r3, r2
 800a450:	009b      	lsls	r3, r3, #2
 800a452:	3310      	adds	r3, #16
 800a454:	687a      	ldr	r2, [r7, #4]
 800a456:	4413      	add	r3, r2
 800a458:	3304      	adds	r3, #4
 800a45a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	78db      	ldrb	r3, [r3, #3]
 800a460:	2b01      	cmp	r3, #1
 800a462:	d108      	bne.n	800a476 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800a464:	697b      	ldr	r3, [r7, #20]
 800a466:	2200      	movs	r2, #0
 800a468:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800a46a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a46c:	b2db      	uxtb	r3, r3
 800a46e:	4619      	mov	r1, r3
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f006 fef3 	bl	801125c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800a476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a478:	015a      	lsls	r2, r3, #5
 800a47a:	69fb      	ldr	r3, [r7, #28]
 800a47c:	4413      	add	r3, r2
 800a47e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a482:	461a      	mov	r2, r3
 800a484:	2302      	movs	r3, #2
 800a486:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d003      	beq.n	800a49a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800a492:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f000 fcbd 	bl	800ae14 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800a49a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a49c:	3301      	adds	r3, #1
 800a49e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800a4a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4a2:	085b      	lsrs	r3, r3, #1
 800a4a4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800a4a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	f47f af2e 	bne.w	800a30a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f004 fa60 	bl	800e978 <USB_ReadInterrupts>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a4be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a4c2:	d122      	bne.n	800a50a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a4c4:	69fb      	ldr	r3, [r7, #28]
 800a4c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4ca:	685b      	ldr	r3, [r3, #4]
 800a4cc:	69fa      	ldr	r2, [r7, #28]
 800a4ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a4d2:	f023 0301 	bic.w	r3, r3, #1
 800a4d6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800a4de:	2b01      	cmp	r3, #1
 800a4e0:	d108      	bne.n	800a4f4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a4ea:	2100      	movs	r1, #0
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f000 fea3 	bl	800b238 <HAL_PCDEx_LPM_Callback>
 800a4f2:	e002      	b.n	800a4fa <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f006 fe91 	bl	801121c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	695a      	ldr	r2, [r3, #20]
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800a508:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	4618      	mov	r0, r3
 800a510:	f004 fa32 	bl	800e978 <USB_ReadInterrupts>
 800a514:	4603      	mov	r3, r0
 800a516:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a51a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a51e:	d112      	bne.n	800a546 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800a520:	69fb      	ldr	r3, [r7, #28]
 800a522:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a526:	689b      	ldr	r3, [r3, #8]
 800a528:	f003 0301 	and.w	r3, r3, #1
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d102      	bne.n	800a536 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f006 fe4d 	bl	80111d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	695a      	ldr	r2, [r3, #20]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800a544:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	4618      	mov	r0, r3
 800a54c:	f004 fa14 	bl	800e978 <USB_ReadInterrupts>
 800a550:	4603      	mov	r3, r0
 800a552:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a556:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a55a:	f040 80b7 	bne.w	800a6cc <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a55e:	69fb      	ldr	r3, [r7, #28]
 800a560:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a564:	685b      	ldr	r3, [r3, #4]
 800a566:	69fa      	ldr	r2, [r7, #28]
 800a568:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a56c:	f023 0301 	bic.w	r3, r3, #1
 800a570:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	2110      	movs	r1, #16
 800a578:	4618      	mov	r0, r3
 800a57a:	f003 fae1 	bl	800db40 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a57e:	2300      	movs	r3, #0
 800a580:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a582:	e046      	b.n	800a612 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800a584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a586:	015a      	lsls	r2, r3, #5
 800a588:	69fb      	ldr	r3, [r7, #28]
 800a58a:	4413      	add	r3, r2
 800a58c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a590:	461a      	mov	r2, r3
 800a592:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a596:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a59a:	015a      	lsls	r2, r3, #5
 800a59c:	69fb      	ldr	r3, [r7, #28]
 800a59e:	4413      	add	r3, r2
 800a5a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a5a8:	0151      	lsls	r1, r2, #5
 800a5aa:	69fa      	ldr	r2, [r7, #28]
 800a5ac:	440a      	add	r2, r1
 800a5ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a5b2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a5b6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800a5b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5ba:	015a      	lsls	r2, r3, #5
 800a5bc:	69fb      	ldr	r3, [r7, #28]
 800a5be:	4413      	add	r3, r2
 800a5c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5c4:	461a      	mov	r2, r3
 800a5c6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a5ca:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a5cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5ce:	015a      	lsls	r2, r3, #5
 800a5d0:	69fb      	ldr	r3, [r7, #28]
 800a5d2:	4413      	add	r3, r2
 800a5d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a5dc:	0151      	lsls	r1, r2, #5
 800a5de:	69fa      	ldr	r2, [r7, #28]
 800a5e0:	440a      	add	r2, r1
 800a5e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a5e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a5ea:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a5ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5ee:	015a      	lsls	r2, r3, #5
 800a5f0:	69fb      	ldr	r3, [r7, #28]
 800a5f2:	4413      	add	r3, r2
 800a5f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a5fc:	0151      	lsls	r1, r2, #5
 800a5fe:	69fa      	ldr	r2, [r7, #28]
 800a600:	440a      	add	r2, r1
 800a602:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a606:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a60a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a60c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a60e:	3301      	adds	r3, #1
 800a610:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	791b      	ldrb	r3, [r3, #4]
 800a616:	461a      	mov	r2, r3
 800a618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a61a:	4293      	cmp	r3, r2
 800a61c:	d3b2      	bcc.n	800a584 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800a61e:	69fb      	ldr	r3, [r7, #28]
 800a620:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a624:	69db      	ldr	r3, [r3, #28]
 800a626:	69fa      	ldr	r2, [r7, #28]
 800a628:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a62c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800a630:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	7bdb      	ldrb	r3, [r3, #15]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d016      	beq.n	800a668 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800a63a:	69fb      	ldr	r3, [r7, #28]
 800a63c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a640:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a644:	69fa      	ldr	r2, [r7, #28]
 800a646:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a64a:	f043 030b 	orr.w	r3, r3, #11
 800a64e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800a652:	69fb      	ldr	r3, [r7, #28]
 800a654:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a65a:	69fa      	ldr	r2, [r7, #28]
 800a65c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a660:	f043 030b 	orr.w	r3, r3, #11
 800a664:	6453      	str	r3, [r2, #68]	@ 0x44
 800a666:	e015      	b.n	800a694 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800a668:	69fb      	ldr	r3, [r7, #28]
 800a66a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a66e:	695b      	ldr	r3, [r3, #20]
 800a670:	69fa      	ldr	r2, [r7, #28]
 800a672:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a676:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800a67a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800a67e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800a680:	69fb      	ldr	r3, [r7, #28]
 800a682:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a686:	691b      	ldr	r3, [r3, #16]
 800a688:	69fa      	ldr	r2, [r7, #28]
 800a68a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a68e:	f043 030b 	orr.w	r3, r3, #11
 800a692:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800a694:	69fb      	ldr	r3, [r7, #28]
 800a696:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	69fa      	ldr	r2, [r7, #28]
 800a69e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a6a2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a6a6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6818      	ldr	r0, [r3, #0]
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a6b6:	461a      	mov	r2, r3
 800a6b8:	f004 fa22 	bl	800eb00 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	695a      	ldr	r2, [r3, #20]
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800a6ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f004 f951 	bl	800e978 <USB_ReadInterrupts>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a6dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a6e0:	d123      	bne.n	800a72a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f004 f9e7 	bl	800eaba <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f003 fa9e 	bl	800dc32 <USB_GetDevSpeed>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681c      	ldr	r4, [r3, #0]
 800a702:	f001 fa09 	bl	800bb18 <HAL_RCC_GetHCLKFreq>
 800a706:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a70c:	461a      	mov	r2, r3
 800a70e:	4620      	mov	r0, r4
 800a710:	f002 ffa2 	bl	800d658 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f006 fd3c 	bl	8011192 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	695a      	ldr	r2, [r3, #20]
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800a728:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	4618      	mov	r0, r3
 800a730:	f004 f922 	bl	800e978 <USB_ReadInterrupts>
 800a734:	4603      	mov	r3, r0
 800a736:	f003 0308 	and.w	r3, r3, #8
 800a73a:	2b08      	cmp	r3, #8
 800a73c:	d10a      	bne.n	800a754 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f006 fd19 	bl	8011176 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	695a      	ldr	r2, [r3, #20]
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f002 0208 	and.w	r2, r2, #8
 800a752:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4618      	mov	r0, r3
 800a75a:	f004 f90d 	bl	800e978 <USB_ReadInterrupts>
 800a75e:	4603      	mov	r3, r0
 800a760:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a764:	2b80      	cmp	r3, #128	@ 0x80
 800a766:	d123      	bne.n	800a7b0 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800a768:	6a3b      	ldr	r3, [r7, #32]
 800a76a:	699b      	ldr	r3, [r3, #24]
 800a76c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a770:	6a3b      	ldr	r3, [r7, #32]
 800a772:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a774:	2301      	movs	r3, #1
 800a776:	627b      	str	r3, [r7, #36]	@ 0x24
 800a778:	e014      	b.n	800a7a4 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800a77a:	6879      	ldr	r1, [r7, #4]
 800a77c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a77e:	4613      	mov	r3, r2
 800a780:	00db      	lsls	r3, r3, #3
 800a782:	4413      	add	r3, r2
 800a784:	009b      	lsls	r3, r3, #2
 800a786:	440b      	add	r3, r1
 800a788:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800a78c:	781b      	ldrb	r3, [r3, #0]
 800a78e:	2b01      	cmp	r3, #1
 800a790:	d105      	bne.n	800a79e <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800a792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a794:	b2db      	uxtb	r3, r3
 800a796:	4619      	mov	r1, r3
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f000 fb0a 	bl	800adb2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a79e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7a0:	3301      	adds	r3, #1
 800a7a2:	627b      	str	r3, [r7, #36]	@ 0x24
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	791b      	ldrb	r3, [r3, #4]
 800a7a8:	461a      	mov	r2, r3
 800a7aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d3e4      	bcc.n	800a77a <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f004 f8df 	bl	800e978 <USB_ReadInterrupts>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a7c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a7c4:	d13c      	bne.n	800a840 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a7ca:	e02b      	b.n	800a824 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800a7cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7ce:	015a      	lsls	r2, r3, #5
 800a7d0:	69fb      	ldr	r3, [r7, #28]
 800a7d2:	4413      	add	r3, r2
 800a7d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a7dc:	6879      	ldr	r1, [r7, #4]
 800a7de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a7e0:	4613      	mov	r3, r2
 800a7e2:	00db      	lsls	r3, r3, #3
 800a7e4:	4413      	add	r3, r2
 800a7e6:	009b      	lsls	r3, r3, #2
 800a7e8:	440b      	add	r3, r1
 800a7ea:	3318      	adds	r3, #24
 800a7ec:	781b      	ldrb	r3, [r3, #0]
 800a7ee:	2b01      	cmp	r3, #1
 800a7f0:	d115      	bne.n	800a81e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800a7f2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	da12      	bge.n	800a81e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800a7f8:	6879      	ldr	r1, [r7, #4]
 800a7fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a7fc:	4613      	mov	r3, r2
 800a7fe:	00db      	lsls	r3, r3, #3
 800a800:	4413      	add	r3, r2
 800a802:	009b      	lsls	r3, r3, #2
 800a804:	440b      	add	r3, r1
 800a806:	3317      	adds	r3, #23
 800a808:	2201      	movs	r2, #1
 800a80a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800a80c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a80e:	b2db      	uxtb	r3, r3
 800a810:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a814:	b2db      	uxtb	r3, r3
 800a816:	4619      	mov	r1, r3
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f000 faca 	bl	800adb2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a81e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a820:	3301      	adds	r3, #1
 800a822:	627b      	str	r3, [r7, #36]	@ 0x24
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	791b      	ldrb	r3, [r3, #4]
 800a828:	461a      	mov	r2, r3
 800a82a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a82c:	4293      	cmp	r3, r2
 800a82e:	d3cd      	bcc.n	800a7cc <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	695a      	ldr	r2, [r3, #20]
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800a83e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	4618      	mov	r0, r3
 800a846:	f004 f897 	bl	800e978 <USB_ReadInterrupts>
 800a84a:	4603      	mov	r3, r0
 800a84c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a850:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a854:	d156      	bne.n	800a904 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a856:	2301      	movs	r3, #1
 800a858:	627b      	str	r3, [r7, #36]	@ 0x24
 800a85a:	e045      	b.n	800a8e8 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800a85c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a85e:	015a      	lsls	r2, r3, #5
 800a860:	69fb      	ldr	r3, [r7, #28]
 800a862:	4413      	add	r3, r2
 800a864:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800a86c:	6879      	ldr	r1, [r7, #4]
 800a86e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a870:	4613      	mov	r3, r2
 800a872:	00db      	lsls	r3, r3, #3
 800a874:	4413      	add	r3, r2
 800a876:	009b      	lsls	r3, r3, #2
 800a878:	440b      	add	r3, r1
 800a87a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800a87e:	781b      	ldrb	r3, [r3, #0]
 800a880:	2b01      	cmp	r3, #1
 800a882:	d12e      	bne.n	800a8e2 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800a884:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800a886:	2b00      	cmp	r3, #0
 800a888:	da2b      	bge.n	800a8e2 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800a88a:	69bb      	ldr	r3, [r7, #24]
 800a88c:	0c1a      	lsrs	r2, r3, #16
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800a894:	4053      	eors	r3, r2
 800a896:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d121      	bne.n	800a8e2 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800a89e:	6879      	ldr	r1, [r7, #4]
 800a8a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a8a2:	4613      	mov	r3, r2
 800a8a4:	00db      	lsls	r3, r3, #3
 800a8a6:	4413      	add	r3, r2
 800a8a8:	009b      	lsls	r3, r3, #2
 800a8aa:	440b      	add	r3, r1
 800a8ac:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800a8b0:	2201      	movs	r2, #1
 800a8b2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800a8b4:	6a3b      	ldr	r3, [r7, #32]
 800a8b6:	699b      	ldr	r3, [r3, #24]
 800a8b8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a8bc:	6a3b      	ldr	r3, [r7, #32]
 800a8be:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800a8c0:	6a3b      	ldr	r3, [r7, #32]
 800a8c2:	695b      	ldr	r3, [r3, #20]
 800a8c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d10a      	bne.n	800a8e2 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800a8cc:	69fb      	ldr	r3, [r7, #28]
 800a8ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8d2:	685b      	ldr	r3, [r3, #4]
 800a8d4:	69fa      	ldr	r2, [r7, #28]
 800a8d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a8da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a8de:	6053      	str	r3, [r2, #4]
            break;
 800a8e0:	e008      	b.n	800a8f4 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a8e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8e4:	3301      	adds	r3, #1
 800a8e6:	627b      	str	r3, [r7, #36]	@ 0x24
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	791b      	ldrb	r3, [r3, #4]
 800a8ec:	461a      	mov	r2, r3
 800a8ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d3b3      	bcc.n	800a85c <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	695a      	ldr	r2, [r3, #20]
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800a902:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	4618      	mov	r0, r3
 800a90a:	f004 f835 	bl	800e978 <USB_ReadInterrupts>
 800a90e:	4603      	mov	r3, r0
 800a910:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a914:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a918:	d10a      	bne.n	800a930 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f006 fcb0 	bl	8011280 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	695a      	ldr	r2, [r3, #20]
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800a92e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4618      	mov	r0, r3
 800a936:	f004 f81f 	bl	800e978 <USB_ReadInterrupts>
 800a93a:	4603      	mov	r3, r0
 800a93c:	f003 0304 	and.w	r3, r3, #4
 800a940:	2b04      	cmp	r3, #4
 800a942:	d115      	bne.n	800a970 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	685b      	ldr	r3, [r3, #4]
 800a94a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800a94c:	69bb      	ldr	r3, [r7, #24]
 800a94e:	f003 0304 	and.w	r3, r3, #4
 800a952:	2b00      	cmp	r3, #0
 800a954:	d002      	beq.n	800a95c <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f006 fca0 	bl	801129c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	6859      	ldr	r1, [r3, #4]
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	69ba      	ldr	r2, [r7, #24]
 800a968:	430a      	orrs	r2, r1
 800a96a:	605a      	str	r2, [r3, #4]
 800a96c:	e000      	b.n	800a970 <HAL_PCD_IRQHandler+0x93c>
      return;
 800a96e:	bf00      	nop
    }
  }
}
 800a970:	3734      	adds	r7, #52	@ 0x34
 800a972:	46bd      	mov	sp, r7
 800a974:	bd90      	pop	{r4, r7, pc}

0800a976 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a976:	b580      	push	{r7, lr}
 800a978:	b082      	sub	sp, #8
 800a97a:	af00      	add	r7, sp, #0
 800a97c:	6078      	str	r0, [r7, #4]
 800a97e:	460b      	mov	r3, r1
 800a980:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800a988:	2b01      	cmp	r3, #1
 800a98a:	d101      	bne.n	800a990 <HAL_PCD_SetAddress+0x1a>
 800a98c:	2302      	movs	r3, #2
 800a98e:	e012      	b.n	800a9b6 <HAL_PCD_SetAddress+0x40>
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2201      	movs	r2, #1
 800a994:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	78fa      	ldrb	r2, [r7, #3]
 800a99c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	78fa      	ldrb	r2, [r7, #3]
 800a9a4:	4611      	mov	r1, r2
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f003 ff7e 	bl	800e8a8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800a9b4:	2300      	movs	r3, #0
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3708      	adds	r7, #8
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}

0800a9be <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a9be:	b580      	push	{r7, lr}
 800a9c0:	b084      	sub	sp, #16
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	6078      	str	r0, [r7, #4]
 800a9c6:	4608      	mov	r0, r1
 800a9c8:	4611      	mov	r1, r2
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	70fb      	strb	r3, [r7, #3]
 800a9d0:	460b      	mov	r3, r1
 800a9d2:	803b      	strh	r3, [r7, #0]
 800a9d4:	4613      	mov	r3, r2
 800a9d6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a9dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	da0f      	bge.n	800aa04 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a9e4:	78fb      	ldrb	r3, [r7, #3]
 800a9e6:	f003 020f 	and.w	r2, r3, #15
 800a9ea:	4613      	mov	r3, r2
 800a9ec:	00db      	lsls	r3, r3, #3
 800a9ee:	4413      	add	r3, r2
 800a9f0:	009b      	lsls	r3, r3, #2
 800a9f2:	3310      	adds	r3, #16
 800a9f4:	687a      	ldr	r2, [r7, #4]
 800a9f6:	4413      	add	r3, r2
 800a9f8:	3304      	adds	r3, #4
 800a9fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	2201      	movs	r2, #1
 800aa00:	705a      	strb	r2, [r3, #1]
 800aa02:	e00f      	b.n	800aa24 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800aa04:	78fb      	ldrb	r3, [r7, #3]
 800aa06:	f003 020f 	and.w	r2, r3, #15
 800aa0a:	4613      	mov	r3, r2
 800aa0c:	00db      	lsls	r3, r3, #3
 800aa0e:	4413      	add	r3, r2
 800aa10:	009b      	lsls	r3, r3, #2
 800aa12:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800aa16:	687a      	ldr	r2, [r7, #4]
 800aa18:	4413      	add	r3, r2
 800aa1a:	3304      	adds	r3, #4
 800aa1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2200      	movs	r2, #0
 800aa22:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800aa24:	78fb      	ldrb	r3, [r7, #3]
 800aa26:	f003 030f 	and.w	r3, r3, #15
 800aa2a:	b2da      	uxtb	r2, r3
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800aa30:	883b      	ldrh	r3, [r7, #0]
 800aa32:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	78ba      	ldrb	r2, [r7, #2]
 800aa3e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	785b      	ldrb	r3, [r3, #1]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d004      	beq.n	800aa52 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	781b      	ldrb	r3, [r3, #0]
 800aa4c:	461a      	mov	r2, r3
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800aa52:	78bb      	ldrb	r3, [r7, #2]
 800aa54:	2b02      	cmp	r3, #2
 800aa56:	d102      	bne.n	800aa5e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800aa64:	2b01      	cmp	r3, #1
 800aa66:	d101      	bne.n	800aa6c <HAL_PCD_EP_Open+0xae>
 800aa68:	2302      	movs	r3, #2
 800aa6a:	e00e      	b.n	800aa8a <HAL_PCD_EP_Open+0xcc>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2201      	movs	r2, #1
 800aa70:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	68f9      	ldr	r1, [r7, #12]
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f003 f8fe 	bl	800dc7c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2200      	movs	r2, #0
 800aa84:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800aa88:	7afb      	ldrb	r3, [r7, #11]
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	3710      	adds	r7, #16
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}

0800aa92 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800aa92:	b580      	push	{r7, lr}
 800aa94:	b084      	sub	sp, #16
 800aa96:	af00      	add	r7, sp, #0
 800aa98:	6078      	str	r0, [r7, #4]
 800aa9a:	460b      	mov	r3, r1
 800aa9c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800aa9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	da0f      	bge.n	800aac6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800aaa6:	78fb      	ldrb	r3, [r7, #3]
 800aaa8:	f003 020f 	and.w	r2, r3, #15
 800aaac:	4613      	mov	r3, r2
 800aaae:	00db      	lsls	r3, r3, #3
 800aab0:	4413      	add	r3, r2
 800aab2:	009b      	lsls	r3, r3, #2
 800aab4:	3310      	adds	r3, #16
 800aab6:	687a      	ldr	r2, [r7, #4]
 800aab8:	4413      	add	r3, r2
 800aaba:	3304      	adds	r3, #4
 800aabc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2201      	movs	r2, #1
 800aac2:	705a      	strb	r2, [r3, #1]
 800aac4:	e00f      	b.n	800aae6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800aac6:	78fb      	ldrb	r3, [r7, #3]
 800aac8:	f003 020f 	and.w	r2, r3, #15
 800aacc:	4613      	mov	r3, r2
 800aace:	00db      	lsls	r3, r3, #3
 800aad0:	4413      	add	r3, r2
 800aad2:	009b      	lsls	r3, r3, #2
 800aad4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800aad8:	687a      	ldr	r2, [r7, #4]
 800aada:	4413      	add	r3, r2
 800aadc:	3304      	adds	r3, #4
 800aade:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	2200      	movs	r2, #0
 800aae4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800aae6:	78fb      	ldrb	r3, [r7, #3]
 800aae8:	f003 030f 	and.w	r3, r3, #15
 800aaec:	b2da      	uxtb	r2, r3
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800aaf8:	2b01      	cmp	r3, #1
 800aafa:	d101      	bne.n	800ab00 <HAL_PCD_EP_Close+0x6e>
 800aafc:	2302      	movs	r3, #2
 800aafe:	e00e      	b.n	800ab1e <HAL_PCD_EP_Close+0x8c>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2201      	movs	r2, #1
 800ab04:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	68f9      	ldr	r1, [r7, #12]
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f003 f93c 	bl	800dd8c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2200      	movs	r2, #0
 800ab18:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800ab1c:	2300      	movs	r3, #0
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3710      	adds	r7, #16
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}

0800ab26 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800ab26:	b580      	push	{r7, lr}
 800ab28:	b086      	sub	sp, #24
 800ab2a:	af00      	add	r7, sp, #0
 800ab2c:	60f8      	str	r0, [r7, #12]
 800ab2e:	607a      	str	r2, [r7, #4]
 800ab30:	603b      	str	r3, [r7, #0]
 800ab32:	460b      	mov	r3, r1
 800ab34:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ab36:	7afb      	ldrb	r3, [r7, #11]
 800ab38:	f003 020f 	and.w	r2, r3, #15
 800ab3c:	4613      	mov	r3, r2
 800ab3e:	00db      	lsls	r3, r3, #3
 800ab40:	4413      	add	r3, r2
 800ab42:	009b      	lsls	r3, r3, #2
 800ab44:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800ab48:	68fa      	ldr	r2, [r7, #12]
 800ab4a:	4413      	add	r3, r2
 800ab4c:	3304      	adds	r3, #4
 800ab4e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ab50:	697b      	ldr	r3, [r7, #20]
 800ab52:	687a      	ldr	r2, [r7, #4]
 800ab54:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	683a      	ldr	r2, [r7, #0]
 800ab5a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	2200      	movs	r2, #0
 800ab60:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	2200      	movs	r2, #0
 800ab66:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ab68:	7afb      	ldrb	r3, [r7, #11]
 800ab6a:	f003 030f 	and.w	r3, r3, #15
 800ab6e:	b2da      	uxtb	r2, r3
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	799b      	ldrb	r3, [r3, #6]
 800ab78:	2b01      	cmp	r3, #1
 800ab7a:	d102      	bne.n	800ab82 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ab7c:	687a      	ldr	r2, [r7, #4]
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	6818      	ldr	r0, [r3, #0]
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	799b      	ldrb	r3, [r3, #6]
 800ab8a:	461a      	mov	r2, r3
 800ab8c:	6979      	ldr	r1, [r7, #20]
 800ab8e:	f003 f9d9 	bl	800df44 <USB_EPStartXfer>

  return HAL_OK;
 800ab92:	2300      	movs	r3, #0
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3718      	adds	r7, #24
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}

0800ab9c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b083      	sub	sp, #12
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
 800aba4:	460b      	mov	r3, r1
 800aba6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800aba8:	78fb      	ldrb	r3, [r7, #3]
 800abaa:	f003 020f 	and.w	r2, r3, #15
 800abae:	6879      	ldr	r1, [r7, #4]
 800abb0:	4613      	mov	r3, r2
 800abb2:	00db      	lsls	r3, r3, #3
 800abb4:	4413      	add	r3, r2
 800abb6:	009b      	lsls	r3, r3, #2
 800abb8:	440b      	add	r3, r1
 800abba:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800abbe:	681b      	ldr	r3, [r3, #0]
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	370c      	adds	r7, #12
 800abc4:	46bd      	mov	sp, r7
 800abc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abca:	4770      	bx	lr

0800abcc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b086      	sub	sp, #24
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	60f8      	str	r0, [r7, #12]
 800abd4:	607a      	str	r2, [r7, #4]
 800abd6:	603b      	str	r3, [r7, #0]
 800abd8:	460b      	mov	r3, r1
 800abda:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800abdc:	7afb      	ldrb	r3, [r7, #11]
 800abde:	f003 020f 	and.w	r2, r3, #15
 800abe2:	4613      	mov	r3, r2
 800abe4:	00db      	lsls	r3, r3, #3
 800abe6:	4413      	add	r3, r2
 800abe8:	009b      	lsls	r3, r3, #2
 800abea:	3310      	adds	r3, #16
 800abec:	68fa      	ldr	r2, [r7, #12]
 800abee:	4413      	add	r3, r2
 800abf0:	3304      	adds	r3, #4
 800abf2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800abf4:	697b      	ldr	r3, [r7, #20]
 800abf6:	687a      	ldr	r2, [r7, #4]
 800abf8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	683a      	ldr	r2, [r7, #0]
 800abfe:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800ac00:	697b      	ldr	r3, [r7, #20]
 800ac02:	2200      	movs	r2, #0
 800ac04:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	2201      	movs	r2, #1
 800ac0a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ac0c:	7afb      	ldrb	r3, [r7, #11]
 800ac0e:	f003 030f 	and.w	r3, r3, #15
 800ac12:	b2da      	uxtb	r2, r3
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	799b      	ldrb	r3, [r3, #6]
 800ac1c:	2b01      	cmp	r3, #1
 800ac1e:	d102      	bne.n	800ac26 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ac20:	687a      	ldr	r2, [r7, #4]
 800ac22:	697b      	ldr	r3, [r7, #20]
 800ac24:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	6818      	ldr	r0, [r3, #0]
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	799b      	ldrb	r3, [r3, #6]
 800ac2e:	461a      	mov	r2, r3
 800ac30:	6979      	ldr	r1, [r7, #20]
 800ac32:	f003 f987 	bl	800df44 <USB_EPStartXfer>

  return HAL_OK;
 800ac36:	2300      	movs	r3, #0
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3718      	adds	r7, #24
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}

0800ac40 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b084      	sub	sp, #16
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
 800ac48:	460b      	mov	r3, r1
 800ac4a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800ac4c:	78fb      	ldrb	r3, [r7, #3]
 800ac4e:	f003 030f 	and.w	r3, r3, #15
 800ac52:	687a      	ldr	r2, [r7, #4]
 800ac54:	7912      	ldrb	r2, [r2, #4]
 800ac56:	4293      	cmp	r3, r2
 800ac58:	d901      	bls.n	800ac5e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	e04f      	b.n	800acfe <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ac5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	da0f      	bge.n	800ac86 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ac66:	78fb      	ldrb	r3, [r7, #3]
 800ac68:	f003 020f 	and.w	r2, r3, #15
 800ac6c:	4613      	mov	r3, r2
 800ac6e:	00db      	lsls	r3, r3, #3
 800ac70:	4413      	add	r3, r2
 800ac72:	009b      	lsls	r3, r3, #2
 800ac74:	3310      	adds	r3, #16
 800ac76:	687a      	ldr	r2, [r7, #4]
 800ac78:	4413      	add	r3, r2
 800ac7a:	3304      	adds	r3, #4
 800ac7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	2201      	movs	r2, #1
 800ac82:	705a      	strb	r2, [r3, #1]
 800ac84:	e00d      	b.n	800aca2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800ac86:	78fa      	ldrb	r2, [r7, #3]
 800ac88:	4613      	mov	r3, r2
 800ac8a:	00db      	lsls	r3, r3, #3
 800ac8c:	4413      	add	r3, r2
 800ac8e:	009b      	lsls	r3, r3, #2
 800ac90:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800ac94:	687a      	ldr	r2, [r7, #4]
 800ac96:	4413      	add	r3, r2
 800ac98:	3304      	adds	r3, #4
 800ac9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	2201      	movs	r2, #1
 800aca6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800aca8:	78fb      	ldrb	r3, [r7, #3]
 800acaa:	f003 030f 	and.w	r3, r3, #15
 800acae:	b2da      	uxtb	r2, r3
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800acba:	2b01      	cmp	r3, #1
 800acbc:	d101      	bne.n	800acc2 <HAL_PCD_EP_SetStall+0x82>
 800acbe:	2302      	movs	r3, #2
 800acc0:	e01d      	b.n	800acfe <HAL_PCD_EP_SetStall+0xbe>
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2201      	movs	r2, #1
 800acc6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	68f9      	ldr	r1, [r7, #12]
 800acd0:	4618      	mov	r0, r3
 800acd2:	f003 fd15 	bl	800e700 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800acd6:	78fb      	ldrb	r3, [r7, #3]
 800acd8:	f003 030f 	and.w	r3, r3, #15
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d109      	bne.n	800acf4 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6818      	ldr	r0, [r3, #0]
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	7999      	ldrb	r1, [r3, #6]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800acee:	461a      	mov	r2, r3
 800acf0:	f003 ff06 	bl	800eb00 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2200      	movs	r2, #0
 800acf8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800acfc:	2300      	movs	r3, #0
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3710      	adds	r7, #16
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}

0800ad06 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ad06:	b580      	push	{r7, lr}
 800ad08:	b084      	sub	sp, #16
 800ad0a:	af00      	add	r7, sp, #0
 800ad0c:	6078      	str	r0, [r7, #4]
 800ad0e:	460b      	mov	r3, r1
 800ad10:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800ad12:	78fb      	ldrb	r3, [r7, #3]
 800ad14:	f003 030f 	and.w	r3, r3, #15
 800ad18:	687a      	ldr	r2, [r7, #4]
 800ad1a:	7912      	ldrb	r2, [r2, #4]
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d901      	bls.n	800ad24 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800ad20:	2301      	movs	r3, #1
 800ad22:	e042      	b.n	800adaa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ad24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	da0f      	bge.n	800ad4c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ad2c:	78fb      	ldrb	r3, [r7, #3]
 800ad2e:	f003 020f 	and.w	r2, r3, #15
 800ad32:	4613      	mov	r3, r2
 800ad34:	00db      	lsls	r3, r3, #3
 800ad36:	4413      	add	r3, r2
 800ad38:	009b      	lsls	r3, r3, #2
 800ad3a:	3310      	adds	r3, #16
 800ad3c:	687a      	ldr	r2, [r7, #4]
 800ad3e:	4413      	add	r3, r2
 800ad40:	3304      	adds	r3, #4
 800ad42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	2201      	movs	r2, #1
 800ad48:	705a      	strb	r2, [r3, #1]
 800ad4a:	e00f      	b.n	800ad6c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ad4c:	78fb      	ldrb	r3, [r7, #3]
 800ad4e:	f003 020f 	and.w	r2, r3, #15
 800ad52:	4613      	mov	r3, r2
 800ad54:	00db      	lsls	r3, r3, #3
 800ad56:	4413      	add	r3, r2
 800ad58:	009b      	lsls	r3, r3, #2
 800ad5a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800ad5e:	687a      	ldr	r2, [r7, #4]
 800ad60:	4413      	add	r3, r2
 800ad62:	3304      	adds	r3, #4
 800ad64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ad72:	78fb      	ldrb	r3, [r7, #3]
 800ad74:	f003 030f 	and.w	r3, r3, #15
 800ad78:	b2da      	uxtb	r2, r3
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800ad84:	2b01      	cmp	r3, #1
 800ad86:	d101      	bne.n	800ad8c <HAL_PCD_EP_ClrStall+0x86>
 800ad88:	2302      	movs	r3, #2
 800ad8a:	e00e      	b.n	800adaa <HAL_PCD_EP_ClrStall+0xa4>
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2201      	movs	r2, #1
 800ad90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	68f9      	ldr	r1, [r7, #12]
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f003 fd1e 	bl	800e7dc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2200      	movs	r2, #0
 800ada4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800ada8:	2300      	movs	r3, #0
}
 800adaa:	4618      	mov	r0, r3
 800adac:	3710      	adds	r7, #16
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}

0800adb2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800adb2:	b580      	push	{r7, lr}
 800adb4:	b084      	sub	sp, #16
 800adb6:	af00      	add	r7, sp, #0
 800adb8:	6078      	str	r0, [r7, #4]
 800adba:	460b      	mov	r3, r1
 800adbc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800adbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	da0c      	bge.n	800ade0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800adc6:	78fb      	ldrb	r3, [r7, #3]
 800adc8:	f003 020f 	and.w	r2, r3, #15
 800adcc:	4613      	mov	r3, r2
 800adce:	00db      	lsls	r3, r3, #3
 800add0:	4413      	add	r3, r2
 800add2:	009b      	lsls	r3, r3, #2
 800add4:	3310      	adds	r3, #16
 800add6:	687a      	ldr	r2, [r7, #4]
 800add8:	4413      	add	r3, r2
 800adda:	3304      	adds	r3, #4
 800addc:	60fb      	str	r3, [r7, #12]
 800adde:	e00c      	b.n	800adfa <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ade0:	78fb      	ldrb	r3, [r7, #3]
 800ade2:	f003 020f 	and.w	r2, r3, #15
 800ade6:	4613      	mov	r3, r2
 800ade8:	00db      	lsls	r3, r3, #3
 800adea:	4413      	add	r3, r2
 800adec:	009b      	lsls	r3, r3, #2
 800adee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800adf2:	687a      	ldr	r2, [r7, #4]
 800adf4:	4413      	add	r3, r2
 800adf6:	3304      	adds	r3, #4
 800adf8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	68f9      	ldr	r1, [r7, #12]
 800ae00:	4618      	mov	r0, r3
 800ae02:	f003 fb3d 	bl	800e480 <USB_EPStopXfer>
 800ae06:	4603      	mov	r3, r0
 800ae08:	72fb      	strb	r3, [r7, #11]

  return ret;
 800ae0a:	7afb      	ldrb	r3, [r7, #11]
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	3710      	adds	r7, #16
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}

0800ae14 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b08a      	sub	sp, #40	@ 0x28
 800ae18:	af02      	add	r7, sp, #8
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae24:	697b      	ldr	r3, [r7, #20]
 800ae26:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800ae28:	683a      	ldr	r2, [r7, #0]
 800ae2a:	4613      	mov	r3, r2
 800ae2c:	00db      	lsls	r3, r3, #3
 800ae2e:	4413      	add	r3, r2
 800ae30:	009b      	lsls	r3, r3, #2
 800ae32:	3310      	adds	r3, #16
 800ae34:	687a      	ldr	r2, [r7, #4]
 800ae36:	4413      	add	r3, r2
 800ae38:	3304      	adds	r3, #4
 800ae3a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	695a      	ldr	r2, [r3, #20]
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	691b      	ldr	r3, [r3, #16]
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d901      	bls.n	800ae4c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800ae48:	2301      	movs	r3, #1
 800ae4a:	e06b      	b.n	800af24 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	691a      	ldr	r2, [r3, #16]
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	695b      	ldr	r3, [r3, #20]
 800ae54:	1ad3      	subs	r3, r2, r3
 800ae56:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	689b      	ldr	r3, [r3, #8]
 800ae5c:	69fa      	ldr	r2, [r7, #28]
 800ae5e:	429a      	cmp	r2, r3
 800ae60:	d902      	bls.n	800ae68 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	689b      	ldr	r3, [r3, #8]
 800ae66:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800ae68:	69fb      	ldr	r3, [r7, #28]
 800ae6a:	3303      	adds	r3, #3
 800ae6c:	089b      	lsrs	r3, r3, #2
 800ae6e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ae70:	e02a      	b.n	800aec8 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	691a      	ldr	r2, [r3, #16]
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	695b      	ldr	r3, [r3, #20]
 800ae7a:	1ad3      	subs	r3, r2, r3
 800ae7c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	689b      	ldr	r3, [r3, #8]
 800ae82:	69fa      	ldr	r2, [r7, #28]
 800ae84:	429a      	cmp	r2, r3
 800ae86:	d902      	bls.n	800ae8e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	689b      	ldr	r3, [r3, #8]
 800ae8c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800ae8e:	69fb      	ldr	r3, [r7, #28]
 800ae90:	3303      	adds	r3, #3
 800ae92:	089b      	lsrs	r3, r3, #2
 800ae94:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	68d9      	ldr	r1, [r3, #12]
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	b2da      	uxtb	r2, r3
 800ae9e:	69fb      	ldr	r3, [r7, #28]
 800aea0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800aea6:	9300      	str	r3, [sp, #0]
 800aea8:	4603      	mov	r3, r0
 800aeaa:	6978      	ldr	r0, [r7, #20]
 800aeac:	f003 fb92 	bl	800e5d4 <USB_WritePacket>

    ep->xfer_buff  += len;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	68da      	ldr	r2, [r3, #12]
 800aeb4:	69fb      	ldr	r3, [r7, #28]
 800aeb6:	441a      	add	r2, r3
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	695a      	ldr	r2, [r3, #20]
 800aec0:	69fb      	ldr	r3, [r7, #28]
 800aec2:	441a      	add	r2, r3
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	015a      	lsls	r2, r3, #5
 800aecc:	693b      	ldr	r3, [r7, #16]
 800aece:	4413      	add	r3, r2
 800aed0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aed4:	699b      	ldr	r3, [r3, #24]
 800aed6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800aed8:	69ba      	ldr	r2, [r7, #24]
 800aeda:	429a      	cmp	r2, r3
 800aedc:	d809      	bhi.n	800aef2 <PCD_WriteEmptyTxFifo+0xde>
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	695a      	ldr	r2, [r3, #20]
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800aee6:	429a      	cmp	r2, r3
 800aee8:	d203      	bcs.n	800aef2 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	691b      	ldr	r3, [r3, #16]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d1bf      	bne.n	800ae72 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	691a      	ldr	r2, [r3, #16]
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	695b      	ldr	r3, [r3, #20]
 800aefa:	429a      	cmp	r2, r3
 800aefc:	d811      	bhi.n	800af22 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	f003 030f 	and.w	r3, r3, #15
 800af04:	2201      	movs	r2, #1
 800af06:	fa02 f303 	lsl.w	r3, r2, r3
 800af0a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800af0c:	693b      	ldr	r3, [r7, #16]
 800af0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	43db      	mvns	r3, r3
 800af18:	6939      	ldr	r1, [r7, #16]
 800af1a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800af1e:	4013      	ands	r3, r2
 800af20:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800af22:	2300      	movs	r3, #0
}
 800af24:	4618      	mov	r0, r3
 800af26:	3720      	adds	r7, #32
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}

0800af2c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b088      	sub	sp, #32
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
 800af34:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af3c:	69fb      	ldr	r3, [r7, #28]
 800af3e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800af40:	69fb      	ldr	r3, [r7, #28]
 800af42:	333c      	adds	r3, #60	@ 0x3c
 800af44:	3304      	adds	r3, #4
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	015a      	lsls	r2, r3, #5
 800af4e:	69bb      	ldr	r3, [r7, #24]
 800af50:	4413      	add	r3, r2
 800af52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af56:	689b      	ldr	r3, [r3, #8]
 800af58:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	799b      	ldrb	r3, [r3, #6]
 800af5e:	2b01      	cmp	r3, #1
 800af60:	d17b      	bne.n	800b05a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	f003 0308 	and.w	r3, r3, #8
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d015      	beq.n	800af98 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800af6c:	697b      	ldr	r3, [r7, #20]
 800af6e:	4a61      	ldr	r2, [pc, #388]	@ (800b0f4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800af70:	4293      	cmp	r3, r2
 800af72:	f240 80b9 	bls.w	800b0e8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	f000 80b3 	beq.w	800b0e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	015a      	lsls	r2, r3, #5
 800af86:	69bb      	ldr	r3, [r7, #24]
 800af88:	4413      	add	r3, r2
 800af8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af8e:	461a      	mov	r2, r3
 800af90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af94:	6093      	str	r3, [r2, #8]
 800af96:	e0a7      	b.n	800b0e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	f003 0320 	and.w	r3, r3, #32
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d009      	beq.n	800afb6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	015a      	lsls	r2, r3, #5
 800afa6:	69bb      	ldr	r3, [r7, #24]
 800afa8:	4413      	add	r3, r2
 800afaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800afae:	461a      	mov	r2, r3
 800afb0:	2320      	movs	r3, #32
 800afb2:	6093      	str	r3, [r2, #8]
 800afb4:	e098      	b.n	800b0e8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800afb6:	693b      	ldr	r3, [r7, #16]
 800afb8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	f040 8093 	bne.w	800b0e8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	4a4b      	ldr	r2, [pc, #300]	@ (800b0f4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800afc6:	4293      	cmp	r3, r2
 800afc8:	d90f      	bls.n	800afea <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800afca:	693b      	ldr	r3, [r7, #16]
 800afcc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d00a      	beq.n	800afea <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	015a      	lsls	r2, r3, #5
 800afd8:	69bb      	ldr	r3, [r7, #24]
 800afda:	4413      	add	r3, r2
 800afdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800afe0:	461a      	mov	r2, r3
 800afe2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800afe6:	6093      	str	r3, [r2, #8]
 800afe8:	e07e      	b.n	800b0e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800afea:	683a      	ldr	r2, [r7, #0]
 800afec:	4613      	mov	r3, r2
 800afee:	00db      	lsls	r3, r3, #3
 800aff0:	4413      	add	r3, r2
 800aff2:	009b      	lsls	r3, r3, #2
 800aff4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800aff8:	687a      	ldr	r2, [r7, #4]
 800affa:	4413      	add	r3, r2
 800affc:	3304      	adds	r3, #4
 800affe:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	6a1a      	ldr	r2, [r3, #32]
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	0159      	lsls	r1, r3, #5
 800b008:	69bb      	ldr	r3, [r7, #24]
 800b00a:	440b      	add	r3, r1
 800b00c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b010:	691b      	ldr	r3, [r3, #16]
 800b012:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b016:	1ad2      	subs	r2, r2, r3
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d114      	bne.n	800b04c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	691b      	ldr	r3, [r3, #16]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d109      	bne.n	800b03e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6818      	ldr	r0, [r3, #0]
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b034:	461a      	mov	r2, r3
 800b036:	2101      	movs	r1, #1
 800b038:	f003 fd62 	bl	800eb00 <USB_EP0_OutStart>
 800b03c:	e006      	b.n	800b04c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	68da      	ldr	r2, [r3, #12]
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	695b      	ldr	r3, [r3, #20]
 800b046:	441a      	add	r2, r3
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	b2db      	uxtb	r3, r3
 800b050:	4619      	mov	r1, r3
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f006 f85a 	bl	801110c <HAL_PCD_DataOutStageCallback>
 800b058:	e046      	b.n	800b0e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800b05a:	697b      	ldr	r3, [r7, #20]
 800b05c:	4a26      	ldr	r2, [pc, #152]	@ (800b0f8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800b05e:	4293      	cmp	r3, r2
 800b060:	d124      	bne.n	800b0ac <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800b062:	693b      	ldr	r3, [r7, #16]
 800b064:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d00a      	beq.n	800b082 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	015a      	lsls	r2, r3, #5
 800b070:	69bb      	ldr	r3, [r7, #24]
 800b072:	4413      	add	r3, r2
 800b074:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b078:	461a      	mov	r2, r3
 800b07a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b07e:	6093      	str	r3, [r2, #8]
 800b080:	e032      	b.n	800b0e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b082:	693b      	ldr	r3, [r7, #16]
 800b084:	f003 0320 	and.w	r3, r3, #32
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d008      	beq.n	800b09e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	015a      	lsls	r2, r3, #5
 800b090:	69bb      	ldr	r3, [r7, #24]
 800b092:	4413      	add	r3, r2
 800b094:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b098:	461a      	mov	r2, r3
 800b09a:	2320      	movs	r3, #32
 800b09c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	b2db      	uxtb	r3, r3
 800b0a2:	4619      	mov	r1, r3
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f006 f831 	bl	801110c <HAL_PCD_DataOutStageCallback>
 800b0aa:	e01d      	b.n	800b0e8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d114      	bne.n	800b0dc <PCD_EP_OutXfrComplete_int+0x1b0>
 800b0b2:	6879      	ldr	r1, [r7, #4]
 800b0b4:	683a      	ldr	r2, [r7, #0]
 800b0b6:	4613      	mov	r3, r2
 800b0b8:	00db      	lsls	r3, r3, #3
 800b0ba:	4413      	add	r3, r2
 800b0bc:	009b      	lsls	r3, r3, #2
 800b0be:	440b      	add	r3, r1
 800b0c0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d108      	bne.n	800b0dc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6818      	ldr	r0, [r3, #0]
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b0d4:	461a      	mov	r2, r3
 800b0d6:	2100      	movs	r1, #0
 800b0d8:	f003 fd12 	bl	800eb00 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	b2db      	uxtb	r3, r3
 800b0e0:	4619      	mov	r1, r3
 800b0e2:	6878      	ldr	r0, [r7, #4]
 800b0e4:	f006 f812 	bl	801110c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800b0e8:	2300      	movs	r3, #0
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	3720      	adds	r7, #32
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}
 800b0f2:	bf00      	nop
 800b0f4:	4f54300a 	.word	0x4f54300a
 800b0f8:	4f54310a 	.word	0x4f54310a

0800b0fc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b086      	sub	sp, #24
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
 800b104:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b10c:	697b      	ldr	r3, [r7, #20]
 800b10e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	333c      	adds	r3, #60	@ 0x3c
 800b114:	3304      	adds	r3, #4
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	015a      	lsls	r2, r3, #5
 800b11e:	693b      	ldr	r3, [r7, #16]
 800b120:	4413      	add	r3, r2
 800b122:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b126:	689b      	ldr	r3, [r3, #8]
 800b128:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	4a15      	ldr	r2, [pc, #84]	@ (800b184 <PCD_EP_OutSetupPacket_int+0x88>)
 800b12e:	4293      	cmp	r3, r2
 800b130:	d90e      	bls.n	800b150 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d009      	beq.n	800b150 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	015a      	lsls	r2, r3, #5
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	4413      	add	r3, r2
 800b144:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b148:	461a      	mov	r2, r3
 800b14a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b14e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f005 ffc9 	bl	80110e8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	4a0a      	ldr	r2, [pc, #40]	@ (800b184 <PCD_EP_OutSetupPacket_int+0x88>)
 800b15a:	4293      	cmp	r3, r2
 800b15c:	d90c      	bls.n	800b178 <PCD_EP_OutSetupPacket_int+0x7c>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	799b      	ldrb	r3, [r3, #6]
 800b162:	2b01      	cmp	r3, #1
 800b164:	d108      	bne.n	800b178 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6818      	ldr	r0, [r3, #0]
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b170:	461a      	mov	r2, r3
 800b172:	2101      	movs	r1, #1
 800b174:	f003 fcc4 	bl	800eb00 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800b178:	2300      	movs	r3, #0
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	3718      	adds	r7, #24
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}
 800b182:	bf00      	nop
 800b184:	4f54300a 	.word	0x4f54300a

0800b188 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800b188:	b480      	push	{r7}
 800b18a:	b085      	sub	sp, #20
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
 800b190:	460b      	mov	r3, r1
 800b192:	70fb      	strb	r3, [r7, #3]
 800b194:	4613      	mov	r3, r2
 800b196:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b19e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800b1a0:	78fb      	ldrb	r3, [r7, #3]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d107      	bne.n	800b1b6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800b1a6:	883b      	ldrh	r3, [r7, #0]
 800b1a8:	0419      	lsls	r1, r3, #16
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	68ba      	ldr	r2, [r7, #8]
 800b1b0:	430a      	orrs	r2, r1
 800b1b2:	629a      	str	r2, [r3, #40]	@ 0x28
 800b1b4:	e028      	b.n	800b208 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1bc:	0c1b      	lsrs	r3, r3, #16
 800b1be:	68ba      	ldr	r2, [r7, #8]
 800b1c0:	4413      	add	r3, r2
 800b1c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	73fb      	strb	r3, [r7, #15]
 800b1c8:	e00d      	b.n	800b1e6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681a      	ldr	r2, [r3, #0]
 800b1ce:	7bfb      	ldrb	r3, [r7, #15]
 800b1d0:	3340      	adds	r3, #64	@ 0x40
 800b1d2:	009b      	lsls	r3, r3, #2
 800b1d4:	4413      	add	r3, r2
 800b1d6:	685b      	ldr	r3, [r3, #4]
 800b1d8:	0c1b      	lsrs	r3, r3, #16
 800b1da:	68ba      	ldr	r2, [r7, #8]
 800b1dc:	4413      	add	r3, r2
 800b1de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800b1e0:	7bfb      	ldrb	r3, [r7, #15]
 800b1e2:	3301      	adds	r3, #1
 800b1e4:	73fb      	strb	r3, [r7, #15]
 800b1e6:	7bfa      	ldrb	r2, [r7, #15]
 800b1e8:	78fb      	ldrb	r3, [r7, #3]
 800b1ea:	3b01      	subs	r3, #1
 800b1ec:	429a      	cmp	r2, r3
 800b1ee:	d3ec      	bcc.n	800b1ca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800b1f0:	883b      	ldrh	r3, [r7, #0]
 800b1f2:	0418      	lsls	r0, r3, #16
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	6819      	ldr	r1, [r3, #0]
 800b1f8:	78fb      	ldrb	r3, [r7, #3]
 800b1fa:	3b01      	subs	r3, #1
 800b1fc:	68ba      	ldr	r2, [r7, #8]
 800b1fe:	4302      	orrs	r2, r0
 800b200:	3340      	adds	r3, #64	@ 0x40
 800b202:	009b      	lsls	r3, r3, #2
 800b204:	440b      	add	r3, r1
 800b206:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800b208:	2300      	movs	r3, #0
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3714      	adds	r7, #20
 800b20e:	46bd      	mov	sp, r7
 800b210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b214:	4770      	bx	lr

0800b216 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800b216:	b480      	push	{r7}
 800b218:	b083      	sub	sp, #12
 800b21a:	af00      	add	r7, sp, #0
 800b21c:	6078      	str	r0, [r7, #4]
 800b21e:	460b      	mov	r3, r1
 800b220:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	887a      	ldrh	r2, [r7, #2]
 800b228:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800b22a:	2300      	movs	r3, #0
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	370c      	adds	r7, #12
 800b230:	46bd      	mov	sp, r7
 800b232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b236:	4770      	bx	lr

0800b238 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b238:	b480      	push	{r7}
 800b23a:	b083      	sub	sp, #12
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	460b      	mov	r3, r1
 800b242:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800b244:	bf00      	nop
 800b246:	370c      	adds	r7, #12
 800b248:	46bd      	mov	sp, r7
 800b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24e:	4770      	bx	lr

0800b250 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b086      	sub	sp, #24
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d101      	bne.n	800b262 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b25e:	2301      	movs	r3, #1
 800b260:	e267      	b.n	800b732 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	f003 0301 	and.w	r3, r3, #1
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d075      	beq.n	800b35a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800b26e:	4b88      	ldr	r3, [pc, #544]	@ (800b490 <HAL_RCC_OscConfig+0x240>)
 800b270:	689b      	ldr	r3, [r3, #8]
 800b272:	f003 030c 	and.w	r3, r3, #12
 800b276:	2b04      	cmp	r3, #4
 800b278:	d00c      	beq.n	800b294 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b27a:	4b85      	ldr	r3, [pc, #532]	@ (800b490 <HAL_RCC_OscConfig+0x240>)
 800b27c:	689b      	ldr	r3, [r3, #8]
 800b27e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800b282:	2b08      	cmp	r3, #8
 800b284:	d112      	bne.n	800b2ac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b286:	4b82      	ldr	r3, [pc, #520]	@ (800b490 <HAL_RCC_OscConfig+0x240>)
 800b288:	685b      	ldr	r3, [r3, #4]
 800b28a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b28e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b292:	d10b      	bne.n	800b2ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b294:	4b7e      	ldr	r3, [pc, #504]	@ (800b490 <HAL_RCC_OscConfig+0x240>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d05b      	beq.n	800b358 <HAL_RCC_OscConfig+0x108>
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	685b      	ldr	r3, [r3, #4]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d157      	bne.n	800b358 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	e242      	b.n	800b732 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	685b      	ldr	r3, [r3, #4]
 800b2b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b2b4:	d106      	bne.n	800b2c4 <HAL_RCC_OscConfig+0x74>
 800b2b6:	4b76      	ldr	r3, [pc, #472]	@ (800b490 <HAL_RCC_OscConfig+0x240>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	4a75      	ldr	r2, [pc, #468]	@ (800b490 <HAL_RCC_OscConfig+0x240>)
 800b2bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b2c0:	6013      	str	r3, [r2, #0]
 800b2c2:	e01d      	b.n	800b300 <HAL_RCC_OscConfig+0xb0>
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	685b      	ldr	r3, [r3, #4]
 800b2c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b2cc:	d10c      	bne.n	800b2e8 <HAL_RCC_OscConfig+0x98>
 800b2ce:	4b70      	ldr	r3, [pc, #448]	@ (800b490 <HAL_RCC_OscConfig+0x240>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	4a6f      	ldr	r2, [pc, #444]	@ (800b490 <HAL_RCC_OscConfig+0x240>)
 800b2d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b2d8:	6013      	str	r3, [r2, #0]
 800b2da:	4b6d      	ldr	r3, [pc, #436]	@ (800b490 <HAL_RCC_OscConfig+0x240>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	4a6c      	ldr	r2, [pc, #432]	@ (800b490 <HAL_RCC_OscConfig+0x240>)
 800b2e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b2e4:	6013      	str	r3, [r2, #0]
 800b2e6:	e00b      	b.n	800b300 <HAL_RCC_OscConfig+0xb0>
 800b2e8:	4b69      	ldr	r3, [pc, #420]	@ (800b490 <HAL_RCC_OscConfig+0x240>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	4a68      	ldr	r2, [pc, #416]	@ (800b490 <HAL_RCC_OscConfig+0x240>)
 800b2ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b2f2:	6013      	str	r3, [r2, #0]
 800b2f4:	4b66      	ldr	r3, [pc, #408]	@ (800b490 <HAL_RCC_OscConfig+0x240>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	4a65      	ldr	r2, [pc, #404]	@ (800b490 <HAL_RCC_OscConfig+0x240>)
 800b2fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b2fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	685b      	ldr	r3, [r3, #4]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d013      	beq.n	800b330 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b308:	f7fc fa2c 	bl	8007764 <HAL_GetTick>
 800b30c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b30e:	e008      	b.n	800b322 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b310:	f7fc fa28 	bl	8007764 <HAL_GetTick>
 800b314:	4602      	mov	r2, r0
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	1ad3      	subs	r3, r2, r3
 800b31a:	2b64      	cmp	r3, #100	@ 0x64
 800b31c:	d901      	bls.n	800b322 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b31e:	2303      	movs	r3, #3
 800b320:	e207      	b.n	800b732 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b322:	4b5b      	ldr	r3, [pc, #364]	@ (800b490 <HAL_RCC_OscConfig+0x240>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d0f0      	beq.n	800b310 <HAL_RCC_OscConfig+0xc0>
 800b32e:	e014      	b.n	800b35a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b330:	f7fc fa18 	bl	8007764 <HAL_GetTick>
 800b334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b336:	e008      	b.n	800b34a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b338:	f7fc fa14 	bl	8007764 <HAL_GetTick>
 800b33c:	4602      	mov	r2, r0
 800b33e:	693b      	ldr	r3, [r7, #16]
 800b340:	1ad3      	subs	r3, r2, r3
 800b342:	2b64      	cmp	r3, #100	@ 0x64
 800b344:	d901      	bls.n	800b34a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b346:	2303      	movs	r3, #3
 800b348:	e1f3      	b.n	800b732 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b34a:	4b51      	ldr	r3, [pc, #324]	@ (800b490 <HAL_RCC_OscConfig+0x240>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b352:	2b00      	cmp	r3, #0
 800b354:	d1f0      	bne.n	800b338 <HAL_RCC_OscConfig+0xe8>
 800b356:	e000      	b.n	800b35a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b358:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f003 0302 	and.w	r3, r3, #2
 800b362:	2b00      	cmp	r3, #0
 800b364:	d063      	beq.n	800b42e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800b366:	4b4a      	ldr	r3, [pc, #296]	@ (800b490 <HAL_RCC_OscConfig+0x240>)
 800b368:	689b      	ldr	r3, [r3, #8]
 800b36a:	f003 030c 	and.w	r3, r3, #12
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d00b      	beq.n	800b38a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b372:	4b47      	ldr	r3, [pc, #284]	@ (800b490 <HAL_RCC_OscConfig+0x240>)
 800b374:	689b      	ldr	r3, [r3, #8]
 800b376:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800b37a:	2b08      	cmp	r3, #8
 800b37c:	d11c      	bne.n	800b3b8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b37e:	4b44      	ldr	r3, [pc, #272]	@ (800b490 <HAL_RCC_OscConfig+0x240>)
 800b380:	685b      	ldr	r3, [r3, #4]
 800b382:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b386:	2b00      	cmp	r3, #0
 800b388:	d116      	bne.n	800b3b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b38a:	4b41      	ldr	r3, [pc, #260]	@ (800b490 <HAL_RCC_OscConfig+0x240>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	f003 0302 	and.w	r3, r3, #2
 800b392:	2b00      	cmp	r3, #0
 800b394:	d005      	beq.n	800b3a2 <HAL_RCC_OscConfig+0x152>
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	68db      	ldr	r3, [r3, #12]
 800b39a:	2b01      	cmp	r3, #1
 800b39c:	d001      	beq.n	800b3a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800b39e:	2301      	movs	r3, #1
 800b3a0:	e1c7      	b.n	800b732 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b3a2:	4b3b      	ldr	r3, [pc, #236]	@ (800b490 <HAL_RCC_OscConfig+0x240>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	691b      	ldr	r3, [r3, #16]
 800b3ae:	00db      	lsls	r3, r3, #3
 800b3b0:	4937      	ldr	r1, [pc, #220]	@ (800b490 <HAL_RCC_OscConfig+0x240>)
 800b3b2:	4313      	orrs	r3, r2
 800b3b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b3b6:	e03a      	b.n	800b42e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	68db      	ldr	r3, [r3, #12]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d020      	beq.n	800b402 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b3c0:	4b34      	ldr	r3, [pc, #208]	@ (800b494 <HAL_RCC_OscConfig+0x244>)
 800b3c2:	2201      	movs	r2, #1
 800b3c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3c6:	f7fc f9cd 	bl	8007764 <HAL_GetTick>
 800b3ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b3cc:	e008      	b.n	800b3e0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b3ce:	f7fc f9c9 	bl	8007764 <HAL_GetTick>
 800b3d2:	4602      	mov	r2, r0
 800b3d4:	693b      	ldr	r3, [r7, #16]
 800b3d6:	1ad3      	subs	r3, r2, r3
 800b3d8:	2b02      	cmp	r3, #2
 800b3da:	d901      	bls.n	800b3e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800b3dc:	2303      	movs	r3, #3
 800b3de:	e1a8      	b.n	800b732 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b3e0:	4b2b      	ldr	r3, [pc, #172]	@ (800b490 <HAL_RCC_OscConfig+0x240>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	f003 0302 	and.w	r3, r3, #2
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d0f0      	beq.n	800b3ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b3ec:	4b28      	ldr	r3, [pc, #160]	@ (800b490 <HAL_RCC_OscConfig+0x240>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	691b      	ldr	r3, [r3, #16]
 800b3f8:	00db      	lsls	r3, r3, #3
 800b3fa:	4925      	ldr	r1, [pc, #148]	@ (800b490 <HAL_RCC_OscConfig+0x240>)
 800b3fc:	4313      	orrs	r3, r2
 800b3fe:	600b      	str	r3, [r1, #0]
 800b400:	e015      	b.n	800b42e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b402:	4b24      	ldr	r3, [pc, #144]	@ (800b494 <HAL_RCC_OscConfig+0x244>)
 800b404:	2200      	movs	r2, #0
 800b406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b408:	f7fc f9ac 	bl	8007764 <HAL_GetTick>
 800b40c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b40e:	e008      	b.n	800b422 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b410:	f7fc f9a8 	bl	8007764 <HAL_GetTick>
 800b414:	4602      	mov	r2, r0
 800b416:	693b      	ldr	r3, [r7, #16]
 800b418:	1ad3      	subs	r3, r2, r3
 800b41a:	2b02      	cmp	r3, #2
 800b41c:	d901      	bls.n	800b422 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800b41e:	2303      	movs	r3, #3
 800b420:	e187      	b.n	800b732 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b422:	4b1b      	ldr	r3, [pc, #108]	@ (800b490 <HAL_RCC_OscConfig+0x240>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	f003 0302 	and.w	r3, r3, #2
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d1f0      	bne.n	800b410 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	f003 0308 	and.w	r3, r3, #8
 800b436:	2b00      	cmp	r3, #0
 800b438:	d036      	beq.n	800b4a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	695b      	ldr	r3, [r3, #20]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d016      	beq.n	800b470 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b442:	4b15      	ldr	r3, [pc, #84]	@ (800b498 <HAL_RCC_OscConfig+0x248>)
 800b444:	2201      	movs	r2, #1
 800b446:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b448:	f7fc f98c 	bl	8007764 <HAL_GetTick>
 800b44c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b44e:	e008      	b.n	800b462 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b450:	f7fc f988 	bl	8007764 <HAL_GetTick>
 800b454:	4602      	mov	r2, r0
 800b456:	693b      	ldr	r3, [r7, #16]
 800b458:	1ad3      	subs	r3, r2, r3
 800b45a:	2b02      	cmp	r3, #2
 800b45c:	d901      	bls.n	800b462 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800b45e:	2303      	movs	r3, #3
 800b460:	e167      	b.n	800b732 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b462:	4b0b      	ldr	r3, [pc, #44]	@ (800b490 <HAL_RCC_OscConfig+0x240>)
 800b464:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b466:	f003 0302 	and.w	r3, r3, #2
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d0f0      	beq.n	800b450 <HAL_RCC_OscConfig+0x200>
 800b46e:	e01b      	b.n	800b4a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b470:	4b09      	ldr	r3, [pc, #36]	@ (800b498 <HAL_RCC_OscConfig+0x248>)
 800b472:	2200      	movs	r2, #0
 800b474:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b476:	f7fc f975 	bl	8007764 <HAL_GetTick>
 800b47a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b47c:	e00e      	b.n	800b49c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b47e:	f7fc f971 	bl	8007764 <HAL_GetTick>
 800b482:	4602      	mov	r2, r0
 800b484:	693b      	ldr	r3, [r7, #16]
 800b486:	1ad3      	subs	r3, r2, r3
 800b488:	2b02      	cmp	r3, #2
 800b48a:	d907      	bls.n	800b49c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800b48c:	2303      	movs	r3, #3
 800b48e:	e150      	b.n	800b732 <HAL_RCC_OscConfig+0x4e2>
 800b490:	40023800 	.word	0x40023800
 800b494:	42470000 	.word	0x42470000
 800b498:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b49c:	4b88      	ldr	r3, [pc, #544]	@ (800b6c0 <HAL_RCC_OscConfig+0x470>)
 800b49e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b4a0:	f003 0302 	and.w	r3, r3, #2
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d1ea      	bne.n	800b47e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	f003 0304 	and.w	r3, r3, #4
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	f000 8097 	beq.w	800b5e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b4ba:	4b81      	ldr	r3, [pc, #516]	@ (800b6c0 <HAL_RCC_OscConfig+0x470>)
 800b4bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d10f      	bne.n	800b4e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	60bb      	str	r3, [r7, #8]
 800b4ca:	4b7d      	ldr	r3, [pc, #500]	@ (800b6c0 <HAL_RCC_OscConfig+0x470>)
 800b4cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4ce:	4a7c      	ldr	r2, [pc, #496]	@ (800b6c0 <HAL_RCC_OscConfig+0x470>)
 800b4d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b4d4:	6413      	str	r3, [r2, #64]	@ 0x40
 800b4d6:	4b7a      	ldr	r3, [pc, #488]	@ (800b6c0 <HAL_RCC_OscConfig+0x470>)
 800b4d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b4de:	60bb      	str	r3, [r7, #8]
 800b4e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b4e6:	4b77      	ldr	r3, [pc, #476]	@ (800b6c4 <HAL_RCC_OscConfig+0x474>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d118      	bne.n	800b524 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b4f2:	4b74      	ldr	r3, [pc, #464]	@ (800b6c4 <HAL_RCC_OscConfig+0x474>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	4a73      	ldr	r2, [pc, #460]	@ (800b6c4 <HAL_RCC_OscConfig+0x474>)
 800b4f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b4fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b4fe:	f7fc f931 	bl	8007764 <HAL_GetTick>
 800b502:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b504:	e008      	b.n	800b518 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b506:	f7fc f92d 	bl	8007764 <HAL_GetTick>
 800b50a:	4602      	mov	r2, r0
 800b50c:	693b      	ldr	r3, [r7, #16]
 800b50e:	1ad3      	subs	r3, r2, r3
 800b510:	2b02      	cmp	r3, #2
 800b512:	d901      	bls.n	800b518 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800b514:	2303      	movs	r3, #3
 800b516:	e10c      	b.n	800b732 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b518:	4b6a      	ldr	r3, [pc, #424]	@ (800b6c4 <HAL_RCC_OscConfig+0x474>)
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b520:	2b00      	cmp	r3, #0
 800b522:	d0f0      	beq.n	800b506 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	689b      	ldr	r3, [r3, #8]
 800b528:	2b01      	cmp	r3, #1
 800b52a:	d106      	bne.n	800b53a <HAL_RCC_OscConfig+0x2ea>
 800b52c:	4b64      	ldr	r3, [pc, #400]	@ (800b6c0 <HAL_RCC_OscConfig+0x470>)
 800b52e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b530:	4a63      	ldr	r2, [pc, #396]	@ (800b6c0 <HAL_RCC_OscConfig+0x470>)
 800b532:	f043 0301 	orr.w	r3, r3, #1
 800b536:	6713      	str	r3, [r2, #112]	@ 0x70
 800b538:	e01c      	b.n	800b574 <HAL_RCC_OscConfig+0x324>
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	689b      	ldr	r3, [r3, #8]
 800b53e:	2b05      	cmp	r3, #5
 800b540:	d10c      	bne.n	800b55c <HAL_RCC_OscConfig+0x30c>
 800b542:	4b5f      	ldr	r3, [pc, #380]	@ (800b6c0 <HAL_RCC_OscConfig+0x470>)
 800b544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b546:	4a5e      	ldr	r2, [pc, #376]	@ (800b6c0 <HAL_RCC_OscConfig+0x470>)
 800b548:	f043 0304 	orr.w	r3, r3, #4
 800b54c:	6713      	str	r3, [r2, #112]	@ 0x70
 800b54e:	4b5c      	ldr	r3, [pc, #368]	@ (800b6c0 <HAL_RCC_OscConfig+0x470>)
 800b550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b552:	4a5b      	ldr	r2, [pc, #364]	@ (800b6c0 <HAL_RCC_OscConfig+0x470>)
 800b554:	f043 0301 	orr.w	r3, r3, #1
 800b558:	6713      	str	r3, [r2, #112]	@ 0x70
 800b55a:	e00b      	b.n	800b574 <HAL_RCC_OscConfig+0x324>
 800b55c:	4b58      	ldr	r3, [pc, #352]	@ (800b6c0 <HAL_RCC_OscConfig+0x470>)
 800b55e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b560:	4a57      	ldr	r2, [pc, #348]	@ (800b6c0 <HAL_RCC_OscConfig+0x470>)
 800b562:	f023 0301 	bic.w	r3, r3, #1
 800b566:	6713      	str	r3, [r2, #112]	@ 0x70
 800b568:	4b55      	ldr	r3, [pc, #340]	@ (800b6c0 <HAL_RCC_OscConfig+0x470>)
 800b56a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b56c:	4a54      	ldr	r2, [pc, #336]	@ (800b6c0 <HAL_RCC_OscConfig+0x470>)
 800b56e:	f023 0304 	bic.w	r3, r3, #4
 800b572:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	689b      	ldr	r3, [r3, #8]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d015      	beq.n	800b5a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b57c:	f7fc f8f2 	bl	8007764 <HAL_GetTick>
 800b580:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b582:	e00a      	b.n	800b59a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b584:	f7fc f8ee 	bl	8007764 <HAL_GetTick>
 800b588:	4602      	mov	r2, r0
 800b58a:	693b      	ldr	r3, [r7, #16]
 800b58c:	1ad3      	subs	r3, r2, r3
 800b58e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b592:	4293      	cmp	r3, r2
 800b594:	d901      	bls.n	800b59a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800b596:	2303      	movs	r3, #3
 800b598:	e0cb      	b.n	800b732 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b59a:	4b49      	ldr	r3, [pc, #292]	@ (800b6c0 <HAL_RCC_OscConfig+0x470>)
 800b59c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b59e:	f003 0302 	and.w	r3, r3, #2
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d0ee      	beq.n	800b584 <HAL_RCC_OscConfig+0x334>
 800b5a6:	e014      	b.n	800b5d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b5a8:	f7fc f8dc 	bl	8007764 <HAL_GetTick>
 800b5ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b5ae:	e00a      	b.n	800b5c6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b5b0:	f7fc f8d8 	bl	8007764 <HAL_GetTick>
 800b5b4:	4602      	mov	r2, r0
 800b5b6:	693b      	ldr	r3, [r7, #16]
 800b5b8:	1ad3      	subs	r3, r2, r3
 800b5ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d901      	bls.n	800b5c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800b5c2:	2303      	movs	r3, #3
 800b5c4:	e0b5      	b.n	800b732 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b5c6:	4b3e      	ldr	r3, [pc, #248]	@ (800b6c0 <HAL_RCC_OscConfig+0x470>)
 800b5c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b5ca:	f003 0302 	and.w	r3, r3, #2
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d1ee      	bne.n	800b5b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b5d2:	7dfb      	ldrb	r3, [r7, #23]
 800b5d4:	2b01      	cmp	r3, #1
 800b5d6:	d105      	bne.n	800b5e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b5d8:	4b39      	ldr	r3, [pc, #228]	@ (800b6c0 <HAL_RCC_OscConfig+0x470>)
 800b5da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5dc:	4a38      	ldr	r2, [pc, #224]	@ (800b6c0 <HAL_RCC_OscConfig+0x470>)
 800b5de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b5e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	699b      	ldr	r3, [r3, #24]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	f000 80a1 	beq.w	800b730 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b5ee:	4b34      	ldr	r3, [pc, #208]	@ (800b6c0 <HAL_RCC_OscConfig+0x470>)
 800b5f0:	689b      	ldr	r3, [r3, #8]
 800b5f2:	f003 030c 	and.w	r3, r3, #12
 800b5f6:	2b08      	cmp	r3, #8
 800b5f8:	d05c      	beq.n	800b6b4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	699b      	ldr	r3, [r3, #24]
 800b5fe:	2b02      	cmp	r3, #2
 800b600:	d141      	bne.n	800b686 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b602:	4b31      	ldr	r3, [pc, #196]	@ (800b6c8 <HAL_RCC_OscConfig+0x478>)
 800b604:	2200      	movs	r2, #0
 800b606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b608:	f7fc f8ac 	bl	8007764 <HAL_GetTick>
 800b60c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b60e:	e008      	b.n	800b622 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b610:	f7fc f8a8 	bl	8007764 <HAL_GetTick>
 800b614:	4602      	mov	r2, r0
 800b616:	693b      	ldr	r3, [r7, #16]
 800b618:	1ad3      	subs	r3, r2, r3
 800b61a:	2b02      	cmp	r3, #2
 800b61c:	d901      	bls.n	800b622 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800b61e:	2303      	movs	r3, #3
 800b620:	e087      	b.n	800b732 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b622:	4b27      	ldr	r3, [pc, #156]	@ (800b6c0 <HAL_RCC_OscConfig+0x470>)
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d1f0      	bne.n	800b610 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	69da      	ldr	r2, [r3, #28]
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	6a1b      	ldr	r3, [r3, #32]
 800b636:	431a      	orrs	r2, r3
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b63c:	019b      	lsls	r3, r3, #6
 800b63e:	431a      	orrs	r2, r3
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b644:	085b      	lsrs	r3, r3, #1
 800b646:	3b01      	subs	r3, #1
 800b648:	041b      	lsls	r3, r3, #16
 800b64a:	431a      	orrs	r2, r3
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b650:	061b      	lsls	r3, r3, #24
 800b652:	491b      	ldr	r1, [pc, #108]	@ (800b6c0 <HAL_RCC_OscConfig+0x470>)
 800b654:	4313      	orrs	r3, r2
 800b656:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b658:	4b1b      	ldr	r3, [pc, #108]	@ (800b6c8 <HAL_RCC_OscConfig+0x478>)
 800b65a:	2201      	movs	r2, #1
 800b65c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b65e:	f7fc f881 	bl	8007764 <HAL_GetTick>
 800b662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b664:	e008      	b.n	800b678 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b666:	f7fc f87d 	bl	8007764 <HAL_GetTick>
 800b66a:	4602      	mov	r2, r0
 800b66c:	693b      	ldr	r3, [r7, #16]
 800b66e:	1ad3      	subs	r3, r2, r3
 800b670:	2b02      	cmp	r3, #2
 800b672:	d901      	bls.n	800b678 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800b674:	2303      	movs	r3, #3
 800b676:	e05c      	b.n	800b732 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b678:	4b11      	ldr	r3, [pc, #68]	@ (800b6c0 <HAL_RCC_OscConfig+0x470>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b680:	2b00      	cmp	r3, #0
 800b682:	d0f0      	beq.n	800b666 <HAL_RCC_OscConfig+0x416>
 800b684:	e054      	b.n	800b730 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b686:	4b10      	ldr	r3, [pc, #64]	@ (800b6c8 <HAL_RCC_OscConfig+0x478>)
 800b688:	2200      	movs	r2, #0
 800b68a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b68c:	f7fc f86a 	bl	8007764 <HAL_GetTick>
 800b690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b692:	e008      	b.n	800b6a6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b694:	f7fc f866 	bl	8007764 <HAL_GetTick>
 800b698:	4602      	mov	r2, r0
 800b69a:	693b      	ldr	r3, [r7, #16]
 800b69c:	1ad3      	subs	r3, r2, r3
 800b69e:	2b02      	cmp	r3, #2
 800b6a0:	d901      	bls.n	800b6a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800b6a2:	2303      	movs	r3, #3
 800b6a4:	e045      	b.n	800b732 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b6a6:	4b06      	ldr	r3, [pc, #24]	@ (800b6c0 <HAL_RCC_OscConfig+0x470>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d1f0      	bne.n	800b694 <HAL_RCC_OscConfig+0x444>
 800b6b2:	e03d      	b.n	800b730 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	699b      	ldr	r3, [r3, #24]
 800b6b8:	2b01      	cmp	r3, #1
 800b6ba:	d107      	bne.n	800b6cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800b6bc:	2301      	movs	r3, #1
 800b6be:	e038      	b.n	800b732 <HAL_RCC_OscConfig+0x4e2>
 800b6c0:	40023800 	.word	0x40023800
 800b6c4:	40007000 	.word	0x40007000
 800b6c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b6cc:	4b1b      	ldr	r3, [pc, #108]	@ (800b73c <HAL_RCC_OscConfig+0x4ec>)
 800b6ce:	685b      	ldr	r3, [r3, #4]
 800b6d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	699b      	ldr	r3, [r3, #24]
 800b6d6:	2b01      	cmp	r3, #1
 800b6d8:	d028      	beq.n	800b72c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d121      	bne.n	800b72c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b6f2:	429a      	cmp	r2, r3
 800b6f4:	d11a      	bne.n	800b72c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b6f6:	68fa      	ldr	r2, [r7, #12]
 800b6f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800b6fc:	4013      	ands	r3, r2
 800b6fe:	687a      	ldr	r2, [r7, #4]
 800b700:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b702:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b704:	4293      	cmp	r3, r2
 800b706:	d111      	bne.n	800b72c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b712:	085b      	lsrs	r3, r3, #1
 800b714:	3b01      	subs	r3, #1
 800b716:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b718:	429a      	cmp	r2, r3
 800b71a:	d107      	bne.n	800b72c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b726:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b728:	429a      	cmp	r2, r3
 800b72a:	d001      	beq.n	800b730 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800b72c:	2301      	movs	r3, #1
 800b72e:	e000      	b.n	800b732 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800b730:	2300      	movs	r3, #0
}
 800b732:	4618      	mov	r0, r3
 800b734:	3718      	adds	r7, #24
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}
 800b73a:	bf00      	nop
 800b73c:	40023800 	.word	0x40023800

0800b740 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b084      	sub	sp, #16
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
 800b748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d101      	bne.n	800b754 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b750:	2301      	movs	r3, #1
 800b752:	e0cc      	b.n	800b8ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b754:	4b68      	ldr	r3, [pc, #416]	@ (800b8f8 <HAL_RCC_ClockConfig+0x1b8>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f003 0307 	and.w	r3, r3, #7
 800b75c:	683a      	ldr	r2, [r7, #0]
 800b75e:	429a      	cmp	r2, r3
 800b760:	d90c      	bls.n	800b77c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b762:	4b65      	ldr	r3, [pc, #404]	@ (800b8f8 <HAL_RCC_ClockConfig+0x1b8>)
 800b764:	683a      	ldr	r2, [r7, #0]
 800b766:	b2d2      	uxtb	r2, r2
 800b768:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b76a:	4b63      	ldr	r3, [pc, #396]	@ (800b8f8 <HAL_RCC_ClockConfig+0x1b8>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	f003 0307 	and.w	r3, r3, #7
 800b772:	683a      	ldr	r2, [r7, #0]
 800b774:	429a      	cmp	r2, r3
 800b776:	d001      	beq.n	800b77c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b778:	2301      	movs	r3, #1
 800b77a:	e0b8      	b.n	800b8ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	f003 0302 	and.w	r3, r3, #2
 800b784:	2b00      	cmp	r3, #0
 800b786:	d020      	beq.n	800b7ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	f003 0304 	and.w	r3, r3, #4
 800b790:	2b00      	cmp	r3, #0
 800b792:	d005      	beq.n	800b7a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b794:	4b59      	ldr	r3, [pc, #356]	@ (800b8fc <HAL_RCC_ClockConfig+0x1bc>)
 800b796:	689b      	ldr	r3, [r3, #8]
 800b798:	4a58      	ldr	r2, [pc, #352]	@ (800b8fc <HAL_RCC_ClockConfig+0x1bc>)
 800b79a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800b79e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	f003 0308 	and.w	r3, r3, #8
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d005      	beq.n	800b7b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b7ac:	4b53      	ldr	r3, [pc, #332]	@ (800b8fc <HAL_RCC_ClockConfig+0x1bc>)
 800b7ae:	689b      	ldr	r3, [r3, #8]
 800b7b0:	4a52      	ldr	r2, [pc, #328]	@ (800b8fc <HAL_RCC_ClockConfig+0x1bc>)
 800b7b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800b7b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b7b8:	4b50      	ldr	r3, [pc, #320]	@ (800b8fc <HAL_RCC_ClockConfig+0x1bc>)
 800b7ba:	689b      	ldr	r3, [r3, #8]
 800b7bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	689b      	ldr	r3, [r3, #8]
 800b7c4:	494d      	ldr	r1, [pc, #308]	@ (800b8fc <HAL_RCC_ClockConfig+0x1bc>)
 800b7c6:	4313      	orrs	r3, r2
 800b7c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	f003 0301 	and.w	r3, r3, #1
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d044      	beq.n	800b860 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	685b      	ldr	r3, [r3, #4]
 800b7da:	2b01      	cmp	r3, #1
 800b7dc:	d107      	bne.n	800b7ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b7de:	4b47      	ldr	r3, [pc, #284]	@ (800b8fc <HAL_RCC_ClockConfig+0x1bc>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d119      	bne.n	800b81e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	e07f      	b.n	800b8ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	685b      	ldr	r3, [r3, #4]
 800b7f2:	2b02      	cmp	r3, #2
 800b7f4:	d003      	beq.n	800b7fe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b7fa:	2b03      	cmp	r3, #3
 800b7fc:	d107      	bne.n	800b80e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b7fe:	4b3f      	ldr	r3, [pc, #252]	@ (800b8fc <HAL_RCC_ClockConfig+0x1bc>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b806:	2b00      	cmp	r3, #0
 800b808:	d109      	bne.n	800b81e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b80a:	2301      	movs	r3, #1
 800b80c:	e06f      	b.n	800b8ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b80e:	4b3b      	ldr	r3, [pc, #236]	@ (800b8fc <HAL_RCC_ClockConfig+0x1bc>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	f003 0302 	and.w	r3, r3, #2
 800b816:	2b00      	cmp	r3, #0
 800b818:	d101      	bne.n	800b81e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b81a:	2301      	movs	r3, #1
 800b81c:	e067      	b.n	800b8ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b81e:	4b37      	ldr	r3, [pc, #220]	@ (800b8fc <HAL_RCC_ClockConfig+0x1bc>)
 800b820:	689b      	ldr	r3, [r3, #8]
 800b822:	f023 0203 	bic.w	r2, r3, #3
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	685b      	ldr	r3, [r3, #4]
 800b82a:	4934      	ldr	r1, [pc, #208]	@ (800b8fc <HAL_RCC_ClockConfig+0x1bc>)
 800b82c:	4313      	orrs	r3, r2
 800b82e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b830:	f7fb ff98 	bl	8007764 <HAL_GetTick>
 800b834:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b836:	e00a      	b.n	800b84e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b838:	f7fb ff94 	bl	8007764 <HAL_GetTick>
 800b83c:	4602      	mov	r2, r0
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	1ad3      	subs	r3, r2, r3
 800b842:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b846:	4293      	cmp	r3, r2
 800b848:	d901      	bls.n	800b84e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b84a:	2303      	movs	r3, #3
 800b84c:	e04f      	b.n	800b8ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b84e:	4b2b      	ldr	r3, [pc, #172]	@ (800b8fc <HAL_RCC_ClockConfig+0x1bc>)
 800b850:	689b      	ldr	r3, [r3, #8]
 800b852:	f003 020c 	and.w	r2, r3, #12
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	685b      	ldr	r3, [r3, #4]
 800b85a:	009b      	lsls	r3, r3, #2
 800b85c:	429a      	cmp	r2, r3
 800b85e:	d1eb      	bne.n	800b838 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b860:	4b25      	ldr	r3, [pc, #148]	@ (800b8f8 <HAL_RCC_ClockConfig+0x1b8>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	f003 0307 	and.w	r3, r3, #7
 800b868:	683a      	ldr	r2, [r7, #0]
 800b86a:	429a      	cmp	r2, r3
 800b86c:	d20c      	bcs.n	800b888 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b86e:	4b22      	ldr	r3, [pc, #136]	@ (800b8f8 <HAL_RCC_ClockConfig+0x1b8>)
 800b870:	683a      	ldr	r2, [r7, #0]
 800b872:	b2d2      	uxtb	r2, r2
 800b874:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b876:	4b20      	ldr	r3, [pc, #128]	@ (800b8f8 <HAL_RCC_ClockConfig+0x1b8>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	f003 0307 	and.w	r3, r3, #7
 800b87e:	683a      	ldr	r2, [r7, #0]
 800b880:	429a      	cmp	r2, r3
 800b882:	d001      	beq.n	800b888 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b884:	2301      	movs	r3, #1
 800b886:	e032      	b.n	800b8ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f003 0304 	and.w	r3, r3, #4
 800b890:	2b00      	cmp	r3, #0
 800b892:	d008      	beq.n	800b8a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b894:	4b19      	ldr	r3, [pc, #100]	@ (800b8fc <HAL_RCC_ClockConfig+0x1bc>)
 800b896:	689b      	ldr	r3, [r3, #8]
 800b898:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	68db      	ldr	r3, [r3, #12]
 800b8a0:	4916      	ldr	r1, [pc, #88]	@ (800b8fc <HAL_RCC_ClockConfig+0x1bc>)
 800b8a2:	4313      	orrs	r3, r2
 800b8a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	f003 0308 	and.w	r3, r3, #8
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d009      	beq.n	800b8c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b8b2:	4b12      	ldr	r3, [pc, #72]	@ (800b8fc <HAL_RCC_ClockConfig+0x1bc>)
 800b8b4:	689b      	ldr	r3, [r3, #8]
 800b8b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	691b      	ldr	r3, [r3, #16]
 800b8be:	00db      	lsls	r3, r3, #3
 800b8c0:	490e      	ldr	r1, [pc, #56]	@ (800b8fc <HAL_RCC_ClockConfig+0x1bc>)
 800b8c2:	4313      	orrs	r3, r2
 800b8c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b8c6:	f000 f821 	bl	800b90c <HAL_RCC_GetSysClockFreq>
 800b8ca:	4602      	mov	r2, r0
 800b8cc:	4b0b      	ldr	r3, [pc, #44]	@ (800b8fc <HAL_RCC_ClockConfig+0x1bc>)
 800b8ce:	689b      	ldr	r3, [r3, #8]
 800b8d0:	091b      	lsrs	r3, r3, #4
 800b8d2:	f003 030f 	and.w	r3, r3, #15
 800b8d6:	490a      	ldr	r1, [pc, #40]	@ (800b900 <HAL_RCC_ClockConfig+0x1c0>)
 800b8d8:	5ccb      	ldrb	r3, [r1, r3]
 800b8da:	fa22 f303 	lsr.w	r3, r2, r3
 800b8de:	4a09      	ldr	r2, [pc, #36]	@ (800b904 <HAL_RCC_ClockConfig+0x1c4>)
 800b8e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800b8e2:	4b09      	ldr	r3, [pc, #36]	@ (800b908 <HAL_RCC_ClockConfig+0x1c8>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f7fb fef8 	bl	80076dc <HAL_InitTick>

  return HAL_OK;
 800b8ec:	2300      	movs	r3, #0
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3710      	adds	r7, #16
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}
 800b8f6:	bf00      	nop
 800b8f8:	40023c00 	.word	0x40023c00
 800b8fc:	40023800 	.word	0x40023800
 800b900:	08012528 	.word	0x08012528
 800b904:	200002cc 	.word	0x200002cc
 800b908:	200002d0 	.word	0x200002d0

0800b90c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b90c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b910:	b094      	sub	sp, #80	@ 0x50
 800b912:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800b914:	2300      	movs	r3, #0
 800b916:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800b918:	2300      	movs	r3, #0
 800b91a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800b91c:	2300      	movs	r3, #0
 800b91e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800b920:	2300      	movs	r3, #0
 800b922:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b924:	4b79      	ldr	r3, [pc, #484]	@ (800bb0c <HAL_RCC_GetSysClockFreq+0x200>)
 800b926:	689b      	ldr	r3, [r3, #8]
 800b928:	f003 030c 	and.w	r3, r3, #12
 800b92c:	2b08      	cmp	r3, #8
 800b92e:	d00d      	beq.n	800b94c <HAL_RCC_GetSysClockFreq+0x40>
 800b930:	2b08      	cmp	r3, #8
 800b932:	f200 80e1 	bhi.w	800baf8 <HAL_RCC_GetSysClockFreq+0x1ec>
 800b936:	2b00      	cmp	r3, #0
 800b938:	d002      	beq.n	800b940 <HAL_RCC_GetSysClockFreq+0x34>
 800b93a:	2b04      	cmp	r3, #4
 800b93c:	d003      	beq.n	800b946 <HAL_RCC_GetSysClockFreq+0x3a>
 800b93e:	e0db      	b.n	800baf8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b940:	4b73      	ldr	r3, [pc, #460]	@ (800bb10 <HAL_RCC_GetSysClockFreq+0x204>)
 800b942:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800b944:	e0db      	b.n	800bafe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b946:	4b73      	ldr	r3, [pc, #460]	@ (800bb14 <HAL_RCC_GetSysClockFreq+0x208>)
 800b948:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800b94a:	e0d8      	b.n	800bafe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b94c:	4b6f      	ldr	r3, [pc, #444]	@ (800bb0c <HAL_RCC_GetSysClockFreq+0x200>)
 800b94e:	685b      	ldr	r3, [r3, #4]
 800b950:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b954:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b956:	4b6d      	ldr	r3, [pc, #436]	@ (800bb0c <HAL_RCC_GetSysClockFreq+0x200>)
 800b958:	685b      	ldr	r3, [r3, #4]
 800b95a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d063      	beq.n	800ba2a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b962:	4b6a      	ldr	r3, [pc, #424]	@ (800bb0c <HAL_RCC_GetSysClockFreq+0x200>)
 800b964:	685b      	ldr	r3, [r3, #4]
 800b966:	099b      	lsrs	r3, r3, #6
 800b968:	2200      	movs	r2, #0
 800b96a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b96c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800b96e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b970:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b974:	633b      	str	r3, [r7, #48]	@ 0x30
 800b976:	2300      	movs	r3, #0
 800b978:	637b      	str	r3, [r7, #52]	@ 0x34
 800b97a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800b97e:	4622      	mov	r2, r4
 800b980:	462b      	mov	r3, r5
 800b982:	f04f 0000 	mov.w	r0, #0
 800b986:	f04f 0100 	mov.w	r1, #0
 800b98a:	0159      	lsls	r1, r3, #5
 800b98c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b990:	0150      	lsls	r0, r2, #5
 800b992:	4602      	mov	r2, r0
 800b994:	460b      	mov	r3, r1
 800b996:	4621      	mov	r1, r4
 800b998:	1a51      	subs	r1, r2, r1
 800b99a:	6139      	str	r1, [r7, #16]
 800b99c:	4629      	mov	r1, r5
 800b99e:	eb63 0301 	sbc.w	r3, r3, r1
 800b9a2:	617b      	str	r3, [r7, #20]
 800b9a4:	f04f 0200 	mov.w	r2, #0
 800b9a8:	f04f 0300 	mov.w	r3, #0
 800b9ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b9b0:	4659      	mov	r1, fp
 800b9b2:	018b      	lsls	r3, r1, #6
 800b9b4:	4651      	mov	r1, sl
 800b9b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b9ba:	4651      	mov	r1, sl
 800b9bc:	018a      	lsls	r2, r1, #6
 800b9be:	4651      	mov	r1, sl
 800b9c0:	ebb2 0801 	subs.w	r8, r2, r1
 800b9c4:	4659      	mov	r1, fp
 800b9c6:	eb63 0901 	sbc.w	r9, r3, r1
 800b9ca:	f04f 0200 	mov.w	r2, #0
 800b9ce:	f04f 0300 	mov.w	r3, #0
 800b9d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b9d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b9da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b9de:	4690      	mov	r8, r2
 800b9e0:	4699      	mov	r9, r3
 800b9e2:	4623      	mov	r3, r4
 800b9e4:	eb18 0303 	adds.w	r3, r8, r3
 800b9e8:	60bb      	str	r3, [r7, #8]
 800b9ea:	462b      	mov	r3, r5
 800b9ec:	eb49 0303 	adc.w	r3, r9, r3
 800b9f0:	60fb      	str	r3, [r7, #12]
 800b9f2:	f04f 0200 	mov.w	r2, #0
 800b9f6:	f04f 0300 	mov.w	r3, #0
 800b9fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800b9fe:	4629      	mov	r1, r5
 800ba00:	024b      	lsls	r3, r1, #9
 800ba02:	4621      	mov	r1, r4
 800ba04:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800ba08:	4621      	mov	r1, r4
 800ba0a:	024a      	lsls	r2, r1, #9
 800ba0c:	4610      	mov	r0, r2
 800ba0e:	4619      	mov	r1, r3
 800ba10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba12:	2200      	movs	r2, #0
 800ba14:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ba16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ba18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800ba1c:	f7f4 fc48 	bl	80002b0 <__aeabi_uldivmod>
 800ba20:	4602      	mov	r2, r0
 800ba22:	460b      	mov	r3, r1
 800ba24:	4613      	mov	r3, r2
 800ba26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ba28:	e058      	b.n	800badc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ba2a:	4b38      	ldr	r3, [pc, #224]	@ (800bb0c <HAL_RCC_GetSysClockFreq+0x200>)
 800ba2c:	685b      	ldr	r3, [r3, #4]
 800ba2e:	099b      	lsrs	r3, r3, #6
 800ba30:	2200      	movs	r2, #0
 800ba32:	4618      	mov	r0, r3
 800ba34:	4611      	mov	r1, r2
 800ba36:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800ba3a:	623b      	str	r3, [r7, #32]
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800ba44:	4642      	mov	r2, r8
 800ba46:	464b      	mov	r3, r9
 800ba48:	f04f 0000 	mov.w	r0, #0
 800ba4c:	f04f 0100 	mov.w	r1, #0
 800ba50:	0159      	lsls	r1, r3, #5
 800ba52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ba56:	0150      	lsls	r0, r2, #5
 800ba58:	4602      	mov	r2, r0
 800ba5a:	460b      	mov	r3, r1
 800ba5c:	4641      	mov	r1, r8
 800ba5e:	ebb2 0a01 	subs.w	sl, r2, r1
 800ba62:	4649      	mov	r1, r9
 800ba64:	eb63 0b01 	sbc.w	fp, r3, r1
 800ba68:	f04f 0200 	mov.w	r2, #0
 800ba6c:	f04f 0300 	mov.w	r3, #0
 800ba70:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800ba74:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800ba78:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800ba7c:	ebb2 040a 	subs.w	r4, r2, sl
 800ba80:	eb63 050b 	sbc.w	r5, r3, fp
 800ba84:	f04f 0200 	mov.w	r2, #0
 800ba88:	f04f 0300 	mov.w	r3, #0
 800ba8c:	00eb      	lsls	r3, r5, #3
 800ba8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ba92:	00e2      	lsls	r2, r4, #3
 800ba94:	4614      	mov	r4, r2
 800ba96:	461d      	mov	r5, r3
 800ba98:	4643      	mov	r3, r8
 800ba9a:	18e3      	adds	r3, r4, r3
 800ba9c:	603b      	str	r3, [r7, #0]
 800ba9e:	464b      	mov	r3, r9
 800baa0:	eb45 0303 	adc.w	r3, r5, r3
 800baa4:	607b      	str	r3, [r7, #4]
 800baa6:	f04f 0200 	mov.w	r2, #0
 800baaa:	f04f 0300 	mov.w	r3, #0
 800baae:	e9d7 4500 	ldrd	r4, r5, [r7]
 800bab2:	4629      	mov	r1, r5
 800bab4:	028b      	lsls	r3, r1, #10
 800bab6:	4621      	mov	r1, r4
 800bab8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800babc:	4621      	mov	r1, r4
 800babe:	028a      	lsls	r2, r1, #10
 800bac0:	4610      	mov	r0, r2
 800bac2:	4619      	mov	r1, r3
 800bac4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bac6:	2200      	movs	r2, #0
 800bac8:	61bb      	str	r3, [r7, #24]
 800baca:	61fa      	str	r2, [r7, #28]
 800bacc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bad0:	f7f4 fbee 	bl	80002b0 <__aeabi_uldivmod>
 800bad4:	4602      	mov	r2, r0
 800bad6:	460b      	mov	r3, r1
 800bad8:	4613      	mov	r3, r2
 800bada:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800badc:	4b0b      	ldr	r3, [pc, #44]	@ (800bb0c <HAL_RCC_GetSysClockFreq+0x200>)
 800bade:	685b      	ldr	r3, [r3, #4]
 800bae0:	0c1b      	lsrs	r3, r3, #16
 800bae2:	f003 0303 	and.w	r3, r3, #3
 800bae6:	3301      	adds	r3, #1
 800bae8:	005b      	lsls	r3, r3, #1
 800baea:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800baec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800baee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800baf0:	fbb2 f3f3 	udiv	r3, r2, r3
 800baf4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800baf6:	e002      	b.n	800bafe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800baf8:	4b05      	ldr	r3, [pc, #20]	@ (800bb10 <HAL_RCC_GetSysClockFreq+0x204>)
 800bafa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800bafc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800bafe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800bb00:	4618      	mov	r0, r3
 800bb02:	3750      	adds	r7, #80	@ 0x50
 800bb04:	46bd      	mov	sp, r7
 800bb06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bb0a:	bf00      	nop
 800bb0c:	40023800 	.word	0x40023800
 800bb10:	00f42400 	.word	0x00f42400
 800bb14:	007a1200 	.word	0x007a1200

0800bb18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bb18:	b480      	push	{r7}
 800bb1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bb1c:	4b03      	ldr	r3, [pc, #12]	@ (800bb2c <HAL_RCC_GetHCLKFreq+0x14>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
}
 800bb20:	4618      	mov	r0, r3
 800bb22:	46bd      	mov	sp, r7
 800bb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb28:	4770      	bx	lr
 800bb2a:	bf00      	nop
 800bb2c:	200002cc 	.word	0x200002cc

0800bb30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800bb34:	f7ff fff0 	bl	800bb18 <HAL_RCC_GetHCLKFreq>
 800bb38:	4602      	mov	r2, r0
 800bb3a:	4b05      	ldr	r3, [pc, #20]	@ (800bb50 <HAL_RCC_GetPCLK1Freq+0x20>)
 800bb3c:	689b      	ldr	r3, [r3, #8]
 800bb3e:	0a9b      	lsrs	r3, r3, #10
 800bb40:	f003 0307 	and.w	r3, r3, #7
 800bb44:	4903      	ldr	r1, [pc, #12]	@ (800bb54 <HAL_RCC_GetPCLK1Freq+0x24>)
 800bb46:	5ccb      	ldrb	r3, [r1, r3]
 800bb48:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	bd80      	pop	{r7, pc}
 800bb50:	40023800 	.word	0x40023800
 800bb54:	08012538 	.word	0x08012538

0800bb58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800bb5c:	f7ff ffdc 	bl	800bb18 <HAL_RCC_GetHCLKFreq>
 800bb60:	4602      	mov	r2, r0
 800bb62:	4b05      	ldr	r3, [pc, #20]	@ (800bb78 <HAL_RCC_GetPCLK2Freq+0x20>)
 800bb64:	689b      	ldr	r3, [r3, #8]
 800bb66:	0b5b      	lsrs	r3, r3, #13
 800bb68:	f003 0307 	and.w	r3, r3, #7
 800bb6c:	4903      	ldr	r1, [pc, #12]	@ (800bb7c <HAL_RCC_GetPCLK2Freq+0x24>)
 800bb6e:	5ccb      	ldrb	r3, [r1, r3]
 800bb70:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bb74:	4618      	mov	r0, r3
 800bb76:	bd80      	pop	{r7, pc}
 800bb78:	40023800 	.word	0x40023800
 800bb7c:	08012538 	.word	0x08012538

0800bb80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b082      	sub	sp, #8
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d101      	bne.n	800bb92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bb8e:	2301      	movs	r3, #1
 800bb90:	e07b      	b.n	800bc8a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d108      	bne.n	800bbac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	685b      	ldr	r3, [r3, #4]
 800bb9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800bba2:	d009      	beq.n	800bbb8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2200      	movs	r2, #0
 800bba8:	61da      	str	r2, [r3, #28]
 800bbaa:	e005      	b.n	800bbb8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2200      	movs	r2, #0
 800bbb0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800bbc4:	b2db      	uxtb	r3, r3
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d106      	bne.n	800bbd8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2200      	movs	r2, #0
 800bbce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f7fb fbc4 	bl	8007360 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2202      	movs	r2, #2
 800bbdc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	681a      	ldr	r2, [r3, #0]
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bbee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	685b      	ldr	r3, [r3, #4]
 800bbf4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	689b      	ldr	r3, [r3, #8]
 800bbfc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800bc00:	431a      	orrs	r2, r3
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	68db      	ldr	r3, [r3, #12]
 800bc06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bc0a:	431a      	orrs	r2, r3
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	691b      	ldr	r3, [r3, #16]
 800bc10:	f003 0302 	and.w	r3, r3, #2
 800bc14:	431a      	orrs	r2, r3
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	695b      	ldr	r3, [r3, #20]
 800bc1a:	f003 0301 	and.w	r3, r3, #1
 800bc1e:	431a      	orrs	r2, r3
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	699b      	ldr	r3, [r3, #24]
 800bc24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bc28:	431a      	orrs	r2, r3
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	69db      	ldr	r3, [r3, #28]
 800bc2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bc32:	431a      	orrs	r2, r3
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	6a1b      	ldr	r3, [r3, #32]
 800bc38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc3c:	ea42 0103 	orr.w	r1, r2, r3
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc44:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	430a      	orrs	r2, r1
 800bc4e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	699b      	ldr	r3, [r3, #24]
 800bc54:	0c1b      	lsrs	r3, r3, #16
 800bc56:	f003 0104 	and.w	r1, r3, #4
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc5e:	f003 0210 	and.w	r2, r3, #16
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	430a      	orrs	r2, r1
 800bc68:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	69da      	ldr	r2, [r3, #28]
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800bc78:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2201      	movs	r2, #1
 800bc84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800bc88:	2300      	movs	r3, #0
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	3708      	adds	r7, #8
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}

0800bc92 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bc92:	b580      	push	{r7, lr}
 800bc94:	b088      	sub	sp, #32
 800bc96:	af00      	add	r7, sp, #0
 800bc98:	60f8      	str	r0, [r7, #12]
 800bc9a:	60b9      	str	r1, [r7, #8]
 800bc9c:	603b      	str	r3, [r7, #0]
 800bc9e:	4613      	mov	r3, r2
 800bca0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bca2:	f7fb fd5f 	bl	8007764 <HAL_GetTick>
 800bca6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800bca8:	88fb      	ldrh	r3, [r7, #6]
 800bcaa:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800bcb2:	b2db      	uxtb	r3, r3
 800bcb4:	2b01      	cmp	r3, #1
 800bcb6:	d001      	beq.n	800bcbc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800bcb8:	2302      	movs	r3, #2
 800bcba:	e12a      	b.n	800bf12 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d002      	beq.n	800bcc8 <HAL_SPI_Transmit+0x36>
 800bcc2:	88fb      	ldrh	r3, [r7, #6]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d101      	bne.n	800bccc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800bcc8:	2301      	movs	r3, #1
 800bcca:	e122      	b.n	800bf12 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800bcd2:	2b01      	cmp	r3, #1
 800bcd4:	d101      	bne.n	800bcda <HAL_SPI_Transmit+0x48>
 800bcd6:	2302      	movs	r3, #2
 800bcd8:	e11b      	b.n	800bf12 <HAL_SPI_Transmit+0x280>
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	2201      	movs	r2, #1
 800bcde:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	2203      	movs	r2, #3
 800bce6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	2200      	movs	r2, #0
 800bcee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	68ba      	ldr	r2, [r7, #8]
 800bcf4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	88fa      	ldrh	r2, [r7, #6]
 800bcfa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	88fa      	ldrh	r2, [r7, #6]
 800bd00:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	2200      	movs	r2, #0
 800bd06:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	2200      	movs	r2, #0
 800bd12:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	2200      	movs	r2, #0
 800bd18:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	689b      	ldr	r3, [r3, #8]
 800bd24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bd28:	d10f      	bne.n	800bd4a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	681a      	ldr	r2, [r3, #0]
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bd38:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	681a      	ldr	r2, [r3, #0]
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bd48:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd54:	2b40      	cmp	r3, #64	@ 0x40
 800bd56:	d007      	beq.n	800bd68 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	681a      	ldr	r2, [r3, #0]
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bd66:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	68db      	ldr	r3, [r3, #12]
 800bd6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bd70:	d152      	bne.n	800be18 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	685b      	ldr	r3, [r3, #4]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d002      	beq.n	800bd80 <HAL_SPI_Transmit+0xee>
 800bd7a:	8b7b      	ldrh	r3, [r7, #26]
 800bd7c:	2b01      	cmp	r3, #1
 800bd7e:	d145      	bne.n	800be0c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd84:	881a      	ldrh	r2, [r3, #0]
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd90:	1c9a      	adds	r2, r3, #2
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800bd9a:	b29b      	uxth	r3, r3
 800bd9c:	3b01      	subs	r3, #1
 800bd9e:	b29a      	uxth	r2, r3
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800bda4:	e032      	b.n	800be0c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	689b      	ldr	r3, [r3, #8]
 800bdac:	f003 0302 	and.w	r3, r3, #2
 800bdb0:	2b02      	cmp	r3, #2
 800bdb2:	d112      	bne.n	800bdda <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdb8:	881a      	ldrh	r2, [r3, #0]
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdc4:	1c9a      	adds	r2, r3, #2
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800bdce:	b29b      	uxth	r3, r3
 800bdd0:	3b01      	subs	r3, #1
 800bdd2:	b29a      	uxth	r2, r3
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	86da      	strh	r2, [r3, #54]	@ 0x36
 800bdd8:	e018      	b.n	800be0c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bdda:	f7fb fcc3 	bl	8007764 <HAL_GetTick>
 800bdde:	4602      	mov	r2, r0
 800bde0:	69fb      	ldr	r3, [r7, #28]
 800bde2:	1ad3      	subs	r3, r2, r3
 800bde4:	683a      	ldr	r2, [r7, #0]
 800bde6:	429a      	cmp	r2, r3
 800bde8:	d803      	bhi.n	800bdf2 <HAL_SPI_Transmit+0x160>
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdf0:	d102      	bne.n	800bdf8 <HAL_SPI_Transmit+0x166>
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d109      	bne.n	800be0c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	2201      	movs	r2, #1
 800bdfc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	2200      	movs	r2, #0
 800be04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800be08:	2303      	movs	r3, #3
 800be0a:	e082      	b.n	800bf12 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800be10:	b29b      	uxth	r3, r3
 800be12:	2b00      	cmp	r3, #0
 800be14:	d1c7      	bne.n	800bda6 <HAL_SPI_Transmit+0x114>
 800be16:	e053      	b.n	800bec0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	685b      	ldr	r3, [r3, #4]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d002      	beq.n	800be26 <HAL_SPI_Transmit+0x194>
 800be20:	8b7b      	ldrh	r3, [r7, #26]
 800be22:	2b01      	cmp	r3, #1
 800be24:	d147      	bne.n	800beb6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	330c      	adds	r3, #12
 800be30:	7812      	ldrb	r2, [r2, #0]
 800be32:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be38:	1c5a      	adds	r2, r3, #1
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800be42:	b29b      	uxth	r3, r3
 800be44:	3b01      	subs	r3, #1
 800be46:	b29a      	uxth	r2, r3
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800be4c:	e033      	b.n	800beb6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	689b      	ldr	r3, [r3, #8]
 800be54:	f003 0302 	and.w	r3, r3, #2
 800be58:	2b02      	cmp	r3, #2
 800be5a:	d113      	bne.n	800be84 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	330c      	adds	r3, #12
 800be66:	7812      	ldrb	r2, [r2, #0]
 800be68:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be6e:	1c5a      	adds	r2, r3, #1
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800be78:	b29b      	uxth	r3, r3
 800be7a:	3b01      	subs	r3, #1
 800be7c:	b29a      	uxth	r2, r3
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	86da      	strh	r2, [r3, #54]	@ 0x36
 800be82:	e018      	b.n	800beb6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800be84:	f7fb fc6e 	bl	8007764 <HAL_GetTick>
 800be88:	4602      	mov	r2, r0
 800be8a:	69fb      	ldr	r3, [r7, #28]
 800be8c:	1ad3      	subs	r3, r2, r3
 800be8e:	683a      	ldr	r2, [r7, #0]
 800be90:	429a      	cmp	r2, r3
 800be92:	d803      	bhi.n	800be9c <HAL_SPI_Transmit+0x20a>
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be9a:	d102      	bne.n	800bea2 <HAL_SPI_Transmit+0x210>
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d109      	bne.n	800beb6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	2201      	movs	r2, #1
 800bea6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	2200      	movs	r2, #0
 800beae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800beb2:	2303      	movs	r3, #3
 800beb4:	e02d      	b.n	800bf12 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800beba:	b29b      	uxth	r3, r3
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d1c6      	bne.n	800be4e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bec0:	69fa      	ldr	r2, [r7, #28]
 800bec2:	6839      	ldr	r1, [r7, #0]
 800bec4:	68f8      	ldr	r0, [r7, #12]
 800bec6:	f000 f9c3 	bl	800c250 <SPI_EndRxTxTransaction>
 800beca:	4603      	mov	r3, r0
 800becc:	2b00      	cmp	r3, #0
 800bece:	d002      	beq.n	800bed6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	2220      	movs	r2, #32
 800bed4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	689b      	ldr	r3, [r3, #8]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d10a      	bne.n	800bef4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bede:	2300      	movs	r3, #0
 800bee0:	617b      	str	r3, [r7, #20]
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	68db      	ldr	r3, [r3, #12]
 800bee8:	617b      	str	r3, [r7, #20]
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	689b      	ldr	r3, [r3, #8]
 800bef0:	617b      	str	r3, [r7, #20]
 800bef2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	2201      	movs	r2, #1
 800bef8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	2200      	movs	r2, #0
 800bf00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d001      	beq.n	800bf10 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	e000      	b.n	800bf12 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800bf10:	2300      	movs	r3, #0
  }
}
 800bf12:	4618      	mov	r0, r3
 800bf14:	3720      	adds	r7, #32
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}
	...

0800bf1c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b088      	sub	sp, #32
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	685b      	ldr	r3, [r3, #4]
 800bf2a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	689b      	ldr	r3, [r3, #8]
 800bf32:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800bf34:	69bb      	ldr	r3, [r7, #24]
 800bf36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d10e      	bne.n	800bf5c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800bf3e:	69bb      	ldr	r3, [r7, #24]
 800bf40:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d009      	beq.n	800bf5c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800bf48:	69fb      	ldr	r3, [r7, #28]
 800bf4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d004      	beq.n	800bf5c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	4798      	blx	r3
    return;
 800bf5a:	e0ce      	b.n	800c0fa <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800bf5c:	69bb      	ldr	r3, [r7, #24]
 800bf5e:	f003 0302 	and.w	r3, r3, #2
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d009      	beq.n	800bf7a <HAL_SPI_IRQHandler+0x5e>
 800bf66:	69fb      	ldr	r3, [r7, #28]
 800bf68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d004      	beq.n	800bf7a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	4798      	blx	r3
    return;
 800bf78:	e0bf      	b.n	800c0fa <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800bf7a:	69bb      	ldr	r3, [r7, #24]
 800bf7c:	f003 0320 	and.w	r3, r3, #32
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d10a      	bne.n	800bf9a <HAL_SPI_IRQHandler+0x7e>
 800bf84:	69bb      	ldr	r3, [r7, #24]
 800bf86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d105      	bne.n	800bf9a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800bf8e:	69bb      	ldr	r3, [r7, #24]
 800bf90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	f000 80b0 	beq.w	800c0fa <HAL_SPI_IRQHandler+0x1de>
 800bf9a:	69fb      	ldr	r3, [r7, #28]
 800bf9c:	f003 0320 	and.w	r3, r3, #32
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	f000 80aa 	beq.w	800c0fa <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800bfa6:	69bb      	ldr	r3, [r7, #24]
 800bfa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d023      	beq.n	800bff8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800bfb6:	b2db      	uxtb	r3, r3
 800bfb8:	2b03      	cmp	r3, #3
 800bfba:	d011      	beq.n	800bfe0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bfc0:	f043 0204 	orr.w	r2, r3, #4
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bfc8:	2300      	movs	r3, #0
 800bfca:	617b      	str	r3, [r7, #20]
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	68db      	ldr	r3, [r3, #12]
 800bfd2:	617b      	str	r3, [r7, #20]
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	689b      	ldr	r3, [r3, #8]
 800bfda:	617b      	str	r3, [r7, #20]
 800bfdc:	697b      	ldr	r3, [r7, #20]
 800bfde:	e00b      	b.n	800bff8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	613b      	str	r3, [r7, #16]
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	68db      	ldr	r3, [r3, #12]
 800bfea:	613b      	str	r3, [r7, #16]
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	689b      	ldr	r3, [r3, #8]
 800bff2:	613b      	str	r3, [r7, #16]
 800bff4:	693b      	ldr	r3, [r7, #16]
        return;
 800bff6:	e080      	b.n	800c0fa <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800bff8:	69bb      	ldr	r3, [r7, #24]
 800bffa:	f003 0320 	and.w	r3, r3, #32
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d014      	beq.n	800c02c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c006:	f043 0201 	orr.w	r2, r3, #1
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c00e:	2300      	movs	r3, #0
 800c010:	60fb      	str	r3, [r7, #12]
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	689b      	ldr	r3, [r3, #8]
 800c018:	60fb      	str	r3, [r7, #12]
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	681a      	ldr	r2, [r3, #0]
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c028:	601a      	str	r2, [r3, #0]
 800c02a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800c02c:	69bb      	ldr	r3, [r7, #24]
 800c02e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c032:	2b00      	cmp	r3, #0
 800c034:	d00c      	beq.n	800c050 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c03a:	f043 0208 	orr.w	r2, r3, #8
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c042:	2300      	movs	r3, #0
 800c044:	60bb      	str	r3, [r7, #8]
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	689b      	ldr	r3, [r3, #8]
 800c04c:	60bb      	str	r3, [r7, #8]
 800c04e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c054:	2b00      	cmp	r3, #0
 800c056:	d04f      	beq.n	800c0f8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	685a      	ldr	r2, [r3, #4]
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800c066:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2201      	movs	r2, #1
 800c06c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800c070:	69fb      	ldr	r3, [r7, #28]
 800c072:	f003 0302 	and.w	r3, r3, #2
 800c076:	2b00      	cmp	r3, #0
 800c078:	d104      	bne.n	800c084 <HAL_SPI_IRQHandler+0x168>
 800c07a:	69fb      	ldr	r3, [r7, #28]
 800c07c:	f003 0301 	and.w	r3, r3, #1
 800c080:	2b00      	cmp	r3, #0
 800c082:	d034      	beq.n	800c0ee <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	685a      	ldr	r2, [r3, #4]
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	f022 0203 	bic.w	r2, r2, #3
 800c092:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d011      	beq.n	800c0c0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c0a0:	4a17      	ldr	r2, [pc, #92]	@ (800c100 <HAL_SPI_IRQHandler+0x1e4>)
 800c0a2:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	f7fb fe13 	bl	8007cd4 <HAL_DMA_Abort_IT>
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d005      	beq.n	800c0c0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c0b8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d016      	beq.n	800c0f6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c0cc:	4a0c      	ldr	r2, [pc, #48]	@ (800c100 <HAL_SPI_IRQHandler+0x1e4>)
 800c0ce:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	f7fb fdfd 	bl	8007cd4 <HAL_DMA_Abort_IT>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d00a      	beq.n	800c0f6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c0e4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 800c0ec:	e003      	b.n	800c0f6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800c0ee:	6878      	ldr	r0, [r7, #4]
 800c0f0:	f000 f808 	bl	800c104 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800c0f4:	e000      	b.n	800c0f8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800c0f6:	bf00      	nop
    return;
 800c0f8:	bf00      	nop
  }
}
 800c0fa:	3720      	adds	r7, #32
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}
 800c100:	0800c119 	.word	0x0800c119

0800c104 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800c104:	b480      	push	{r7}
 800c106:	b083      	sub	sp, #12
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800c10c:	bf00      	nop
 800c10e:	370c      	adds	r7, #12
 800c110:	46bd      	mov	sp, r7
 800c112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c116:	4770      	bx	lr

0800c118 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b084      	sub	sp, #16
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c124:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	2200      	movs	r2, #0
 800c12a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	2200      	movs	r2, #0
 800c130:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800c132:	68f8      	ldr	r0, [r7, #12]
 800c134:	f7ff ffe6 	bl	800c104 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c138:	bf00      	nop
 800c13a:	3710      	adds	r7, #16
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}

0800c140 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b088      	sub	sp, #32
 800c144:	af00      	add	r7, sp, #0
 800c146:	60f8      	str	r0, [r7, #12]
 800c148:	60b9      	str	r1, [r7, #8]
 800c14a:	603b      	str	r3, [r7, #0]
 800c14c:	4613      	mov	r3, r2
 800c14e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c150:	f7fb fb08 	bl	8007764 <HAL_GetTick>
 800c154:	4602      	mov	r2, r0
 800c156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c158:	1a9b      	subs	r3, r3, r2
 800c15a:	683a      	ldr	r2, [r7, #0]
 800c15c:	4413      	add	r3, r2
 800c15e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c160:	f7fb fb00 	bl	8007764 <HAL_GetTick>
 800c164:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c166:	4b39      	ldr	r3, [pc, #228]	@ (800c24c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	015b      	lsls	r3, r3, #5
 800c16c:	0d1b      	lsrs	r3, r3, #20
 800c16e:	69fa      	ldr	r2, [r7, #28]
 800c170:	fb02 f303 	mul.w	r3, r2, r3
 800c174:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c176:	e055      	b.n	800c224 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c17e:	d051      	beq.n	800c224 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c180:	f7fb faf0 	bl	8007764 <HAL_GetTick>
 800c184:	4602      	mov	r2, r0
 800c186:	69bb      	ldr	r3, [r7, #24]
 800c188:	1ad3      	subs	r3, r2, r3
 800c18a:	69fa      	ldr	r2, [r7, #28]
 800c18c:	429a      	cmp	r2, r3
 800c18e:	d902      	bls.n	800c196 <SPI_WaitFlagStateUntilTimeout+0x56>
 800c190:	69fb      	ldr	r3, [r7, #28]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d13d      	bne.n	800c212 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	685a      	ldr	r2, [r3, #4]
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800c1a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	685b      	ldr	r3, [r3, #4]
 800c1aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c1ae:	d111      	bne.n	800c1d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	689b      	ldr	r3, [r3, #8]
 800c1b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c1b8:	d004      	beq.n	800c1c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	689b      	ldr	r3, [r3, #8]
 800c1be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c1c2:	d107      	bne.n	800c1d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	681a      	ldr	r2, [r3, #0]
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c1d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c1dc:	d10f      	bne.n	800c1fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	681a      	ldr	r2, [r3, #0]
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c1ec:	601a      	str	r2, [r3, #0]
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	681a      	ldr	r2, [r3, #0]
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c1fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	2201      	movs	r2, #1
 800c202:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	2200      	movs	r2, #0
 800c20a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800c20e:	2303      	movs	r3, #3
 800c210:	e018      	b.n	800c244 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c212:	697b      	ldr	r3, [r7, #20]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d102      	bne.n	800c21e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800c218:	2300      	movs	r3, #0
 800c21a:	61fb      	str	r3, [r7, #28]
 800c21c:	e002      	b.n	800c224 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800c21e:	697b      	ldr	r3, [r7, #20]
 800c220:	3b01      	subs	r3, #1
 800c222:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	689a      	ldr	r2, [r3, #8]
 800c22a:	68bb      	ldr	r3, [r7, #8]
 800c22c:	4013      	ands	r3, r2
 800c22e:	68ba      	ldr	r2, [r7, #8]
 800c230:	429a      	cmp	r2, r3
 800c232:	bf0c      	ite	eq
 800c234:	2301      	moveq	r3, #1
 800c236:	2300      	movne	r3, #0
 800c238:	b2db      	uxtb	r3, r3
 800c23a:	461a      	mov	r2, r3
 800c23c:	79fb      	ldrb	r3, [r7, #7]
 800c23e:	429a      	cmp	r2, r3
 800c240:	d19a      	bne.n	800c178 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800c242:	2300      	movs	r3, #0
}
 800c244:	4618      	mov	r0, r3
 800c246:	3720      	adds	r7, #32
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}
 800c24c:	200002cc 	.word	0x200002cc

0800c250 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b088      	sub	sp, #32
 800c254:	af02      	add	r7, sp, #8
 800c256:	60f8      	str	r0, [r7, #12]
 800c258:	60b9      	str	r1, [r7, #8]
 800c25a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	9300      	str	r3, [sp, #0]
 800c260:	68bb      	ldr	r3, [r7, #8]
 800c262:	2201      	movs	r2, #1
 800c264:	2102      	movs	r1, #2
 800c266:	68f8      	ldr	r0, [r7, #12]
 800c268:	f7ff ff6a 	bl	800c140 <SPI_WaitFlagStateUntilTimeout>
 800c26c:	4603      	mov	r3, r0
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d007      	beq.n	800c282 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c276:	f043 0220 	orr.w	r2, r3, #32
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800c27e:	2303      	movs	r3, #3
 800c280:	e032      	b.n	800c2e8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c282:	4b1b      	ldr	r3, [pc, #108]	@ (800c2f0 <SPI_EndRxTxTransaction+0xa0>)
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	4a1b      	ldr	r2, [pc, #108]	@ (800c2f4 <SPI_EndRxTxTransaction+0xa4>)
 800c288:	fba2 2303 	umull	r2, r3, r2, r3
 800c28c:	0d5b      	lsrs	r3, r3, #21
 800c28e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c292:	fb02 f303 	mul.w	r3, r2, r3
 800c296:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	685b      	ldr	r3, [r3, #4]
 800c29c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c2a0:	d112      	bne.n	800c2c8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	9300      	str	r3, [sp, #0]
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	2180      	movs	r1, #128	@ 0x80
 800c2ac:	68f8      	ldr	r0, [r7, #12]
 800c2ae:	f7ff ff47 	bl	800c140 <SPI_WaitFlagStateUntilTimeout>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d016      	beq.n	800c2e6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2bc:	f043 0220 	orr.w	r2, r3, #32
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800c2c4:	2303      	movs	r3, #3
 800c2c6:	e00f      	b.n	800c2e8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c2c8:	697b      	ldr	r3, [r7, #20]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d00a      	beq.n	800c2e4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800c2ce:	697b      	ldr	r3, [r7, #20]
 800c2d0:	3b01      	subs	r3, #1
 800c2d2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	689b      	ldr	r3, [r3, #8]
 800c2da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c2de:	2b80      	cmp	r3, #128	@ 0x80
 800c2e0:	d0f2      	beq.n	800c2c8 <SPI_EndRxTxTransaction+0x78>
 800c2e2:	e000      	b.n	800c2e6 <SPI_EndRxTxTransaction+0x96>
        break;
 800c2e4:	bf00      	nop
  }

  return HAL_OK;
 800c2e6:	2300      	movs	r3, #0
}
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	3718      	adds	r7, #24
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bd80      	pop	{r7, pc}
 800c2f0:	200002cc 	.word	0x200002cc
 800c2f4:	165e9f81 	.word	0x165e9f81

0800c2f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b082      	sub	sp, #8
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d101      	bne.n	800c30a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c306:	2301      	movs	r3, #1
 800c308:	e042      	b.n	800c390 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c310:	b2db      	uxtb	r3, r3
 800c312:	2b00      	cmp	r3, #0
 800c314:	d106      	bne.n	800c324 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2200      	movs	r2, #0
 800c31a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f7fb f86e 	bl	8007400 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2224      	movs	r2, #36	@ 0x24
 800c328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	68da      	ldr	r2, [r3, #12]
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c33a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c33c:	6878      	ldr	r0, [r7, #4]
 800c33e:	f000 feb3 	bl	800d0a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	691a      	ldr	r2, [r3, #16]
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c350:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	695a      	ldr	r2, [r3, #20]
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c360:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	68da      	ldr	r2, [r3, #12]
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c370:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	2200      	movs	r2, #0
 800c376:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2220      	movs	r2, #32
 800c37c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2220      	movs	r2, #32
 800c384:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2200      	movs	r2, #0
 800c38c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800c38e:	2300      	movs	r3, #0
}
 800c390:	4618      	mov	r0, r3
 800c392:	3708      	adds	r7, #8
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}

0800c398 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b08c      	sub	sp, #48	@ 0x30
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	60f8      	str	r0, [r7, #12]
 800c3a0:	60b9      	str	r1, [r7, #8]
 800c3a2:	4613      	mov	r3, r2
 800c3a4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c3ac:	b2db      	uxtb	r3, r3
 800c3ae:	2b20      	cmp	r3, #32
 800c3b0:	d146      	bne.n	800c440 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d002      	beq.n	800c3be <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800c3b8:	88fb      	ldrh	r3, [r7, #6]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d101      	bne.n	800c3c2 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800c3be:	2301      	movs	r3, #1
 800c3c0:	e03f      	b.n	800c442 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	2201      	movs	r2, #1
 800c3c6:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800c3ce:	88fb      	ldrh	r3, [r7, #6]
 800c3d0:	461a      	mov	r2, r3
 800c3d2:	68b9      	ldr	r1, [r7, #8]
 800c3d4:	68f8      	ldr	r0, [r7, #12]
 800c3d6:	f000 fbff 	bl	800cbd8 <UART_Start_Receive_DMA>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3e4:	2b01      	cmp	r3, #1
 800c3e6:	d125      	bne.n	800c434 <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	613b      	str	r3, [r7, #16]
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	613b      	str	r3, [r7, #16]
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	685b      	ldr	r3, [r3, #4]
 800c3fa:	613b      	str	r3, [r7, #16]
 800c3fc:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	330c      	adds	r3, #12
 800c404:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c406:	69bb      	ldr	r3, [r7, #24]
 800c408:	e853 3f00 	ldrex	r3, [r3]
 800c40c:	617b      	str	r3, [r7, #20]
   return(result);
 800c40e:	697b      	ldr	r3, [r7, #20]
 800c410:	f043 0310 	orr.w	r3, r3, #16
 800c414:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	330c      	adds	r3, #12
 800c41c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c41e:	627a      	str	r2, [r7, #36]	@ 0x24
 800c420:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c422:	6a39      	ldr	r1, [r7, #32]
 800c424:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c426:	e841 2300 	strex	r3, r2, [r1]
 800c42a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c42c:	69fb      	ldr	r3, [r7, #28]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d1e5      	bne.n	800c3fe <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 800c432:	e002      	b.n	800c43a <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 800c434:	2301      	movs	r3, #1
 800c436:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 800c43a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c43e:	e000      	b.n	800c442 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 800c440:	2302      	movs	r3, #2
  }
}
 800c442:	4618      	mov	r0, r3
 800c444:	3730      	adds	r7, #48	@ 0x30
 800c446:	46bd      	mov	sp, r7
 800c448:	bd80      	pop	{r7, pc}
	...

0800c44c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b0ba      	sub	sp, #232	@ 0xe8
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	68db      	ldr	r3, [r3, #12]
 800c464:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	695b      	ldr	r3, [r3, #20]
 800c46e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800c472:	2300      	movs	r3, #0
 800c474:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800c478:	2300      	movs	r3, #0
 800c47a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c47e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c482:	f003 030f 	and.w	r3, r3, #15
 800c486:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800c48a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d10f      	bne.n	800c4b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c496:	f003 0320 	and.w	r3, r3, #32
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d009      	beq.n	800c4b2 <HAL_UART_IRQHandler+0x66>
 800c49e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c4a2:	f003 0320 	and.w	r3, r3, #32
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d003      	beq.n	800c4b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f000 fd3e 	bl	800cf2c <UART_Receive_IT>
      return;
 800c4b0:	e273      	b.n	800c99a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c4b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	f000 80de 	beq.w	800c678 <HAL_UART_IRQHandler+0x22c>
 800c4bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c4c0:	f003 0301 	and.w	r3, r3, #1
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d106      	bne.n	800c4d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c4c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c4cc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	f000 80d1 	beq.w	800c678 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c4d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c4da:	f003 0301 	and.w	r3, r3, #1
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d00b      	beq.n	800c4fa <HAL_UART_IRQHandler+0xae>
 800c4e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c4e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d005      	beq.n	800c4fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4f2:	f043 0201 	orr.w	r2, r3, #1
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c4fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c4fe:	f003 0304 	and.w	r3, r3, #4
 800c502:	2b00      	cmp	r3, #0
 800c504:	d00b      	beq.n	800c51e <HAL_UART_IRQHandler+0xd2>
 800c506:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c50a:	f003 0301 	and.w	r3, r3, #1
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d005      	beq.n	800c51e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c516:	f043 0202 	orr.w	r2, r3, #2
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c51e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c522:	f003 0302 	and.w	r3, r3, #2
 800c526:	2b00      	cmp	r3, #0
 800c528:	d00b      	beq.n	800c542 <HAL_UART_IRQHandler+0xf6>
 800c52a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c52e:	f003 0301 	and.w	r3, r3, #1
 800c532:	2b00      	cmp	r3, #0
 800c534:	d005      	beq.n	800c542 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c53a:	f043 0204 	orr.w	r2, r3, #4
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c546:	f003 0308 	and.w	r3, r3, #8
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d011      	beq.n	800c572 <HAL_UART_IRQHandler+0x126>
 800c54e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c552:	f003 0320 	and.w	r3, r3, #32
 800c556:	2b00      	cmp	r3, #0
 800c558:	d105      	bne.n	800c566 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c55a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c55e:	f003 0301 	and.w	r3, r3, #1
 800c562:	2b00      	cmp	r3, #0
 800c564:	d005      	beq.n	800c572 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c56a:	f043 0208 	orr.w	r2, r3, #8
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c576:	2b00      	cmp	r3, #0
 800c578:	f000 820a 	beq.w	800c990 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c57c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c580:	f003 0320 	and.w	r3, r3, #32
 800c584:	2b00      	cmp	r3, #0
 800c586:	d008      	beq.n	800c59a <HAL_UART_IRQHandler+0x14e>
 800c588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c58c:	f003 0320 	and.w	r3, r3, #32
 800c590:	2b00      	cmp	r3, #0
 800c592:	d002      	beq.n	800c59a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f000 fcc9 	bl	800cf2c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	695b      	ldr	r3, [r3, #20]
 800c5a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5a4:	2b40      	cmp	r3, #64	@ 0x40
 800c5a6:	bf0c      	ite	eq
 800c5a8:	2301      	moveq	r3, #1
 800c5aa:	2300      	movne	r3, #0
 800c5ac:	b2db      	uxtb	r3, r3
 800c5ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5b6:	f003 0308 	and.w	r3, r3, #8
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d103      	bne.n	800c5c6 <HAL_UART_IRQHandler+0x17a>
 800c5be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d04f      	beq.n	800c666 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c5c6:	6878      	ldr	r0, [r7, #4]
 800c5c8:	f000 fbd4 	bl	800cd74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	695b      	ldr	r3, [r3, #20]
 800c5d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5d6:	2b40      	cmp	r3, #64	@ 0x40
 800c5d8:	d141      	bne.n	800c65e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	3314      	adds	r3, #20
 800c5e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c5e8:	e853 3f00 	ldrex	r3, [r3]
 800c5ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c5f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c5f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c5f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	3314      	adds	r3, #20
 800c602:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c606:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c60a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c60e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c612:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c616:	e841 2300 	strex	r3, r2, [r1]
 800c61a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c61e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c622:	2b00      	cmp	r3, #0
 800c624:	d1d9      	bne.n	800c5da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d013      	beq.n	800c656 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c632:	4a8a      	ldr	r2, [pc, #552]	@ (800c85c <HAL_UART_IRQHandler+0x410>)
 800c634:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c63a:	4618      	mov	r0, r3
 800c63c:	f7fb fb4a 	bl	8007cd4 <HAL_DMA_Abort_IT>
 800c640:	4603      	mov	r3, r0
 800c642:	2b00      	cmp	r3, #0
 800c644:	d016      	beq.n	800c674 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c64a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c64c:	687a      	ldr	r2, [r7, #4]
 800c64e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c650:	4610      	mov	r0, r2
 800c652:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c654:	e00e      	b.n	800c674 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f7f9 fede 	bl	8006418 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c65c:	e00a      	b.n	800c674 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c65e:	6878      	ldr	r0, [r7, #4]
 800c660:	f7f9 feda 	bl	8006418 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c664:	e006      	b.n	800c674 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c666:	6878      	ldr	r0, [r7, #4]
 800c668:	f7f9 fed6 	bl	8006418 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2200      	movs	r2, #0
 800c670:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800c672:	e18d      	b.n	800c990 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c674:	bf00      	nop
    return;
 800c676:	e18b      	b.n	800c990 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c67c:	2b01      	cmp	r3, #1
 800c67e:	f040 8167 	bne.w	800c950 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c686:	f003 0310 	and.w	r3, r3, #16
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	f000 8160 	beq.w	800c950 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800c690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c694:	f003 0310 	and.w	r3, r3, #16
 800c698:	2b00      	cmp	r3, #0
 800c69a:	f000 8159 	beq.w	800c950 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c69e:	2300      	movs	r3, #0
 800c6a0:	60bb      	str	r3, [r7, #8]
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	60bb      	str	r3, [r7, #8]
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	685b      	ldr	r3, [r3, #4]
 800c6b0:	60bb      	str	r3, [r7, #8]
 800c6b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	695b      	ldr	r3, [r3, #20]
 800c6ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6be:	2b40      	cmp	r3, #64	@ 0x40
 800c6c0:	f040 80ce 	bne.w	800c860 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	685b      	ldr	r3, [r3, #4]
 800c6cc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c6d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	f000 80a9 	beq.w	800c82c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c6de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c6e2:	429a      	cmp	r2, r3
 800c6e4:	f080 80a2 	bcs.w	800c82c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c6ee:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6f4:	69db      	ldr	r3, [r3, #28]
 800c6f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c6fa:	f000 8088 	beq.w	800c80e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	330c      	adds	r3, #12
 800c704:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c708:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c70c:	e853 3f00 	ldrex	r3, [r3]
 800c710:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c714:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c718:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c71c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	330c      	adds	r3, #12
 800c726:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800c72a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c72e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c732:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c736:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c73a:	e841 2300 	strex	r3, r2, [r1]
 800c73e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c742:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c746:	2b00      	cmp	r3, #0
 800c748:	d1d9      	bne.n	800c6fe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	3314      	adds	r3, #20
 800c750:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c752:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c754:	e853 3f00 	ldrex	r3, [r3]
 800c758:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c75a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c75c:	f023 0301 	bic.w	r3, r3, #1
 800c760:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	3314      	adds	r3, #20
 800c76a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c76e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c772:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c774:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c776:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c77a:	e841 2300 	strex	r3, r2, [r1]
 800c77e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c780:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c782:	2b00      	cmp	r3, #0
 800c784:	d1e1      	bne.n	800c74a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	3314      	adds	r3, #20
 800c78c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c78e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c790:	e853 3f00 	ldrex	r3, [r3]
 800c794:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c796:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c798:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c79c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	3314      	adds	r3, #20
 800c7a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c7aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c7ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7ae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c7b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c7b2:	e841 2300 	strex	r3, r2, [r1]
 800c7b6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c7b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d1e3      	bne.n	800c786 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2220      	movs	r2, #32
 800c7c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	330c      	adds	r3, #12
 800c7d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c7d6:	e853 3f00 	ldrex	r3, [r3]
 800c7da:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c7dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c7de:	f023 0310 	bic.w	r3, r3, #16
 800c7e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	330c      	adds	r3, #12
 800c7ec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c7f0:	65ba      	str	r2, [r7, #88]	@ 0x58
 800c7f2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7f4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c7f6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c7f8:	e841 2300 	strex	r3, r2, [r1]
 800c7fc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c7fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c800:	2b00      	cmp	r3, #0
 800c802:	d1e3      	bne.n	800c7cc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c808:	4618      	mov	r0, r3
 800c80a:	f7fb f9f3 	bl	8007bf4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	2202      	movs	r2, #2
 800c812:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c81c:	b29b      	uxth	r3, r3
 800c81e:	1ad3      	subs	r3, r2, r3
 800c820:	b29b      	uxth	r3, r3
 800c822:	4619      	mov	r1, r3
 800c824:	6878      	ldr	r0, [r7, #4]
 800c826:	f7f9 fdd9 	bl	80063dc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800c82a:	e0b3      	b.n	800c994 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c830:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c834:	429a      	cmp	r2, r3
 800c836:	f040 80ad 	bne.w	800c994 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c83e:	69db      	ldr	r3, [r3, #28]
 800c840:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c844:	f040 80a6 	bne.w	800c994 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2202      	movs	r2, #2
 800c84c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c852:	4619      	mov	r1, r3
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f7f9 fdc1 	bl	80063dc <HAL_UARTEx_RxEventCallback>
      return;
 800c85a:	e09b      	b.n	800c994 <HAL_UART_IRQHandler+0x548>
 800c85c:	0800ce3b 	.word	0x0800ce3b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c868:	b29b      	uxth	r3, r3
 800c86a:	1ad3      	subs	r3, r2, r3
 800c86c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c874:	b29b      	uxth	r3, r3
 800c876:	2b00      	cmp	r3, #0
 800c878:	f000 808e 	beq.w	800c998 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800c87c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c880:	2b00      	cmp	r3, #0
 800c882:	f000 8089 	beq.w	800c998 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	330c      	adds	r3, #12
 800c88c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c88e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c890:	e853 3f00 	ldrex	r3, [r3]
 800c894:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c898:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c89c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	330c      	adds	r3, #12
 800c8a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800c8aa:	647a      	str	r2, [r7, #68]	@ 0x44
 800c8ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c8b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c8b2:	e841 2300 	strex	r3, r2, [r1]
 800c8b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c8b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d1e3      	bne.n	800c886 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	3314      	adds	r3, #20
 800c8c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8c8:	e853 3f00 	ldrex	r3, [r3]
 800c8cc:	623b      	str	r3, [r7, #32]
   return(result);
 800c8ce:	6a3b      	ldr	r3, [r7, #32]
 800c8d0:	f023 0301 	bic.w	r3, r3, #1
 800c8d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	3314      	adds	r3, #20
 800c8de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c8e2:	633a      	str	r2, [r7, #48]	@ 0x30
 800c8e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c8e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c8ea:	e841 2300 	strex	r3, r2, [r1]
 800c8ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c8f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d1e3      	bne.n	800c8be <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2220      	movs	r2, #32
 800c8fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	2200      	movs	r2, #0
 800c902:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	330c      	adds	r3, #12
 800c90a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c90c:	693b      	ldr	r3, [r7, #16]
 800c90e:	e853 3f00 	ldrex	r3, [r3]
 800c912:	60fb      	str	r3, [r7, #12]
   return(result);
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	f023 0310 	bic.w	r3, r3, #16
 800c91a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	330c      	adds	r3, #12
 800c924:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800c928:	61fa      	str	r2, [r7, #28]
 800c92a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c92c:	69b9      	ldr	r1, [r7, #24]
 800c92e:	69fa      	ldr	r2, [r7, #28]
 800c930:	e841 2300 	strex	r3, r2, [r1]
 800c934:	617b      	str	r3, [r7, #20]
   return(result);
 800c936:	697b      	ldr	r3, [r7, #20]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d1e3      	bne.n	800c904 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2202      	movs	r2, #2
 800c940:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c942:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c946:	4619      	mov	r1, r3
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	f7f9 fd47 	bl	80063dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c94e:	e023      	b.n	800c998 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c954:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d009      	beq.n	800c970 <HAL_UART_IRQHandler+0x524>
 800c95c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c960:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c964:	2b00      	cmp	r3, #0
 800c966:	d003      	beq.n	800c970 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f000 fa77 	bl	800ce5c <UART_Transmit_IT>
    return;
 800c96e:	e014      	b.n	800c99a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c974:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d00e      	beq.n	800c99a <HAL_UART_IRQHandler+0x54e>
 800c97c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c984:	2b00      	cmp	r3, #0
 800c986:	d008      	beq.n	800c99a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800c988:	6878      	ldr	r0, [r7, #4]
 800c98a:	f000 fab7 	bl	800cefc <UART_EndTransmit_IT>
    return;
 800c98e:	e004      	b.n	800c99a <HAL_UART_IRQHandler+0x54e>
    return;
 800c990:	bf00      	nop
 800c992:	e002      	b.n	800c99a <HAL_UART_IRQHandler+0x54e>
      return;
 800c994:	bf00      	nop
 800c996:	e000      	b.n	800c99a <HAL_UART_IRQHandler+0x54e>
      return;
 800c998:	bf00      	nop
  }
}
 800c99a:	37e8      	adds	r7, #232	@ 0xe8
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd80      	pop	{r7, pc}

0800c9a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c9a0:	b480      	push	{r7}
 800c9a2:	b083      	sub	sp, #12
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c9a8:	bf00      	nop
 800c9aa:	370c      	adds	r7, #12
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b2:	4770      	bx	lr

0800c9b4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c9b4:	b480      	push	{r7}
 800c9b6:	b083      	sub	sp, #12
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800c9bc:	bf00      	nop
 800c9be:	370c      	adds	r7, #12
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c6:	4770      	bx	lr

0800c9c8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c9c8:	b480      	push	{r7}
 800c9ca:	b083      	sub	sp, #12
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800c9d0:	bf00      	nop
 800c9d2:	370c      	adds	r7, #12
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9da:	4770      	bx	lr

0800c9dc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b09c      	sub	sp, #112	@ 0x70
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9e8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d172      	bne.n	800cade <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800c9f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c9fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	330c      	adds	r3, #12
 800ca04:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca08:	e853 3f00 	ldrex	r3, [r3]
 800ca0c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ca0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ca10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ca14:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ca16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	330c      	adds	r3, #12
 800ca1c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ca1e:	65ba      	str	r2, [r7, #88]	@ 0x58
 800ca20:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca22:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ca24:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ca26:	e841 2300 	strex	r3, r2, [r1]
 800ca2a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ca2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d1e5      	bne.n	800c9fe <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	3314      	adds	r3, #20
 800ca38:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca3c:	e853 3f00 	ldrex	r3, [r3]
 800ca40:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ca42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca44:	f023 0301 	bic.w	r3, r3, #1
 800ca48:	667b      	str	r3, [r7, #100]	@ 0x64
 800ca4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	3314      	adds	r3, #20
 800ca50:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ca52:	647a      	str	r2, [r7, #68]	@ 0x44
 800ca54:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca56:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ca58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ca5a:	e841 2300 	strex	r3, r2, [r1]
 800ca5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ca60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d1e5      	bne.n	800ca32 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ca66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	3314      	adds	r3, #20
 800ca6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca70:	e853 3f00 	ldrex	r3, [r3]
 800ca74:	623b      	str	r3, [r7, #32]
   return(result);
 800ca76:	6a3b      	ldr	r3, [r7, #32]
 800ca78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ca7c:	663b      	str	r3, [r7, #96]	@ 0x60
 800ca7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	3314      	adds	r3, #20
 800ca84:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ca86:	633a      	str	r2, [r7, #48]	@ 0x30
 800ca88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ca8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca8e:	e841 2300 	strex	r3, r2, [r1]
 800ca92:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ca94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d1e5      	bne.n	800ca66 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ca9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ca9c:	2220      	movs	r2, #32
 800ca9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800caa2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800caa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800caa6:	2b01      	cmp	r3, #1
 800caa8:	d119      	bne.n	800cade <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800caaa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	330c      	adds	r3, #12
 800cab0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cab2:	693b      	ldr	r3, [r7, #16]
 800cab4:	e853 3f00 	ldrex	r3, [r3]
 800cab8:	60fb      	str	r3, [r7, #12]
   return(result);
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	f023 0310 	bic.w	r3, r3, #16
 800cac0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cac2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	330c      	adds	r3, #12
 800cac8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800caca:	61fa      	str	r2, [r7, #28]
 800cacc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cace:	69b9      	ldr	r1, [r7, #24]
 800cad0:	69fa      	ldr	r2, [r7, #28]
 800cad2:	e841 2300 	strex	r3, r2, [r1]
 800cad6:	617b      	str	r3, [r7, #20]
   return(result);
 800cad8:	697b      	ldr	r3, [r7, #20]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d1e5      	bne.n	800caaa <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cade:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cae0:	2200      	movs	r2, #0
 800cae2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cae4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cae8:	2b01      	cmp	r3, #1
 800caea:	d106      	bne.n	800cafa <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800caec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800caee:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800caf0:	4619      	mov	r1, r3
 800caf2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800caf4:	f7f9 fc72 	bl	80063dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800caf8:	e002      	b.n	800cb00 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800cafa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800cafc:	f7ff ff5a 	bl	800c9b4 <HAL_UART_RxCpltCallback>
}
 800cb00:	bf00      	nop
 800cb02:	3770      	adds	r7, #112	@ 0x70
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd80      	pop	{r7, pc}

0800cb08 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b084      	sub	sp, #16
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb14:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	2201      	movs	r2, #1
 800cb1a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb20:	2b01      	cmp	r3, #1
 800cb22:	d108      	bne.n	800cb36 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800cb28:	085b      	lsrs	r3, r3, #1
 800cb2a:	b29b      	uxth	r3, r3
 800cb2c:	4619      	mov	r1, r3
 800cb2e:	68f8      	ldr	r0, [r7, #12]
 800cb30:	f7f9 fc54 	bl	80063dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cb34:	e002      	b.n	800cb3c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800cb36:	68f8      	ldr	r0, [r7, #12]
 800cb38:	f7ff ff46 	bl	800c9c8 <HAL_UART_RxHalfCpltCallback>
}
 800cb3c:	bf00      	nop
 800cb3e:	3710      	adds	r7, #16
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bd80      	pop	{r7, pc}

0800cb44 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b084      	sub	sp, #16
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb54:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800cb56:	68bb      	ldr	r3, [r7, #8]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	695b      	ldr	r3, [r3, #20]
 800cb5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cb60:	2b80      	cmp	r3, #128	@ 0x80
 800cb62:	bf0c      	ite	eq
 800cb64:	2301      	moveq	r3, #1
 800cb66:	2300      	movne	r3, #0
 800cb68:	b2db      	uxtb	r3, r3
 800cb6a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800cb6c:	68bb      	ldr	r3, [r7, #8]
 800cb6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cb72:	b2db      	uxtb	r3, r3
 800cb74:	2b21      	cmp	r3, #33	@ 0x21
 800cb76:	d108      	bne.n	800cb8a <UART_DMAError+0x46>
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d005      	beq.n	800cb8a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800cb7e:	68bb      	ldr	r3, [r7, #8]
 800cb80:	2200      	movs	r2, #0
 800cb82:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800cb84:	68b8      	ldr	r0, [r7, #8]
 800cb86:	f000 f8cd 	bl	800cd24 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800cb8a:	68bb      	ldr	r3, [r7, #8]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	695b      	ldr	r3, [r3, #20]
 800cb90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb94:	2b40      	cmp	r3, #64	@ 0x40
 800cb96:	bf0c      	ite	eq
 800cb98:	2301      	moveq	r3, #1
 800cb9a:	2300      	movne	r3, #0
 800cb9c:	b2db      	uxtb	r3, r3
 800cb9e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800cba0:	68bb      	ldr	r3, [r7, #8]
 800cba2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cba6:	b2db      	uxtb	r3, r3
 800cba8:	2b22      	cmp	r3, #34	@ 0x22
 800cbaa:	d108      	bne.n	800cbbe <UART_DMAError+0x7a>
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d005      	beq.n	800cbbe <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800cbb8:	68b8      	ldr	r0, [r7, #8]
 800cbba:	f000 f8db 	bl	800cd74 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800cbbe:	68bb      	ldr	r3, [r7, #8]
 800cbc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cbc2:	f043 0210 	orr.w	r2, r3, #16
 800cbc6:	68bb      	ldr	r3, [r7, #8]
 800cbc8:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cbca:	68b8      	ldr	r0, [r7, #8]
 800cbcc:	f7f9 fc24 	bl	8006418 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cbd0:	bf00      	nop
 800cbd2:	3710      	adds	r7, #16
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	bd80      	pop	{r7, pc}

0800cbd8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b098      	sub	sp, #96	@ 0x60
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	60f8      	str	r0, [r7, #12]
 800cbe0:	60b9      	str	r1, [r7, #8]
 800cbe2:	4613      	mov	r3, r2
 800cbe4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800cbe6:	68ba      	ldr	r2, [r7, #8]
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	88fa      	ldrh	r2, [r7, #6]
 800cbf0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	2222      	movs	r2, #34	@ 0x22
 800cbfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc04:	4a44      	ldr	r2, [pc, #272]	@ (800cd18 <UART_Start_Receive_DMA+0x140>)
 800cc06:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc0c:	4a43      	ldr	r2, [pc, #268]	@ (800cd1c <UART_Start_Receive_DMA+0x144>)
 800cc0e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc14:	4a42      	ldr	r2, [pc, #264]	@ (800cd20 <UART_Start_Receive_DMA+0x148>)
 800cc16:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800cc20:	f107 0308 	add.w	r3, r7, #8
 800cc24:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	3304      	adds	r3, #4
 800cc30:	4619      	mov	r1, r3
 800cc32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cc34:	681a      	ldr	r2, [r3, #0]
 800cc36:	88fb      	ldrh	r3, [r7, #6]
 800cc38:	f7fa ff84 	bl	8007b44 <HAL_DMA_Start_IT>
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d008      	beq.n	800cc54 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	2210      	movs	r2, #16
 800cc46:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	2220      	movs	r2, #32
 800cc4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 800cc50:	2301      	movs	r3, #1
 800cc52:	e05d      	b.n	800cd10 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800cc54:	2300      	movs	r3, #0
 800cc56:	613b      	str	r3, [r7, #16]
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	613b      	str	r3, [r7, #16]
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	685b      	ldr	r3, [r3, #4]
 800cc66:	613b      	str	r3, [r7, #16]
 800cc68:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	691b      	ldr	r3, [r3, #16]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d019      	beq.n	800cca6 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	330c      	adds	r3, #12
 800cc78:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc7c:	e853 3f00 	ldrex	r3, [r3]
 800cc80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cc82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cc88:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	330c      	adds	r3, #12
 800cc90:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cc92:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800cc94:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc96:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800cc98:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cc9a:	e841 2300 	strex	r3, r2, [r1]
 800cc9e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800cca0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d1e5      	bne.n	800cc72 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	3314      	adds	r3, #20
 800ccac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccb0:	e853 3f00 	ldrex	r3, [r3]
 800ccb4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ccb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccb8:	f043 0301 	orr.w	r3, r3, #1
 800ccbc:	657b      	str	r3, [r7, #84]	@ 0x54
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	3314      	adds	r3, #20
 800ccc4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ccc6:	63ba      	str	r2, [r7, #56]	@ 0x38
 800ccc8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccca:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800cccc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ccce:	e841 2300 	strex	r3, r2, [r1]
 800ccd2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ccd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d1e5      	bne.n	800cca6 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	3314      	adds	r3, #20
 800cce0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cce2:	69bb      	ldr	r3, [r7, #24]
 800cce4:	e853 3f00 	ldrex	r3, [r3]
 800cce8:	617b      	str	r3, [r7, #20]
   return(result);
 800ccea:	697b      	ldr	r3, [r7, #20]
 800ccec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ccf0:	653b      	str	r3, [r7, #80]	@ 0x50
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	3314      	adds	r3, #20
 800ccf8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ccfa:	627a      	str	r2, [r7, #36]	@ 0x24
 800ccfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccfe:	6a39      	ldr	r1, [r7, #32]
 800cd00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd02:	e841 2300 	strex	r3, r2, [r1]
 800cd06:	61fb      	str	r3, [r7, #28]
   return(result);
 800cd08:	69fb      	ldr	r3, [r7, #28]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d1e5      	bne.n	800ccda <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800cd0e:	2300      	movs	r3, #0
}
 800cd10:	4618      	mov	r0, r3
 800cd12:	3760      	adds	r7, #96	@ 0x60
 800cd14:	46bd      	mov	sp, r7
 800cd16:	bd80      	pop	{r7, pc}
 800cd18:	0800c9dd 	.word	0x0800c9dd
 800cd1c:	0800cb09 	.word	0x0800cb09
 800cd20:	0800cb45 	.word	0x0800cb45

0800cd24 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800cd24:	b480      	push	{r7}
 800cd26:	b089      	sub	sp, #36	@ 0x24
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	330c      	adds	r3, #12
 800cd32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	e853 3f00 	ldrex	r3, [r3]
 800cd3a:	60bb      	str	r3, [r7, #8]
   return(result);
 800cd3c:	68bb      	ldr	r3, [r7, #8]
 800cd3e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800cd42:	61fb      	str	r3, [r7, #28]
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	330c      	adds	r3, #12
 800cd4a:	69fa      	ldr	r2, [r7, #28]
 800cd4c:	61ba      	str	r2, [r7, #24]
 800cd4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd50:	6979      	ldr	r1, [r7, #20]
 800cd52:	69ba      	ldr	r2, [r7, #24]
 800cd54:	e841 2300 	strex	r3, r2, [r1]
 800cd58:	613b      	str	r3, [r7, #16]
   return(result);
 800cd5a:	693b      	ldr	r3, [r7, #16]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d1e5      	bne.n	800cd2c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2220      	movs	r2, #32
 800cd64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800cd68:	bf00      	nop
 800cd6a:	3724      	adds	r7, #36	@ 0x24
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd72:	4770      	bx	lr

0800cd74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cd74:	b480      	push	{r7}
 800cd76:	b095      	sub	sp, #84	@ 0x54
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	330c      	adds	r3, #12
 800cd82:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd86:	e853 3f00 	ldrex	r3, [r3]
 800cd8a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cd8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cd92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	330c      	adds	r3, #12
 800cd9a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cd9c:	643a      	str	r2, [r7, #64]	@ 0x40
 800cd9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cda0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cda2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cda4:	e841 2300 	strex	r3, r2, [r1]
 800cda8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cdaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d1e5      	bne.n	800cd7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	3314      	adds	r3, #20
 800cdb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdb8:	6a3b      	ldr	r3, [r7, #32]
 800cdba:	e853 3f00 	ldrex	r3, [r3]
 800cdbe:	61fb      	str	r3, [r7, #28]
   return(result);
 800cdc0:	69fb      	ldr	r3, [r7, #28]
 800cdc2:	f023 0301 	bic.w	r3, r3, #1
 800cdc6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	3314      	adds	r3, #20
 800cdce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cdd0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cdd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdd4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cdd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cdd8:	e841 2300 	strex	r3, r2, [r1]
 800cddc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cdde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d1e5      	bne.n	800cdb0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cde8:	2b01      	cmp	r3, #1
 800cdea:	d119      	bne.n	800ce20 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	330c      	adds	r3, #12
 800cdf2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	e853 3f00 	ldrex	r3, [r3]
 800cdfa:	60bb      	str	r3, [r7, #8]
   return(result);
 800cdfc:	68bb      	ldr	r3, [r7, #8]
 800cdfe:	f023 0310 	bic.w	r3, r3, #16
 800ce02:	647b      	str	r3, [r7, #68]	@ 0x44
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	330c      	adds	r3, #12
 800ce0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ce0c:	61ba      	str	r2, [r7, #24]
 800ce0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce10:	6979      	ldr	r1, [r7, #20]
 800ce12:	69ba      	ldr	r2, [r7, #24]
 800ce14:	e841 2300 	strex	r3, r2, [r1]
 800ce18:	613b      	str	r3, [r7, #16]
   return(result);
 800ce1a:	693b      	ldr	r3, [r7, #16]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d1e5      	bne.n	800cdec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2220      	movs	r2, #32
 800ce24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800ce2e:	bf00      	nop
 800ce30:	3754      	adds	r7, #84	@ 0x54
 800ce32:	46bd      	mov	sp, r7
 800ce34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce38:	4770      	bx	lr

0800ce3a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ce3a:	b580      	push	{r7, lr}
 800ce3c:	b084      	sub	sp, #16
 800ce3e:	af00      	add	r7, sp, #0
 800ce40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce46:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ce4e:	68f8      	ldr	r0, [r7, #12]
 800ce50:	f7f9 fae2 	bl	8006418 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ce54:	bf00      	nop
 800ce56:	3710      	adds	r7, #16
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	bd80      	pop	{r7, pc}

0800ce5c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ce5c:	b480      	push	{r7}
 800ce5e:	b085      	sub	sp, #20
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ce6a:	b2db      	uxtb	r3, r3
 800ce6c:	2b21      	cmp	r3, #33	@ 0x21
 800ce6e:	d13e      	bne.n	800ceee <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	689b      	ldr	r3, [r3, #8]
 800ce74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ce78:	d114      	bne.n	800cea4 <UART_Transmit_IT+0x48>
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	691b      	ldr	r3, [r3, #16]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d110      	bne.n	800cea4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	6a1b      	ldr	r3, [r3, #32]
 800ce86:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	881b      	ldrh	r3, [r3, #0]
 800ce8c:	461a      	mov	r2, r3
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ce96:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	6a1b      	ldr	r3, [r3, #32]
 800ce9c:	1c9a      	adds	r2, r3, #2
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	621a      	str	r2, [r3, #32]
 800cea2:	e008      	b.n	800ceb6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	6a1b      	ldr	r3, [r3, #32]
 800cea8:	1c59      	adds	r1, r3, #1
 800ceaa:	687a      	ldr	r2, [r7, #4]
 800ceac:	6211      	str	r1, [r2, #32]
 800ceae:	781a      	ldrb	r2, [r3, #0]
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800ceba:	b29b      	uxth	r3, r3
 800cebc:	3b01      	subs	r3, #1
 800cebe:	b29b      	uxth	r3, r3
 800cec0:	687a      	ldr	r2, [r7, #4]
 800cec2:	4619      	mov	r1, r3
 800cec4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d10f      	bne.n	800ceea <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	68da      	ldr	r2, [r3, #12]
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ced8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	68da      	ldr	r2, [r3, #12]
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cee8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ceea:	2300      	movs	r3, #0
 800ceec:	e000      	b.n	800cef0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ceee:	2302      	movs	r3, #2
  }
}
 800cef0:	4618      	mov	r0, r3
 800cef2:	3714      	adds	r7, #20
 800cef4:	46bd      	mov	sp, r7
 800cef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefa:	4770      	bx	lr

0800cefc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b082      	sub	sp, #8
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	68da      	ldr	r2, [r3, #12]
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cf12:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2220      	movs	r2, #32
 800cf18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cf1c:	6878      	ldr	r0, [r7, #4]
 800cf1e:	f7ff fd3f 	bl	800c9a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800cf22:	2300      	movs	r3, #0
}
 800cf24:	4618      	mov	r0, r3
 800cf26:	3708      	adds	r7, #8
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	bd80      	pop	{r7, pc}

0800cf2c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b08c      	sub	sp, #48	@ 0x30
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800cf34:	2300      	movs	r3, #0
 800cf36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800cf38:	2300      	movs	r3, #0
 800cf3a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cf42:	b2db      	uxtb	r3, r3
 800cf44:	2b22      	cmp	r3, #34	@ 0x22
 800cf46:	f040 80aa 	bne.w	800d09e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	689b      	ldr	r3, [r3, #8]
 800cf4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cf52:	d115      	bne.n	800cf80 <UART_Receive_IT+0x54>
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	691b      	ldr	r3, [r3, #16]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d111      	bne.n	800cf80 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf60:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	685b      	ldr	r3, [r3, #4]
 800cf68:	b29b      	uxth	r3, r3
 800cf6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf6e:	b29a      	uxth	r2, r3
 800cf70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf72:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf78:	1c9a      	adds	r2, r3, #2
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	629a      	str	r2, [r3, #40]	@ 0x28
 800cf7e:	e024      	b.n	800cfca <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf84:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	689b      	ldr	r3, [r3, #8]
 800cf8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cf8e:	d007      	beq.n	800cfa0 <UART_Receive_IT+0x74>
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	689b      	ldr	r3, [r3, #8]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d10a      	bne.n	800cfae <UART_Receive_IT+0x82>
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	691b      	ldr	r3, [r3, #16]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d106      	bne.n	800cfae <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	685b      	ldr	r3, [r3, #4]
 800cfa6:	b2da      	uxtb	r2, r3
 800cfa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfaa:	701a      	strb	r2, [r3, #0]
 800cfac:	e008      	b.n	800cfc0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	685b      	ldr	r3, [r3, #4]
 800cfb4:	b2db      	uxtb	r3, r3
 800cfb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cfba:	b2da      	uxtb	r2, r3
 800cfbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfbe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cfc4:	1c5a      	adds	r2, r3, #1
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800cfce:	b29b      	uxth	r3, r3
 800cfd0:	3b01      	subs	r3, #1
 800cfd2:	b29b      	uxth	r3, r3
 800cfd4:	687a      	ldr	r2, [r7, #4]
 800cfd6:	4619      	mov	r1, r3
 800cfd8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d15d      	bne.n	800d09a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	68da      	ldr	r2, [r3, #12]
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	f022 0220 	bic.w	r2, r2, #32
 800cfec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	68da      	ldr	r2, [r3, #12]
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cffc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	695a      	ldr	r2, [r3, #20]
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	f022 0201 	bic.w	r2, r2, #1
 800d00c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	2220      	movs	r2, #32
 800d012:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	2200      	movs	r2, #0
 800d01a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d020:	2b01      	cmp	r3, #1
 800d022:	d135      	bne.n	800d090 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2200      	movs	r2, #0
 800d028:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	330c      	adds	r3, #12
 800d030:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d032:	697b      	ldr	r3, [r7, #20]
 800d034:	e853 3f00 	ldrex	r3, [r3]
 800d038:	613b      	str	r3, [r7, #16]
   return(result);
 800d03a:	693b      	ldr	r3, [r7, #16]
 800d03c:	f023 0310 	bic.w	r3, r3, #16
 800d040:	627b      	str	r3, [r7, #36]	@ 0x24
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	330c      	adds	r3, #12
 800d048:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d04a:	623a      	str	r2, [r7, #32]
 800d04c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d04e:	69f9      	ldr	r1, [r7, #28]
 800d050:	6a3a      	ldr	r2, [r7, #32]
 800d052:	e841 2300 	strex	r3, r2, [r1]
 800d056:	61bb      	str	r3, [r7, #24]
   return(result);
 800d058:	69bb      	ldr	r3, [r7, #24]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d1e5      	bne.n	800d02a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	f003 0310 	and.w	r3, r3, #16
 800d068:	2b10      	cmp	r3, #16
 800d06a:	d10a      	bne.n	800d082 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d06c:	2300      	movs	r3, #0
 800d06e:	60fb      	str	r3, [r7, #12]
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	60fb      	str	r3, [r7, #12]
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	685b      	ldr	r3, [r3, #4]
 800d07e:	60fb      	str	r3, [r7, #12]
 800d080:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d086:	4619      	mov	r1, r3
 800d088:	6878      	ldr	r0, [r7, #4]
 800d08a:	f7f9 f9a7 	bl	80063dc <HAL_UARTEx_RxEventCallback>
 800d08e:	e002      	b.n	800d096 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d090:	6878      	ldr	r0, [r7, #4]
 800d092:	f7ff fc8f 	bl	800c9b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800d096:	2300      	movs	r3, #0
 800d098:	e002      	b.n	800d0a0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800d09a:	2300      	movs	r3, #0
 800d09c:	e000      	b.n	800d0a0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800d09e:	2302      	movs	r3, #2
  }
}
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	3730      	adds	r7, #48	@ 0x30
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	bd80      	pop	{r7, pc}

0800d0a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d0a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d0ac:	b0c0      	sub	sp, #256	@ 0x100
 800d0ae:	af00      	add	r7, sp, #0
 800d0b0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d0b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	691b      	ldr	r3, [r3, #16]
 800d0bc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800d0c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d0c4:	68d9      	ldr	r1, [r3, #12]
 800d0c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d0ca:	681a      	ldr	r2, [r3, #0]
 800d0cc:	ea40 0301 	orr.w	r3, r0, r1
 800d0d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d0d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d0d6:	689a      	ldr	r2, [r3, #8]
 800d0d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d0dc:	691b      	ldr	r3, [r3, #16]
 800d0de:	431a      	orrs	r2, r3
 800d0e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d0e4:	695b      	ldr	r3, [r3, #20]
 800d0e6:	431a      	orrs	r2, r3
 800d0e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d0ec:	69db      	ldr	r3, [r3, #28]
 800d0ee:	4313      	orrs	r3, r2
 800d0f0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800d0f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	68db      	ldr	r3, [r3, #12]
 800d0fc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800d100:	f021 010c 	bic.w	r1, r1, #12
 800d104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d108:	681a      	ldr	r2, [r3, #0]
 800d10a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d10e:	430b      	orrs	r3, r1
 800d110:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	695b      	ldr	r3, [r3, #20]
 800d11a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800d11e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d122:	6999      	ldr	r1, [r3, #24]
 800d124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d128:	681a      	ldr	r2, [r3, #0]
 800d12a:	ea40 0301 	orr.w	r3, r0, r1
 800d12e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d134:	681a      	ldr	r2, [r3, #0]
 800d136:	4b8f      	ldr	r3, [pc, #572]	@ (800d374 <UART_SetConfig+0x2cc>)
 800d138:	429a      	cmp	r2, r3
 800d13a:	d005      	beq.n	800d148 <UART_SetConfig+0xa0>
 800d13c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d140:	681a      	ldr	r2, [r3, #0]
 800d142:	4b8d      	ldr	r3, [pc, #564]	@ (800d378 <UART_SetConfig+0x2d0>)
 800d144:	429a      	cmp	r2, r3
 800d146:	d104      	bne.n	800d152 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d148:	f7fe fd06 	bl	800bb58 <HAL_RCC_GetPCLK2Freq>
 800d14c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800d150:	e003      	b.n	800d15a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d152:	f7fe fced 	bl	800bb30 <HAL_RCC_GetPCLK1Freq>
 800d156:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d15a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d15e:	69db      	ldr	r3, [r3, #28]
 800d160:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d164:	f040 810c 	bne.w	800d380 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d168:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d16c:	2200      	movs	r2, #0
 800d16e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d172:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800d176:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800d17a:	4622      	mov	r2, r4
 800d17c:	462b      	mov	r3, r5
 800d17e:	1891      	adds	r1, r2, r2
 800d180:	65b9      	str	r1, [r7, #88]	@ 0x58
 800d182:	415b      	adcs	r3, r3
 800d184:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d186:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800d18a:	4621      	mov	r1, r4
 800d18c:	eb12 0801 	adds.w	r8, r2, r1
 800d190:	4629      	mov	r1, r5
 800d192:	eb43 0901 	adc.w	r9, r3, r1
 800d196:	f04f 0200 	mov.w	r2, #0
 800d19a:	f04f 0300 	mov.w	r3, #0
 800d19e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d1a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d1a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d1aa:	4690      	mov	r8, r2
 800d1ac:	4699      	mov	r9, r3
 800d1ae:	4623      	mov	r3, r4
 800d1b0:	eb18 0303 	adds.w	r3, r8, r3
 800d1b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d1b8:	462b      	mov	r3, r5
 800d1ba:	eb49 0303 	adc.w	r3, r9, r3
 800d1be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d1c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d1c6:	685b      	ldr	r3, [r3, #4]
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d1ce:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800d1d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800d1d6:	460b      	mov	r3, r1
 800d1d8:	18db      	adds	r3, r3, r3
 800d1da:	653b      	str	r3, [r7, #80]	@ 0x50
 800d1dc:	4613      	mov	r3, r2
 800d1de:	eb42 0303 	adc.w	r3, r2, r3
 800d1e2:	657b      	str	r3, [r7, #84]	@ 0x54
 800d1e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800d1e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800d1ec:	f7f3 f860 	bl	80002b0 <__aeabi_uldivmod>
 800d1f0:	4602      	mov	r2, r0
 800d1f2:	460b      	mov	r3, r1
 800d1f4:	4b61      	ldr	r3, [pc, #388]	@ (800d37c <UART_SetConfig+0x2d4>)
 800d1f6:	fba3 2302 	umull	r2, r3, r3, r2
 800d1fa:	095b      	lsrs	r3, r3, #5
 800d1fc:	011c      	lsls	r4, r3, #4
 800d1fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d202:	2200      	movs	r2, #0
 800d204:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d208:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800d20c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800d210:	4642      	mov	r2, r8
 800d212:	464b      	mov	r3, r9
 800d214:	1891      	adds	r1, r2, r2
 800d216:	64b9      	str	r1, [r7, #72]	@ 0x48
 800d218:	415b      	adcs	r3, r3
 800d21a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d21c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800d220:	4641      	mov	r1, r8
 800d222:	eb12 0a01 	adds.w	sl, r2, r1
 800d226:	4649      	mov	r1, r9
 800d228:	eb43 0b01 	adc.w	fp, r3, r1
 800d22c:	f04f 0200 	mov.w	r2, #0
 800d230:	f04f 0300 	mov.w	r3, #0
 800d234:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d238:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d23c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d240:	4692      	mov	sl, r2
 800d242:	469b      	mov	fp, r3
 800d244:	4643      	mov	r3, r8
 800d246:	eb1a 0303 	adds.w	r3, sl, r3
 800d24a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d24e:	464b      	mov	r3, r9
 800d250:	eb4b 0303 	adc.w	r3, fp, r3
 800d254:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800d258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d25c:	685b      	ldr	r3, [r3, #4]
 800d25e:	2200      	movs	r2, #0
 800d260:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d264:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800d268:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800d26c:	460b      	mov	r3, r1
 800d26e:	18db      	adds	r3, r3, r3
 800d270:	643b      	str	r3, [r7, #64]	@ 0x40
 800d272:	4613      	mov	r3, r2
 800d274:	eb42 0303 	adc.w	r3, r2, r3
 800d278:	647b      	str	r3, [r7, #68]	@ 0x44
 800d27a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800d27e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800d282:	f7f3 f815 	bl	80002b0 <__aeabi_uldivmod>
 800d286:	4602      	mov	r2, r0
 800d288:	460b      	mov	r3, r1
 800d28a:	4611      	mov	r1, r2
 800d28c:	4b3b      	ldr	r3, [pc, #236]	@ (800d37c <UART_SetConfig+0x2d4>)
 800d28e:	fba3 2301 	umull	r2, r3, r3, r1
 800d292:	095b      	lsrs	r3, r3, #5
 800d294:	2264      	movs	r2, #100	@ 0x64
 800d296:	fb02 f303 	mul.w	r3, r2, r3
 800d29a:	1acb      	subs	r3, r1, r3
 800d29c:	00db      	lsls	r3, r3, #3
 800d29e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800d2a2:	4b36      	ldr	r3, [pc, #216]	@ (800d37c <UART_SetConfig+0x2d4>)
 800d2a4:	fba3 2302 	umull	r2, r3, r3, r2
 800d2a8:	095b      	lsrs	r3, r3, #5
 800d2aa:	005b      	lsls	r3, r3, #1
 800d2ac:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800d2b0:	441c      	add	r4, r3
 800d2b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d2bc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800d2c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800d2c4:	4642      	mov	r2, r8
 800d2c6:	464b      	mov	r3, r9
 800d2c8:	1891      	adds	r1, r2, r2
 800d2ca:	63b9      	str	r1, [r7, #56]	@ 0x38
 800d2cc:	415b      	adcs	r3, r3
 800d2ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d2d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800d2d4:	4641      	mov	r1, r8
 800d2d6:	1851      	adds	r1, r2, r1
 800d2d8:	6339      	str	r1, [r7, #48]	@ 0x30
 800d2da:	4649      	mov	r1, r9
 800d2dc:	414b      	adcs	r3, r1
 800d2de:	637b      	str	r3, [r7, #52]	@ 0x34
 800d2e0:	f04f 0200 	mov.w	r2, #0
 800d2e4:	f04f 0300 	mov.w	r3, #0
 800d2e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800d2ec:	4659      	mov	r1, fp
 800d2ee:	00cb      	lsls	r3, r1, #3
 800d2f0:	4651      	mov	r1, sl
 800d2f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d2f6:	4651      	mov	r1, sl
 800d2f8:	00ca      	lsls	r2, r1, #3
 800d2fa:	4610      	mov	r0, r2
 800d2fc:	4619      	mov	r1, r3
 800d2fe:	4603      	mov	r3, r0
 800d300:	4642      	mov	r2, r8
 800d302:	189b      	adds	r3, r3, r2
 800d304:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d308:	464b      	mov	r3, r9
 800d30a:	460a      	mov	r2, r1
 800d30c:	eb42 0303 	adc.w	r3, r2, r3
 800d310:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d318:	685b      	ldr	r3, [r3, #4]
 800d31a:	2200      	movs	r2, #0
 800d31c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d320:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800d324:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800d328:	460b      	mov	r3, r1
 800d32a:	18db      	adds	r3, r3, r3
 800d32c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d32e:	4613      	mov	r3, r2
 800d330:	eb42 0303 	adc.w	r3, r2, r3
 800d334:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d336:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800d33a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800d33e:	f7f2 ffb7 	bl	80002b0 <__aeabi_uldivmod>
 800d342:	4602      	mov	r2, r0
 800d344:	460b      	mov	r3, r1
 800d346:	4b0d      	ldr	r3, [pc, #52]	@ (800d37c <UART_SetConfig+0x2d4>)
 800d348:	fba3 1302 	umull	r1, r3, r3, r2
 800d34c:	095b      	lsrs	r3, r3, #5
 800d34e:	2164      	movs	r1, #100	@ 0x64
 800d350:	fb01 f303 	mul.w	r3, r1, r3
 800d354:	1ad3      	subs	r3, r2, r3
 800d356:	00db      	lsls	r3, r3, #3
 800d358:	3332      	adds	r3, #50	@ 0x32
 800d35a:	4a08      	ldr	r2, [pc, #32]	@ (800d37c <UART_SetConfig+0x2d4>)
 800d35c:	fba2 2303 	umull	r2, r3, r2, r3
 800d360:	095b      	lsrs	r3, r3, #5
 800d362:	f003 0207 	and.w	r2, r3, #7
 800d366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	4422      	add	r2, r4
 800d36e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d370:	e106      	b.n	800d580 <UART_SetConfig+0x4d8>
 800d372:	bf00      	nop
 800d374:	40011000 	.word	0x40011000
 800d378:	40011400 	.word	0x40011400
 800d37c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d380:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d384:	2200      	movs	r2, #0
 800d386:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d38a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800d38e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800d392:	4642      	mov	r2, r8
 800d394:	464b      	mov	r3, r9
 800d396:	1891      	adds	r1, r2, r2
 800d398:	6239      	str	r1, [r7, #32]
 800d39a:	415b      	adcs	r3, r3
 800d39c:	627b      	str	r3, [r7, #36]	@ 0x24
 800d39e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d3a2:	4641      	mov	r1, r8
 800d3a4:	1854      	adds	r4, r2, r1
 800d3a6:	4649      	mov	r1, r9
 800d3a8:	eb43 0501 	adc.w	r5, r3, r1
 800d3ac:	f04f 0200 	mov.w	r2, #0
 800d3b0:	f04f 0300 	mov.w	r3, #0
 800d3b4:	00eb      	lsls	r3, r5, #3
 800d3b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d3ba:	00e2      	lsls	r2, r4, #3
 800d3bc:	4614      	mov	r4, r2
 800d3be:	461d      	mov	r5, r3
 800d3c0:	4643      	mov	r3, r8
 800d3c2:	18e3      	adds	r3, r4, r3
 800d3c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d3c8:	464b      	mov	r3, r9
 800d3ca:	eb45 0303 	adc.w	r3, r5, r3
 800d3ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d3d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d3d6:	685b      	ldr	r3, [r3, #4]
 800d3d8:	2200      	movs	r2, #0
 800d3da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d3de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800d3e2:	f04f 0200 	mov.w	r2, #0
 800d3e6:	f04f 0300 	mov.w	r3, #0
 800d3ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800d3ee:	4629      	mov	r1, r5
 800d3f0:	008b      	lsls	r3, r1, #2
 800d3f2:	4621      	mov	r1, r4
 800d3f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d3f8:	4621      	mov	r1, r4
 800d3fa:	008a      	lsls	r2, r1, #2
 800d3fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800d400:	f7f2 ff56 	bl	80002b0 <__aeabi_uldivmod>
 800d404:	4602      	mov	r2, r0
 800d406:	460b      	mov	r3, r1
 800d408:	4b60      	ldr	r3, [pc, #384]	@ (800d58c <UART_SetConfig+0x4e4>)
 800d40a:	fba3 2302 	umull	r2, r3, r3, r2
 800d40e:	095b      	lsrs	r3, r3, #5
 800d410:	011c      	lsls	r4, r3, #4
 800d412:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d416:	2200      	movs	r2, #0
 800d418:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d41c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800d420:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800d424:	4642      	mov	r2, r8
 800d426:	464b      	mov	r3, r9
 800d428:	1891      	adds	r1, r2, r2
 800d42a:	61b9      	str	r1, [r7, #24]
 800d42c:	415b      	adcs	r3, r3
 800d42e:	61fb      	str	r3, [r7, #28]
 800d430:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d434:	4641      	mov	r1, r8
 800d436:	1851      	adds	r1, r2, r1
 800d438:	6139      	str	r1, [r7, #16]
 800d43a:	4649      	mov	r1, r9
 800d43c:	414b      	adcs	r3, r1
 800d43e:	617b      	str	r3, [r7, #20]
 800d440:	f04f 0200 	mov.w	r2, #0
 800d444:	f04f 0300 	mov.w	r3, #0
 800d448:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d44c:	4659      	mov	r1, fp
 800d44e:	00cb      	lsls	r3, r1, #3
 800d450:	4651      	mov	r1, sl
 800d452:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d456:	4651      	mov	r1, sl
 800d458:	00ca      	lsls	r2, r1, #3
 800d45a:	4610      	mov	r0, r2
 800d45c:	4619      	mov	r1, r3
 800d45e:	4603      	mov	r3, r0
 800d460:	4642      	mov	r2, r8
 800d462:	189b      	adds	r3, r3, r2
 800d464:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d468:	464b      	mov	r3, r9
 800d46a:	460a      	mov	r2, r1
 800d46c:	eb42 0303 	adc.w	r3, r2, r3
 800d470:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d478:	685b      	ldr	r3, [r3, #4]
 800d47a:	2200      	movs	r2, #0
 800d47c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d47e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800d480:	f04f 0200 	mov.w	r2, #0
 800d484:	f04f 0300 	mov.w	r3, #0
 800d488:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800d48c:	4649      	mov	r1, r9
 800d48e:	008b      	lsls	r3, r1, #2
 800d490:	4641      	mov	r1, r8
 800d492:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d496:	4641      	mov	r1, r8
 800d498:	008a      	lsls	r2, r1, #2
 800d49a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800d49e:	f7f2 ff07 	bl	80002b0 <__aeabi_uldivmod>
 800d4a2:	4602      	mov	r2, r0
 800d4a4:	460b      	mov	r3, r1
 800d4a6:	4611      	mov	r1, r2
 800d4a8:	4b38      	ldr	r3, [pc, #224]	@ (800d58c <UART_SetConfig+0x4e4>)
 800d4aa:	fba3 2301 	umull	r2, r3, r3, r1
 800d4ae:	095b      	lsrs	r3, r3, #5
 800d4b0:	2264      	movs	r2, #100	@ 0x64
 800d4b2:	fb02 f303 	mul.w	r3, r2, r3
 800d4b6:	1acb      	subs	r3, r1, r3
 800d4b8:	011b      	lsls	r3, r3, #4
 800d4ba:	3332      	adds	r3, #50	@ 0x32
 800d4bc:	4a33      	ldr	r2, [pc, #204]	@ (800d58c <UART_SetConfig+0x4e4>)
 800d4be:	fba2 2303 	umull	r2, r3, r2, r3
 800d4c2:	095b      	lsrs	r3, r3, #5
 800d4c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d4c8:	441c      	add	r4, r3
 800d4ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	673b      	str	r3, [r7, #112]	@ 0x70
 800d4d2:	677a      	str	r2, [r7, #116]	@ 0x74
 800d4d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800d4d8:	4642      	mov	r2, r8
 800d4da:	464b      	mov	r3, r9
 800d4dc:	1891      	adds	r1, r2, r2
 800d4de:	60b9      	str	r1, [r7, #8]
 800d4e0:	415b      	adcs	r3, r3
 800d4e2:	60fb      	str	r3, [r7, #12]
 800d4e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d4e8:	4641      	mov	r1, r8
 800d4ea:	1851      	adds	r1, r2, r1
 800d4ec:	6039      	str	r1, [r7, #0]
 800d4ee:	4649      	mov	r1, r9
 800d4f0:	414b      	adcs	r3, r1
 800d4f2:	607b      	str	r3, [r7, #4]
 800d4f4:	f04f 0200 	mov.w	r2, #0
 800d4f8:	f04f 0300 	mov.w	r3, #0
 800d4fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d500:	4659      	mov	r1, fp
 800d502:	00cb      	lsls	r3, r1, #3
 800d504:	4651      	mov	r1, sl
 800d506:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d50a:	4651      	mov	r1, sl
 800d50c:	00ca      	lsls	r2, r1, #3
 800d50e:	4610      	mov	r0, r2
 800d510:	4619      	mov	r1, r3
 800d512:	4603      	mov	r3, r0
 800d514:	4642      	mov	r2, r8
 800d516:	189b      	adds	r3, r3, r2
 800d518:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d51a:	464b      	mov	r3, r9
 800d51c:	460a      	mov	r2, r1
 800d51e:	eb42 0303 	adc.w	r3, r2, r3
 800d522:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d528:	685b      	ldr	r3, [r3, #4]
 800d52a:	2200      	movs	r2, #0
 800d52c:	663b      	str	r3, [r7, #96]	@ 0x60
 800d52e:	667a      	str	r2, [r7, #100]	@ 0x64
 800d530:	f04f 0200 	mov.w	r2, #0
 800d534:	f04f 0300 	mov.w	r3, #0
 800d538:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800d53c:	4649      	mov	r1, r9
 800d53e:	008b      	lsls	r3, r1, #2
 800d540:	4641      	mov	r1, r8
 800d542:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d546:	4641      	mov	r1, r8
 800d548:	008a      	lsls	r2, r1, #2
 800d54a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800d54e:	f7f2 feaf 	bl	80002b0 <__aeabi_uldivmod>
 800d552:	4602      	mov	r2, r0
 800d554:	460b      	mov	r3, r1
 800d556:	4b0d      	ldr	r3, [pc, #52]	@ (800d58c <UART_SetConfig+0x4e4>)
 800d558:	fba3 1302 	umull	r1, r3, r3, r2
 800d55c:	095b      	lsrs	r3, r3, #5
 800d55e:	2164      	movs	r1, #100	@ 0x64
 800d560:	fb01 f303 	mul.w	r3, r1, r3
 800d564:	1ad3      	subs	r3, r2, r3
 800d566:	011b      	lsls	r3, r3, #4
 800d568:	3332      	adds	r3, #50	@ 0x32
 800d56a:	4a08      	ldr	r2, [pc, #32]	@ (800d58c <UART_SetConfig+0x4e4>)
 800d56c:	fba2 2303 	umull	r2, r3, r2, r3
 800d570:	095b      	lsrs	r3, r3, #5
 800d572:	f003 020f 	and.w	r2, r3, #15
 800d576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	4422      	add	r2, r4
 800d57e:	609a      	str	r2, [r3, #8]
}
 800d580:	bf00      	nop
 800d582:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800d586:	46bd      	mov	sp, r7
 800d588:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d58c:	51eb851f 	.word	0x51eb851f

0800d590 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d590:	b084      	sub	sp, #16
 800d592:	b580      	push	{r7, lr}
 800d594:	b084      	sub	sp, #16
 800d596:	af00      	add	r7, sp, #0
 800d598:	6078      	str	r0, [r7, #4]
 800d59a:	f107 001c 	add.w	r0, r7, #28
 800d59e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d5a2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800d5a6:	2b01      	cmp	r3, #1
 800d5a8:	d123      	bne.n	800d5f2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5ae:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	68db      	ldr	r3, [r3, #12]
 800d5ba:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800d5be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d5c2:	687a      	ldr	r2, [r7, #4]
 800d5c4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	68db      	ldr	r3, [r3, #12]
 800d5ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d5d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d5d6:	2b01      	cmp	r3, #1
 800d5d8:	d105      	bne.n	800d5e6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	68db      	ldr	r3, [r3, #12]
 800d5de:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d5e6:	6878      	ldr	r0, [r7, #4]
 800d5e8:	f001 fae8 	bl	800ebbc <USB_CoreReset>
 800d5ec:	4603      	mov	r3, r0
 800d5ee:	73fb      	strb	r3, [r7, #15]
 800d5f0:	e01b      	b.n	800d62a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	68db      	ldr	r3, [r3, #12]
 800d5f6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d5fe:	6878      	ldr	r0, [r7, #4]
 800d600:	f001 fadc 	bl	800ebbc <USB_CoreReset>
 800d604:	4603      	mov	r3, r0
 800d606:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d608:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d106      	bne.n	800d61e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d614:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	639a      	str	r2, [r3, #56]	@ 0x38
 800d61c:	e005      	b.n	800d62a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d622:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d62a:	7fbb      	ldrb	r3, [r7, #30]
 800d62c:	2b01      	cmp	r3, #1
 800d62e:	d10b      	bne.n	800d648 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	689b      	ldr	r3, [r3, #8]
 800d634:	f043 0206 	orr.w	r2, r3, #6
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	689b      	ldr	r3, [r3, #8]
 800d640:	f043 0220 	orr.w	r2, r3, #32
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d648:	7bfb      	ldrb	r3, [r7, #15]
}
 800d64a:	4618      	mov	r0, r3
 800d64c:	3710      	adds	r7, #16
 800d64e:	46bd      	mov	sp, r7
 800d650:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d654:	b004      	add	sp, #16
 800d656:	4770      	bx	lr

0800d658 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800d658:	b480      	push	{r7}
 800d65a:	b087      	sub	sp, #28
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	60f8      	str	r0, [r7, #12]
 800d660:	60b9      	str	r1, [r7, #8]
 800d662:	4613      	mov	r3, r2
 800d664:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800d666:	79fb      	ldrb	r3, [r7, #7]
 800d668:	2b02      	cmp	r3, #2
 800d66a:	d165      	bne.n	800d738 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800d66c:	68bb      	ldr	r3, [r7, #8]
 800d66e:	4a41      	ldr	r2, [pc, #260]	@ (800d774 <USB_SetTurnaroundTime+0x11c>)
 800d670:	4293      	cmp	r3, r2
 800d672:	d906      	bls.n	800d682 <USB_SetTurnaroundTime+0x2a>
 800d674:	68bb      	ldr	r3, [r7, #8]
 800d676:	4a40      	ldr	r2, [pc, #256]	@ (800d778 <USB_SetTurnaroundTime+0x120>)
 800d678:	4293      	cmp	r3, r2
 800d67a:	d202      	bcs.n	800d682 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800d67c:	230f      	movs	r3, #15
 800d67e:	617b      	str	r3, [r7, #20]
 800d680:	e062      	b.n	800d748 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800d682:	68bb      	ldr	r3, [r7, #8]
 800d684:	4a3c      	ldr	r2, [pc, #240]	@ (800d778 <USB_SetTurnaroundTime+0x120>)
 800d686:	4293      	cmp	r3, r2
 800d688:	d306      	bcc.n	800d698 <USB_SetTurnaroundTime+0x40>
 800d68a:	68bb      	ldr	r3, [r7, #8]
 800d68c:	4a3b      	ldr	r2, [pc, #236]	@ (800d77c <USB_SetTurnaroundTime+0x124>)
 800d68e:	4293      	cmp	r3, r2
 800d690:	d202      	bcs.n	800d698 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800d692:	230e      	movs	r3, #14
 800d694:	617b      	str	r3, [r7, #20]
 800d696:	e057      	b.n	800d748 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800d698:	68bb      	ldr	r3, [r7, #8]
 800d69a:	4a38      	ldr	r2, [pc, #224]	@ (800d77c <USB_SetTurnaroundTime+0x124>)
 800d69c:	4293      	cmp	r3, r2
 800d69e:	d306      	bcc.n	800d6ae <USB_SetTurnaroundTime+0x56>
 800d6a0:	68bb      	ldr	r3, [r7, #8]
 800d6a2:	4a37      	ldr	r2, [pc, #220]	@ (800d780 <USB_SetTurnaroundTime+0x128>)
 800d6a4:	4293      	cmp	r3, r2
 800d6a6:	d202      	bcs.n	800d6ae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800d6a8:	230d      	movs	r3, #13
 800d6aa:	617b      	str	r3, [r7, #20]
 800d6ac:	e04c      	b.n	800d748 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800d6ae:	68bb      	ldr	r3, [r7, #8]
 800d6b0:	4a33      	ldr	r2, [pc, #204]	@ (800d780 <USB_SetTurnaroundTime+0x128>)
 800d6b2:	4293      	cmp	r3, r2
 800d6b4:	d306      	bcc.n	800d6c4 <USB_SetTurnaroundTime+0x6c>
 800d6b6:	68bb      	ldr	r3, [r7, #8]
 800d6b8:	4a32      	ldr	r2, [pc, #200]	@ (800d784 <USB_SetTurnaroundTime+0x12c>)
 800d6ba:	4293      	cmp	r3, r2
 800d6bc:	d802      	bhi.n	800d6c4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800d6be:	230c      	movs	r3, #12
 800d6c0:	617b      	str	r3, [r7, #20]
 800d6c2:	e041      	b.n	800d748 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800d6c4:	68bb      	ldr	r3, [r7, #8]
 800d6c6:	4a2f      	ldr	r2, [pc, #188]	@ (800d784 <USB_SetTurnaroundTime+0x12c>)
 800d6c8:	4293      	cmp	r3, r2
 800d6ca:	d906      	bls.n	800d6da <USB_SetTurnaroundTime+0x82>
 800d6cc:	68bb      	ldr	r3, [r7, #8]
 800d6ce:	4a2e      	ldr	r2, [pc, #184]	@ (800d788 <USB_SetTurnaroundTime+0x130>)
 800d6d0:	4293      	cmp	r3, r2
 800d6d2:	d802      	bhi.n	800d6da <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800d6d4:	230b      	movs	r3, #11
 800d6d6:	617b      	str	r3, [r7, #20]
 800d6d8:	e036      	b.n	800d748 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800d6da:	68bb      	ldr	r3, [r7, #8]
 800d6dc:	4a2a      	ldr	r2, [pc, #168]	@ (800d788 <USB_SetTurnaroundTime+0x130>)
 800d6de:	4293      	cmp	r3, r2
 800d6e0:	d906      	bls.n	800d6f0 <USB_SetTurnaroundTime+0x98>
 800d6e2:	68bb      	ldr	r3, [r7, #8]
 800d6e4:	4a29      	ldr	r2, [pc, #164]	@ (800d78c <USB_SetTurnaroundTime+0x134>)
 800d6e6:	4293      	cmp	r3, r2
 800d6e8:	d802      	bhi.n	800d6f0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800d6ea:	230a      	movs	r3, #10
 800d6ec:	617b      	str	r3, [r7, #20]
 800d6ee:	e02b      	b.n	800d748 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800d6f0:	68bb      	ldr	r3, [r7, #8]
 800d6f2:	4a26      	ldr	r2, [pc, #152]	@ (800d78c <USB_SetTurnaroundTime+0x134>)
 800d6f4:	4293      	cmp	r3, r2
 800d6f6:	d906      	bls.n	800d706 <USB_SetTurnaroundTime+0xae>
 800d6f8:	68bb      	ldr	r3, [r7, #8]
 800d6fa:	4a25      	ldr	r2, [pc, #148]	@ (800d790 <USB_SetTurnaroundTime+0x138>)
 800d6fc:	4293      	cmp	r3, r2
 800d6fe:	d202      	bcs.n	800d706 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800d700:	2309      	movs	r3, #9
 800d702:	617b      	str	r3, [r7, #20]
 800d704:	e020      	b.n	800d748 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800d706:	68bb      	ldr	r3, [r7, #8]
 800d708:	4a21      	ldr	r2, [pc, #132]	@ (800d790 <USB_SetTurnaroundTime+0x138>)
 800d70a:	4293      	cmp	r3, r2
 800d70c:	d306      	bcc.n	800d71c <USB_SetTurnaroundTime+0xc4>
 800d70e:	68bb      	ldr	r3, [r7, #8]
 800d710:	4a20      	ldr	r2, [pc, #128]	@ (800d794 <USB_SetTurnaroundTime+0x13c>)
 800d712:	4293      	cmp	r3, r2
 800d714:	d802      	bhi.n	800d71c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800d716:	2308      	movs	r3, #8
 800d718:	617b      	str	r3, [r7, #20]
 800d71a:	e015      	b.n	800d748 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800d71c:	68bb      	ldr	r3, [r7, #8]
 800d71e:	4a1d      	ldr	r2, [pc, #116]	@ (800d794 <USB_SetTurnaroundTime+0x13c>)
 800d720:	4293      	cmp	r3, r2
 800d722:	d906      	bls.n	800d732 <USB_SetTurnaroundTime+0xda>
 800d724:	68bb      	ldr	r3, [r7, #8]
 800d726:	4a1c      	ldr	r2, [pc, #112]	@ (800d798 <USB_SetTurnaroundTime+0x140>)
 800d728:	4293      	cmp	r3, r2
 800d72a:	d202      	bcs.n	800d732 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800d72c:	2307      	movs	r3, #7
 800d72e:	617b      	str	r3, [r7, #20]
 800d730:	e00a      	b.n	800d748 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800d732:	2306      	movs	r3, #6
 800d734:	617b      	str	r3, [r7, #20]
 800d736:	e007      	b.n	800d748 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800d738:	79fb      	ldrb	r3, [r7, #7]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d102      	bne.n	800d744 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800d73e:	2309      	movs	r3, #9
 800d740:	617b      	str	r3, [r7, #20]
 800d742:	e001      	b.n	800d748 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800d744:	2309      	movs	r3, #9
 800d746:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	68db      	ldr	r3, [r3, #12]
 800d74c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	68da      	ldr	r2, [r3, #12]
 800d758:	697b      	ldr	r3, [r7, #20]
 800d75a:	029b      	lsls	r3, r3, #10
 800d75c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800d760:	431a      	orrs	r2, r3
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d766:	2300      	movs	r3, #0
}
 800d768:	4618      	mov	r0, r3
 800d76a:	371c      	adds	r7, #28
 800d76c:	46bd      	mov	sp, r7
 800d76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d772:	4770      	bx	lr
 800d774:	00d8acbf 	.word	0x00d8acbf
 800d778:	00e4e1c0 	.word	0x00e4e1c0
 800d77c:	00f42400 	.word	0x00f42400
 800d780:	01067380 	.word	0x01067380
 800d784:	011a499f 	.word	0x011a499f
 800d788:	01312cff 	.word	0x01312cff
 800d78c:	014ca43f 	.word	0x014ca43f
 800d790:	016e3600 	.word	0x016e3600
 800d794:	01a6ab1f 	.word	0x01a6ab1f
 800d798:	01e84800 	.word	0x01e84800

0800d79c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d79c:	b480      	push	{r7}
 800d79e:	b083      	sub	sp, #12
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	689b      	ldr	r3, [r3, #8]
 800d7a8:	f043 0201 	orr.w	r2, r3, #1
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d7b0:	2300      	movs	r3, #0
}
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	370c      	adds	r7, #12
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7bc:	4770      	bx	lr

0800d7be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d7be:	b480      	push	{r7}
 800d7c0:	b083      	sub	sp, #12
 800d7c2:	af00      	add	r7, sp, #0
 800d7c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	689b      	ldr	r3, [r3, #8]
 800d7ca:	f023 0201 	bic.w	r2, r3, #1
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d7d2:	2300      	movs	r3, #0
}
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	370c      	adds	r7, #12
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7de:	4770      	bx	lr

0800d7e0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b084      	sub	sp, #16
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
 800d7e8:	460b      	mov	r3, r1
 800d7ea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	68db      	ldr	r3, [r3, #12]
 800d7f4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d7fc:	78fb      	ldrb	r3, [r7, #3]
 800d7fe:	2b01      	cmp	r3, #1
 800d800:	d115      	bne.n	800d82e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	68db      	ldr	r3, [r3, #12]
 800d806:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d80e:	200a      	movs	r0, #10
 800d810:	f7f9 ffb4 	bl	800777c <HAL_Delay>
      ms += 10U;
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	330a      	adds	r3, #10
 800d818:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d81a:	6878      	ldr	r0, [r7, #4]
 800d81c:	f001 f93f 	bl	800ea9e <USB_GetMode>
 800d820:	4603      	mov	r3, r0
 800d822:	2b01      	cmp	r3, #1
 800d824:	d01e      	beq.n	800d864 <USB_SetCurrentMode+0x84>
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	2bc7      	cmp	r3, #199	@ 0xc7
 800d82a:	d9f0      	bls.n	800d80e <USB_SetCurrentMode+0x2e>
 800d82c:	e01a      	b.n	800d864 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d82e:	78fb      	ldrb	r3, [r7, #3]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d115      	bne.n	800d860 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	68db      	ldr	r3, [r3, #12]
 800d838:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d840:	200a      	movs	r0, #10
 800d842:	f7f9 ff9b 	bl	800777c <HAL_Delay>
      ms += 10U;
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	330a      	adds	r3, #10
 800d84a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d84c:	6878      	ldr	r0, [r7, #4]
 800d84e:	f001 f926 	bl	800ea9e <USB_GetMode>
 800d852:	4603      	mov	r3, r0
 800d854:	2b00      	cmp	r3, #0
 800d856:	d005      	beq.n	800d864 <USB_SetCurrentMode+0x84>
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	2bc7      	cmp	r3, #199	@ 0xc7
 800d85c:	d9f0      	bls.n	800d840 <USB_SetCurrentMode+0x60>
 800d85e:	e001      	b.n	800d864 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d860:	2301      	movs	r3, #1
 800d862:	e005      	b.n	800d870 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	2bc8      	cmp	r3, #200	@ 0xc8
 800d868:	d101      	bne.n	800d86e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d86a:	2301      	movs	r3, #1
 800d86c:	e000      	b.n	800d870 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d86e:	2300      	movs	r3, #0
}
 800d870:	4618      	mov	r0, r3
 800d872:	3710      	adds	r7, #16
 800d874:	46bd      	mov	sp, r7
 800d876:	bd80      	pop	{r7, pc}

0800d878 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d878:	b084      	sub	sp, #16
 800d87a:	b580      	push	{r7, lr}
 800d87c:	b086      	sub	sp, #24
 800d87e:	af00      	add	r7, sp, #0
 800d880:	6078      	str	r0, [r7, #4]
 800d882:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800d886:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d88a:	2300      	movs	r3, #0
 800d88c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d892:	2300      	movs	r3, #0
 800d894:	613b      	str	r3, [r7, #16]
 800d896:	e009      	b.n	800d8ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d898:	687a      	ldr	r2, [r7, #4]
 800d89a:	693b      	ldr	r3, [r7, #16]
 800d89c:	3340      	adds	r3, #64	@ 0x40
 800d89e:	009b      	lsls	r3, r3, #2
 800d8a0:	4413      	add	r3, r2
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d8a6:	693b      	ldr	r3, [r7, #16]
 800d8a8:	3301      	adds	r3, #1
 800d8aa:	613b      	str	r3, [r7, #16]
 800d8ac:	693b      	ldr	r3, [r7, #16]
 800d8ae:	2b0e      	cmp	r3, #14
 800d8b0:	d9f2      	bls.n	800d898 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d8b2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d11c      	bne.n	800d8f4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d8c0:	685b      	ldr	r3, [r3, #4]
 800d8c2:	68fa      	ldr	r2, [r7, #12]
 800d8c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d8c8:	f043 0302 	orr.w	r3, r3, #2
 800d8cc:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8d2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8de:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8ea:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	639a      	str	r2, [r3, #56]	@ 0x38
 800d8f2:	e00b      	b.n	800d90c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8f8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d904:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d912:	461a      	mov	r2, r3
 800d914:	2300      	movs	r3, #0
 800d916:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d918:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800d91c:	2b01      	cmp	r3, #1
 800d91e:	d10d      	bne.n	800d93c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d920:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d924:	2b00      	cmp	r3, #0
 800d926:	d104      	bne.n	800d932 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d928:	2100      	movs	r1, #0
 800d92a:	6878      	ldr	r0, [r7, #4]
 800d92c:	f000 f968 	bl	800dc00 <USB_SetDevSpeed>
 800d930:	e008      	b.n	800d944 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d932:	2101      	movs	r1, #1
 800d934:	6878      	ldr	r0, [r7, #4]
 800d936:	f000 f963 	bl	800dc00 <USB_SetDevSpeed>
 800d93a:	e003      	b.n	800d944 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d93c:	2103      	movs	r1, #3
 800d93e:	6878      	ldr	r0, [r7, #4]
 800d940:	f000 f95e 	bl	800dc00 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d944:	2110      	movs	r1, #16
 800d946:	6878      	ldr	r0, [r7, #4]
 800d948:	f000 f8fa 	bl	800db40 <USB_FlushTxFifo>
 800d94c:	4603      	mov	r3, r0
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d001      	beq.n	800d956 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800d952:	2301      	movs	r3, #1
 800d954:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d956:	6878      	ldr	r0, [r7, #4]
 800d958:	f000 f924 	bl	800dba4 <USB_FlushRxFifo>
 800d95c:	4603      	mov	r3, r0
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d001      	beq.n	800d966 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800d962:	2301      	movs	r3, #1
 800d964:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d96c:	461a      	mov	r2, r3
 800d96e:	2300      	movs	r3, #0
 800d970:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d978:	461a      	mov	r2, r3
 800d97a:	2300      	movs	r3, #0
 800d97c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d984:	461a      	mov	r2, r3
 800d986:	2300      	movs	r3, #0
 800d988:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d98a:	2300      	movs	r3, #0
 800d98c:	613b      	str	r3, [r7, #16]
 800d98e:	e043      	b.n	800da18 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d990:	693b      	ldr	r3, [r7, #16]
 800d992:	015a      	lsls	r2, r3, #5
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	4413      	add	r3, r2
 800d998:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d9a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d9a6:	d118      	bne.n	800d9da <USB_DevInit+0x162>
    {
      if (i == 0U)
 800d9a8:	693b      	ldr	r3, [r7, #16]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d10a      	bne.n	800d9c4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d9ae:	693b      	ldr	r3, [r7, #16]
 800d9b0:	015a      	lsls	r2, r3, #5
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	4413      	add	r3, r2
 800d9b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d9ba:	461a      	mov	r2, r3
 800d9bc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d9c0:	6013      	str	r3, [r2, #0]
 800d9c2:	e013      	b.n	800d9ec <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d9c4:	693b      	ldr	r3, [r7, #16]
 800d9c6:	015a      	lsls	r2, r3, #5
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	4413      	add	r3, r2
 800d9cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d9d0:	461a      	mov	r2, r3
 800d9d2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d9d6:	6013      	str	r3, [r2, #0]
 800d9d8:	e008      	b.n	800d9ec <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d9da:	693b      	ldr	r3, [r7, #16]
 800d9dc:	015a      	lsls	r2, r3, #5
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	4413      	add	r3, r2
 800d9e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d9e6:	461a      	mov	r2, r3
 800d9e8:	2300      	movs	r3, #0
 800d9ea:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d9ec:	693b      	ldr	r3, [r7, #16]
 800d9ee:	015a      	lsls	r2, r3, #5
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	4413      	add	r3, r2
 800d9f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d9f8:	461a      	mov	r2, r3
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d9fe:	693b      	ldr	r3, [r7, #16]
 800da00:	015a      	lsls	r2, r3, #5
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	4413      	add	r3, r2
 800da06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800da0a:	461a      	mov	r2, r3
 800da0c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800da10:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800da12:	693b      	ldr	r3, [r7, #16]
 800da14:	3301      	adds	r3, #1
 800da16:	613b      	str	r3, [r7, #16]
 800da18:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800da1c:	461a      	mov	r2, r3
 800da1e:	693b      	ldr	r3, [r7, #16]
 800da20:	4293      	cmp	r3, r2
 800da22:	d3b5      	bcc.n	800d990 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800da24:	2300      	movs	r3, #0
 800da26:	613b      	str	r3, [r7, #16]
 800da28:	e043      	b.n	800dab2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800da2a:	693b      	ldr	r3, [r7, #16]
 800da2c:	015a      	lsls	r2, r3, #5
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	4413      	add	r3, r2
 800da32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800da3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800da40:	d118      	bne.n	800da74 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800da42:	693b      	ldr	r3, [r7, #16]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d10a      	bne.n	800da5e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800da48:	693b      	ldr	r3, [r7, #16]
 800da4a:	015a      	lsls	r2, r3, #5
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	4413      	add	r3, r2
 800da50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800da54:	461a      	mov	r2, r3
 800da56:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800da5a:	6013      	str	r3, [r2, #0]
 800da5c:	e013      	b.n	800da86 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800da5e:	693b      	ldr	r3, [r7, #16]
 800da60:	015a      	lsls	r2, r3, #5
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	4413      	add	r3, r2
 800da66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800da6a:	461a      	mov	r2, r3
 800da6c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800da70:	6013      	str	r3, [r2, #0]
 800da72:	e008      	b.n	800da86 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800da74:	693b      	ldr	r3, [r7, #16]
 800da76:	015a      	lsls	r2, r3, #5
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	4413      	add	r3, r2
 800da7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800da80:	461a      	mov	r2, r3
 800da82:	2300      	movs	r3, #0
 800da84:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800da86:	693b      	ldr	r3, [r7, #16]
 800da88:	015a      	lsls	r2, r3, #5
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	4413      	add	r3, r2
 800da8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800da92:	461a      	mov	r2, r3
 800da94:	2300      	movs	r3, #0
 800da96:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800da98:	693b      	ldr	r3, [r7, #16]
 800da9a:	015a      	lsls	r2, r3, #5
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	4413      	add	r3, r2
 800daa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800daa4:	461a      	mov	r2, r3
 800daa6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800daaa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800daac:	693b      	ldr	r3, [r7, #16]
 800daae:	3301      	adds	r3, #1
 800dab0:	613b      	str	r3, [r7, #16]
 800dab2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800dab6:	461a      	mov	r2, r3
 800dab8:	693b      	ldr	r3, [r7, #16]
 800daba:	4293      	cmp	r3, r2
 800dabc:	d3b5      	bcc.n	800da2a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dac4:	691b      	ldr	r3, [r3, #16]
 800dac6:	68fa      	ldr	r2, [r7, #12]
 800dac8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dacc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dad0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	2200      	movs	r2, #0
 800dad6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800dade:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800dae0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d105      	bne.n	800daf4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	699b      	ldr	r3, [r3, #24]
 800daec:	f043 0210 	orr.w	r2, r3, #16
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	699a      	ldr	r2, [r3, #24]
 800daf8:	4b10      	ldr	r3, [pc, #64]	@ (800db3c <USB_DevInit+0x2c4>)
 800dafa:	4313      	orrs	r3, r2
 800dafc:	687a      	ldr	r2, [r7, #4]
 800dafe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800db00:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800db04:	2b00      	cmp	r3, #0
 800db06:	d005      	beq.n	800db14 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	699b      	ldr	r3, [r3, #24]
 800db0c:	f043 0208 	orr.w	r2, r3, #8
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800db14:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800db18:	2b01      	cmp	r3, #1
 800db1a:	d107      	bne.n	800db2c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	699b      	ldr	r3, [r3, #24]
 800db20:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800db24:	f043 0304 	orr.w	r3, r3, #4
 800db28:	687a      	ldr	r2, [r7, #4]
 800db2a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800db2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800db2e:	4618      	mov	r0, r3
 800db30:	3718      	adds	r7, #24
 800db32:	46bd      	mov	sp, r7
 800db34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800db38:	b004      	add	sp, #16
 800db3a:	4770      	bx	lr
 800db3c:	803c3800 	.word	0x803c3800

0800db40 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800db40:	b480      	push	{r7}
 800db42:	b085      	sub	sp, #20
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
 800db48:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800db4a:	2300      	movs	r3, #0
 800db4c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	3301      	adds	r3, #1
 800db52:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800db5a:	d901      	bls.n	800db60 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800db5c:	2303      	movs	r3, #3
 800db5e:	e01b      	b.n	800db98 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	691b      	ldr	r3, [r3, #16]
 800db64:	2b00      	cmp	r3, #0
 800db66:	daf2      	bge.n	800db4e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800db68:	2300      	movs	r3, #0
 800db6a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	019b      	lsls	r3, r3, #6
 800db70:	f043 0220 	orr.w	r2, r3, #32
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	3301      	adds	r3, #1
 800db7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800db84:	d901      	bls.n	800db8a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800db86:	2303      	movs	r3, #3
 800db88:	e006      	b.n	800db98 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	691b      	ldr	r3, [r3, #16]
 800db8e:	f003 0320 	and.w	r3, r3, #32
 800db92:	2b20      	cmp	r3, #32
 800db94:	d0f0      	beq.n	800db78 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800db96:	2300      	movs	r3, #0
}
 800db98:	4618      	mov	r0, r3
 800db9a:	3714      	adds	r7, #20
 800db9c:	46bd      	mov	sp, r7
 800db9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba2:	4770      	bx	lr

0800dba4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800dba4:	b480      	push	{r7}
 800dba6:	b085      	sub	sp, #20
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dbac:	2300      	movs	r3, #0
 800dbae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	3301      	adds	r3, #1
 800dbb4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800dbbc:	d901      	bls.n	800dbc2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800dbbe:	2303      	movs	r3, #3
 800dbc0:	e018      	b.n	800dbf4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	691b      	ldr	r3, [r3, #16]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	daf2      	bge.n	800dbb0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800dbca:	2300      	movs	r3, #0
 800dbcc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	2210      	movs	r2, #16
 800dbd2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	3301      	adds	r3, #1
 800dbd8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800dbe0:	d901      	bls.n	800dbe6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800dbe2:	2303      	movs	r3, #3
 800dbe4:	e006      	b.n	800dbf4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	691b      	ldr	r3, [r3, #16]
 800dbea:	f003 0310 	and.w	r3, r3, #16
 800dbee:	2b10      	cmp	r3, #16
 800dbf0:	d0f0      	beq.n	800dbd4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800dbf2:	2300      	movs	r3, #0
}
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	3714      	adds	r7, #20
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfe:	4770      	bx	lr

0800dc00 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800dc00:	b480      	push	{r7}
 800dc02:	b085      	sub	sp, #20
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
 800dc08:	460b      	mov	r3, r1
 800dc0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc16:	681a      	ldr	r2, [r3, #0]
 800dc18:	78fb      	ldrb	r3, [r7, #3]
 800dc1a:	68f9      	ldr	r1, [r7, #12]
 800dc1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800dc20:	4313      	orrs	r3, r2
 800dc22:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800dc24:	2300      	movs	r3, #0
}
 800dc26:	4618      	mov	r0, r3
 800dc28:	3714      	adds	r7, #20
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc30:	4770      	bx	lr

0800dc32 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800dc32:	b480      	push	{r7}
 800dc34:	b087      	sub	sp, #28
 800dc36:	af00      	add	r7, sp, #0
 800dc38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800dc3e:	693b      	ldr	r3, [r7, #16]
 800dc40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc44:	689b      	ldr	r3, [r3, #8]
 800dc46:	f003 0306 	and.w	r3, r3, #6
 800dc4a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d102      	bne.n	800dc58 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800dc52:	2300      	movs	r3, #0
 800dc54:	75fb      	strb	r3, [r7, #23]
 800dc56:	e00a      	b.n	800dc6e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	2b02      	cmp	r3, #2
 800dc5c:	d002      	beq.n	800dc64 <USB_GetDevSpeed+0x32>
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	2b06      	cmp	r3, #6
 800dc62:	d102      	bne.n	800dc6a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800dc64:	2302      	movs	r3, #2
 800dc66:	75fb      	strb	r3, [r7, #23]
 800dc68:	e001      	b.n	800dc6e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800dc6a:	230f      	movs	r3, #15
 800dc6c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800dc6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc70:	4618      	mov	r0, r3
 800dc72:	371c      	adds	r7, #28
 800dc74:	46bd      	mov	sp, r7
 800dc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7a:	4770      	bx	lr

0800dc7c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800dc7c:	b480      	push	{r7}
 800dc7e:	b085      	sub	sp, #20
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
 800dc84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dc8a:	683b      	ldr	r3, [r7, #0]
 800dc8c:	781b      	ldrb	r3, [r3, #0]
 800dc8e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800dc90:	683b      	ldr	r3, [r7, #0]
 800dc92:	785b      	ldrb	r3, [r3, #1]
 800dc94:	2b01      	cmp	r3, #1
 800dc96:	d13a      	bne.n	800dd0e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc9e:	69da      	ldr	r2, [r3, #28]
 800dca0:	683b      	ldr	r3, [r7, #0]
 800dca2:	781b      	ldrb	r3, [r3, #0]
 800dca4:	f003 030f 	and.w	r3, r3, #15
 800dca8:	2101      	movs	r1, #1
 800dcaa:	fa01 f303 	lsl.w	r3, r1, r3
 800dcae:	b29b      	uxth	r3, r3
 800dcb0:	68f9      	ldr	r1, [r7, #12]
 800dcb2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800dcb6:	4313      	orrs	r3, r2
 800dcb8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800dcba:	68bb      	ldr	r3, [r7, #8]
 800dcbc:	015a      	lsls	r2, r3, #5
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	4413      	add	r3, r2
 800dcc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d155      	bne.n	800dd7c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800dcd0:	68bb      	ldr	r3, [r7, #8]
 800dcd2:	015a      	lsls	r2, r3, #5
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	4413      	add	r3, r2
 800dcd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dcdc:	681a      	ldr	r2, [r3, #0]
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	689b      	ldr	r3, [r3, #8]
 800dce2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800dce6:	683b      	ldr	r3, [r7, #0]
 800dce8:	791b      	ldrb	r3, [r3, #4]
 800dcea:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800dcec:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800dcee:	68bb      	ldr	r3, [r7, #8]
 800dcf0:	059b      	lsls	r3, r3, #22
 800dcf2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800dcf4:	4313      	orrs	r3, r2
 800dcf6:	68ba      	ldr	r2, [r7, #8]
 800dcf8:	0151      	lsls	r1, r2, #5
 800dcfa:	68fa      	ldr	r2, [r7, #12]
 800dcfc:	440a      	add	r2, r1
 800dcfe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dd02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800dd06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dd0a:	6013      	str	r3, [r2, #0]
 800dd0c:	e036      	b.n	800dd7c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dd14:	69da      	ldr	r2, [r3, #28]
 800dd16:	683b      	ldr	r3, [r7, #0]
 800dd18:	781b      	ldrb	r3, [r3, #0]
 800dd1a:	f003 030f 	and.w	r3, r3, #15
 800dd1e:	2101      	movs	r1, #1
 800dd20:	fa01 f303 	lsl.w	r3, r1, r3
 800dd24:	041b      	lsls	r3, r3, #16
 800dd26:	68f9      	ldr	r1, [r7, #12]
 800dd28:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800dd2c:	4313      	orrs	r3, r2
 800dd2e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800dd30:	68bb      	ldr	r3, [r7, #8]
 800dd32:	015a      	lsls	r2, r3, #5
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	4413      	add	r3, r2
 800dd38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d11a      	bne.n	800dd7c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800dd46:	68bb      	ldr	r3, [r7, #8]
 800dd48:	015a      	lsls	r2, r3, #5
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	4413      	add	r3, r2
 800dd4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd52:	681a      	ldr	r2, [r3, #0]
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	689b      	ldr	r3, [r3, #8]
 800dd58:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800dd5c:	683b      	ldr	r3, [r7, #0]
 800dd5e:	791b      	ldrb	r3, [r3, #4]
 800dd60:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800dd62:	430b      	orrs	r3, r1
 800dd64:	4313      	orrs	r3, r2
 800dd66:	68ba      	ldr	r2, [r7, #8]
 800dd68:	0151      	lsls	r1, r2, #5
 800dd6a:	68fa      	ldr	r2, [r7, #12]
 800dd6c:	440a      	add	r2, r1
 800dd6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dd72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800dd76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dd7a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800dd7c:	2300      	movs	r3, #0
}
 800dd7e:	4618      	mov	r0, r3
 800dd80:	3714      	adds	r7, #20
 800dd82:	46bd      	mov	sp, r7
 800dd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd88:	4770      	bx	lr
	...

0800dd8c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800dd8c:	b480      	push	{r7}
 800dd8e:	b085      	sub	sp, #20
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
 800dd94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dd9a:	683b      	ldr	r3, [r7, #0]
 800dd9c:	781b      	ldrb	r3, [r3, #0]
 800dd9e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800dda0:	683b      	ldr	r3, [r7, #0]
 800dda2:	785b      	ldrb	r3, [r3, #1]
 800dda4:	2b01      	cmp	r3, #1
 800dda6:	d161      	bne.n	800de6c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dda8:	68bb      	ldr	r3, [r7, #8]
 800ddaa:	015a      	lsls	r2, r3, #5
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	4413      	add	r3, r2
 800ddb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ddba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ddbe:	d11f      	bne.n	800de00 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	015a      	lsls	r2, r3, #5
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	4413      	add	r3, r2
 800ddc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	68ba      	ldr	r2, [r7, #8]
 800ddd0:	0151      	lsls	r1, r2, #5
 800ddd2:	68fa      	ldr	r2, [r7, #12]
 800ddd4:	440a      	add	r2, r1
 800ddd6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ddda:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ddde:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800dde0:	68bb      	ldr	r3, [r7, #8]
 800dde2:	015a      	lsls	r2, r3, #5
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	4413      	add	r3, r2
 800dde8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	68ba      	ldr	r2, [r7, #8]
 800ddf0:	0151      	lsls	r1, r2, #5
 800ddf2:	68fa      	ldr	r2, [r7, #12]
 800ddf4:	440a      	add	r2, r1
 800ddf6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ddfa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ddfe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800de06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800de08:	683b      	ldr	r3, [r7, #0]
 800de0a:	781b      	ldrb	r3, [r3, #0]
 800de0c:	f003 030f 	and.w	r3, r3, #15
 800de10:	2101      	movs	r1, #1
 800de12:	fa01 f303 	lsl.w	r3, r1, r3
 800de16:	b29b      	uxth	r3, r3
 800de18:	43db      	mvns	r3, r3
 800de1a:	68f9      	ldr	r1, [r7, #12]
 800de1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800de20:	4013      	ands	r3, r2
 800de22:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800de2a:	69da      	ldr	r2, [r3, #28]
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	781b      	ldrb	r3, [r3, #0]
 800de30:	f003 030f 	and.w	r3, r3, #15
 800de34:	2101      	movs	r1, #1
 800de36:	fa01 f303 	lsl.w	r3, r1, r3
 800de3a:	b29b      	uxth	r3, r3
 800de3c:	43db      	mvns	r3, r3
 800de3e:	68f9      	ldr	r1, [r7, #12]
 800de40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800de44:	4013      	ands	r3, r2
 800de46:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800de48:	68bb      	ldr	r3, [r7, #8]
 800de4a:	015a      	lsls	r2, r3, #5
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	4413      	add	r3, r2
 800de50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800de54:	681a      	ldr	r2, [r3, #0]
 800de56:	68bb      	ldr	r3, [r7, #8]
 800de58:	0159      	lsls	r1, r3, #5
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	440b      	add	r3, r1
 800de5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800de62:	4619      	mov	r1, r3
 800de64:	4b35      	ldr	r3, [pc, #212]	@ (800df3c <USB_DeactivateEndpoint+0x1b0>)
 800de66:	4013      	ands	r3, r2
 800de68:	600b      	str	r3, [r1, #0]
 800de6a:	e060      	b.n	800df2e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800de6c:	68bb      	ldr	r3, [r7, #8]
 800de6e:	015a      	lsls	r2, r3, #5
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	4413      	add	r3, r2
 800de74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800de7e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800de82:	d11f      	bne.n	800dec4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800de84:	68bb      	ldr	r3, [r7, #8]
 800de86:	015a      	lsls	r2, r3, #5
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	4413      	add	r3, r2
 800de8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	68ba      	ldr	r2, [r7, #8]
 800de94:	0151      	lsls	r1, r2, #5
 800de96:	68fa      	ldr	r2, [r7, #12]
 800de98:	440a      	add	r2, r1
 800de9a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800de9e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800dea2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800dea4:	68bb      	ldr	r3, [r7, #8]
 800dea6:	015a      	lsls	r2, r3, #5
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	4413      	add	r3, r2
 800deac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	68ba      	ldr	r2, [r7, #8]
 800deb4:	0151      	lsls	r1, r2, #5
 800deb6:	68fa      	ldr	r2, [r7, #12]
 800deb8:	440a      	add	r2, r1
 800deba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800debe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800dec2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800deca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800decc:	683b      	ldr	r3, [r7, #0]
 800dece:	781b      	ldrb	r3, [r3, #0]
 800ded0:	f003 030f 	and.w	r3, r3, #15
 800ded4:	2101      	movs	r1, #1
 800ded6:	fa01 f303 	lsl.w	r3, r1, r3
 800deda:	041b      	lsls	r3, r3, #16
 800dedc:	43db      	mvns	r3, r3
 800dede:	68f9      	ldr	r1, [r7, #12]
 800dee0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800dee4:	4013      	ands	r3, r2
 800dee6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800deee:	69da      	ldr	r2, [r3, #28]
 800def0:	683b      	ldr	r3, [r7, #0]
 800def2:	781b      	ldrb	r3, [r3, #0]
 800def4:	f003 030f 	and.w	r3, r3, #15
 800def8:	2101      	movs	r1, #1
 800defa:	fa01 f303 	lsl.w	r3, r1, r3
 800defe:	041b      	lsls	r3, r3, #16
 800df00:	43db      	mvns	r3, r3
 800df02:	68f9      	ldr	r1, [r7, #12]
 800df04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800df08:	4013      	ands	r3, r2
 800df0a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800df0c:	68bb      	ldr	r3, [r7, #8]
 800df0e:	015a      	lsls	r2, r3, #5
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	4413      	add	r3, r2
 800df14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800df18:	681a      	ldr	r2, [r3, #0]
 800df1a:	68bb      	ldr	r3, [r7, #8]
 800df1c:	0159      	lsls	r1, r3, #5
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	440b      	add	r3, r1
 800df22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800df26:	4619      	mov	r1, r3
 800df28:	4b05      	ldr	r3, [pc, #20]	@ (800df40 <USB_DeactivateEndpoint+0x1b4>)
 800df2a:	4013      	ands	r3, r2
 800df2c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800df2e:	2300      	movs	r3, #0
}
 800df30:	4618      	mov	r0, r3
 800df32:	3714      	adds	r7, #20
 800df34:	46bd      	mov	sp, r7
 800df36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3a:	4770      	bx	lr
 800df3c:	ec337800 	.word	0xec337800
 800df40:	eff37800 	.word	0xeff37800

0800df44 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b08a      	sub	sp, #40	@ 0x28
 800df48:	af02      	add	r7, sp, #8
 800df4a:	60f8      	str	r0, [r7, #12]
 800df4c:	60b9      	str	r1, [r7, #8]
 800df4e:	4613      	mov	r3, r2
 800df50:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800df56:	68bb      	ldr	r3, [r7, #8]
 800df58:	781b      	ldrb	r3, [r3, #0]
 800df5a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800df5c:	68bb      	ldr	r3, [r7, #8]
 800df5e:	785b      	ldrb	r3, [r3, #1]
 800df60:	2b01      	cmp	r3, #1
 800df62:	f040 817f 	bne.w	800e264 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800df66:	68bb      	ldr	r3, [r7, #8]
 800df68:	691b      	ldr	r3, [r3, #16]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d132      	bne.n	800dfd4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800df6e:	69bb      	ldr	r3, [r7, #24]
 800df70:	015a      	lsls	r2, r3, #5
 800df72:	69fb      	ldr	r3, [r7, #28]
 800df74:	4413      	add	r3, r2
 800df76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800df7a:	691b      	ldr	r3, [r3, #16]
 800df7c:	69ba      	ldr	r2, [r7, #24]
 800df7e:	0151      	lsls	r1, r2, #5
 800df80:	69fa      	ldr	r2, [r7, #28]
 800df82:	440a      	add	r2, r1
 800df84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800df88:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800df8c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800df90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800df92:	69bb      	ldr	r3, [r7, #24]
 800df94:	015a      	lsls	r2, r3, #5
 800df96:	69fb      	ldr	r3, [r7, #28]
 800df98:	4413      	add	r3, r2
 800df9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800df9e:	691b      	ldr	r3, [r3, #16]
 800dfa0:	69ba      	ldr	r2, [r7, #24]
 800dfa2:	0151      	lsls	r1, r2, #5
 800dfa4:	69fa      	ldr	r2, [r7, #28]
 800dfa6:	440a      	add	r2, r1
 800dfa8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dfac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800dfb0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dfb2:	69bb      	ldr	r3, [r7, #24]
 800dfb4:	015a      	lsls	r2, r3, #5
 800dfb6:	69fb      	ldr	r3, [r7, #28]
 800dfb8:	4413      	add	r3, r2
 800dfba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dfbe:	691b      	ldr	r3, [r3, #16]
 800dfc0:	69ba      	ldr	r2, [r7, #24]
 800dfc2:	0151      	lsls	r1, r2, #5
 800dfc4:	69fa      	ldr	r2, [r7, #28]
 800dfc6:	440a      	add	r2, r1
 800dfc8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dfcc:	0cdb      	lsrs	r3, r3, #19
 800dfce:	04db      	lsls	r3, r3, #19
 800dfd0:	6113      	str	r3, [r2, #16]
 800dfd2:	e097      	b.n	800e104 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dfd4:	69bb      	ldr	r3, [r7, #24]
 800dfd6:	015a      	lsls	r2, r3, #5
 800dfd8:	69fb      	ldr	r3, [r7, #28]
 800dfda:	4413      	add	r3, r2
 800dfdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dfe0:	691b      	ldr	r3, [r3, #16]
 800dfe2:	69ba      	ldr	r2, [r7, #24]
 800dfe4:	0151      	lsls	r1, r2, #5
 800dfe6:	69fa      	ldr	r2, [r7, #28]
 800dfe8:	440a      	add	r2, r1
 800dfea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dfee:	0cdb      	lsrs	r3, r3, #19
 800dff0:	04db      	lsls	r3, r3, #19
 800dff2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dff4:	69bb      	ldr	r3, [r7, #24]
 800dff6:	015a      	lsls	r2, r3, #5
 800dff8:	69fb      	ldr	r3, [r7, #28]
 800dffa:	4413      	add	r3, r2
 800dffc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e000:	691b      	ldr	r3, [r3, #16]
 800e002:	69ba      	ldr	r2, [r7, #24]
 800e004:	0151      	lsls	r1, r2, #5
 800e006:	69fa      	ldr	r2, [r7, #28]
 800e008:	440a      	add	r2, r1
 800e00a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e00e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800e012:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800e016:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800e018:	69bb      	ldr	r3, [r7, #24]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d11a      	bne.n	800e054 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800e01e:	68bb      	ldr	r3, [r7, #8]
 800e020:	691a      	ldr	r2, [r3, #16]
 800e022:	68bb      	ldr	r3, [r7, #8]
 800e024:	689b      	ldr	r3, [r3, #8]
 800e026:	429a      	cmp	r2, r3
 800e028:	d903      	bls.n	800e032 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800e02a:	68bb      	ldr	r3, [r7, #8]
 800e02c:	689a      	ldr	r2, [r3, #8]
 800e02e:	68bb      	ldr	r3, [r7, #8]
 800e030:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e032:	69bb      	ldr	r3, [r7, #24]
 800e034:	015a      	lsls	r2, r3, #5
 800e036:	69fb      	ldr	r3, [r7, #28]
 800e038:	4413      	add	r3, r2
 800e03a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e03e:	691b      	ldr	r3, [r3, #16]
 800e040:	69ba      	ldr	r2, [r7, #24]
 800e042:	0151      	lsls	r1, r2, #5
 800e044:	69fa      	ldr	r2, [r7, #28]
 800e046:	440a      	add	r2, r1
 800e048:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e04c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e050:	6113      	str	r3, [r2, #16]
 800e052:	e044      	b.n	800e0de <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e054:	68bb      	ldr	r3, [r7, #8]
 800e056:	691a      	ldr	r2, [r3, #16]
 800e058:	68bb      	ldr	r3, [r7, #8]
 800e05a:	689b      	ldr	r3, [r3, #8]
 800e05c:	4413      	add	r3, r2
 800e05e:	1e5a      	subs	r2, r3, #1
 800e060:	68bb      	ldr	r3, [r7, #8]
 800e062:	689b      	ldr	r3, [r3, #8]
 800e064:	fbb2 f3f3 	udiv	r3, r2, r3
 800e068:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800e06a:	69bb      	ldr	r3, [r7, #24]
 800e06c:	015a      	lsls	r2, r3, #5
 800e06e:	69fb      	ldr	r3, [r7, #28]
 800e070:	4413      	add	r3, r2
 800e072:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e076:	691a      	ldr	r2, [r3, #16]
 800e078:	8afb      	ldrh	r3, [r7, #22]
 800e07a:	04d9      	lsls	r1, r3, #19
 800e07c:	4ba4      	ldr	r3, [pc, #656]	@ (800e310 <USB_EPStartXfer+0x3cc>)
 800e07e:	400b      	ands	r3, r1
 800e080:	69b9      	ldr	r1, [r7, #24]
 800e082:	0148      	lsls	r0, r1, #5
 800e084:	69f9      	ldr	r1, [r7, #28]
 800e086:	4401      	add	r1, r0
 800e088:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e08c:	4313      	orrs	r3, r2
 800e08e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800e090:	68bb      	ldr	r3, [r7, #8]
 800e092:	791b      	ldrb	r3, [r3, #4]
 800e094:	2b01      	cmp	r3, #1
 800e096:	d122      	bne.n	800e0de <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e098:	69bb      	ldr	r3, [r7, #24]
 800e09a:	015a      	lsls	r2, r3, #5
 800e09c:	69fb      	ldr	r3, [r7, #28]
 800e09e:	4413      	add	r3, r2
 800e0a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e0a4:	691b      	ldr	r3, [r3, #16]
 800e0a6:	69ba      	ldr	r2, [r7, #24]
 800e0a8:	0151      	lsls	r1, r2, #5
 800e0aa:	69fa      	ldr	r2, [r7, #28]
 800e0ac:	440a      	add	r2, r1
 800e0ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e0b2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800e0b6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800e0b8:	69bb      	ldr	r3, [r7, #24]
 800e0ba:	015a      	lsls	r2, r3, #5
 800e0bc:	69fb      	ldr	r3, [r7, #28]
 800e0be:	4413      	add	r3, r2
 800e0c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e0c4:	691a      	ldr	r2, [r3, #16]
 800e0c6:	8afb      	ldrh	r3, [r7, #22]
 800e0c8:	075b      	lsls	r3, r3, #29
 800e0ca:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800e0ce:	69b9      	ldr	r1, [r7, #24]
 800e0d0:	0148      	lsls	r0, r1, #5
 800e0d2:	69f9      	ldr	r1, [r7, #28]
 800e0d4:	4401      	add	r1, r0
 800e0d6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e0da:	4313      	orrs	r3, r2
 800e0dc:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e0de:	69bb      	ldr	r3, [r7, #24]
 800e0e0:	015a      	lsls	r2, r3, #5
 800e0e2:	69fb      	ldr	r3, [r7, #28]
 800e0e4:	4413      	add	r3, r2
 800e0e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e0ea:	691a      	ldr	r2, [r3, #16]
 800e0ec:	68bb      	ldr	r3, [r7, #8]
 800e0ee:	691b      	ldr	r3, [r3, #16]
 800e0f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e0f4:	69b9      	ldr	r1, [r7, #24]
 800e0f6:	0148      	lsls	r0, r1, #5
 800e0f8:	69f9      	ldr	r1, [r7, #28]
 800e0fa:	4401      	add	r1, r0
 800e0fc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e100:	4313      	orrs	r3, r2
 800e102:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e104:	79fb      	ldrb	r3, [r7, #7]
 800e106:	2b01      	cmp	r3, #1
 800e108:	d14b      	bne.n	800e1a2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e10a:	68bb      	ldr	r3, [r7, #8]
 800e10c:	69db      	ldr	r3, [r3, #28]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d009      	beq.n	800e126 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e112:	69bb      	ldr	r3, [r7, #24]
 800e114:	015a      	lsls	r2, r3, #5
 800e116:	69fb      	ldr	r3, [r7, #28]
 800e118:	4413      	add	r3, r2
 800e11a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e11e:	461a      	mov	r2, r3
 800e120:	68bb      	ldr	r3, [r7, #8]
 800e122:	69db      	ldr	r3, [r3, #28]
 800e124:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e126:	68bb      	ldr	r3, [r7, #8]
 800e128:	791b      	ldrb	r3, [r3, #4]
 800e12a:	2b01      	cmp	r3, #1
 800e12c:	d128      	bne.n	800e180 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e12e:	69fb      	ldr	r3, [r7, #28]
 800e130:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e134:	689b      	ldr	r3, [r3, #8]
 800e136:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d110      	bne.n	800e160 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e13e:	69bb      	ldr	r3, [r7, #24]
 800e140:	015a      	lsls	r2, r3, #5
 800e142:	69fb      	ldr	r3, [r7, #28]
 800e144:	4413      	add	r3, r2
 800e146:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	69ba      	ldr	r2, [r7, #24]
 800e14e:	0151      	lsls	r1, r2, #5
 800e150:	69fa      	ldr	r2, [r7, #28]
 800e152:	440a      	add	r2, r1
 800e154:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e158:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e15c:	6013      	str	r3, [r2, #0]
 800e15e:	e00f      	b.n	800e180 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e160:	69bb      	ldr	r3, [r7, #24]
 800e162:	015a      	lsls	r2, r3, #5
 800e164:	69fb      	ldr	r3, [r7, #28]
 800e166:	4413      	add	r3, r2
 800e168:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	69ba      	ldr	r2, [r7, #24]
 800e170:	0151      	lsls	r1, r2, #5
 800e172:	69fa      	ldr	r2, [r7, #28]
 800e174:	440a      	add	r2, r1
 800e176:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e17a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e17e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e180:	69bb      	ldr	r3, [r7, #24]
 800e182:	015a      	lsls	r2, r3, #5
 800e184:	69fb      	ldr	r3, [r7, #28]
 800e186:	4413      	add	r3, r2
 800e188:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	69ba      	ldr	r2, [r7, #24]
 800e190:	0151      	lsls	r1, r2, #5
 800e192:	69fa      	ldr	r2, [r7, #28]
 800e194:	440a      	add	r2, r1
 800e196:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e19a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e19e:	6013      	str	r3, [r2, #0]
 800e1a0:	e166      	b.n	800e470 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e1a2:	69bb      	ldr	r3, [r7, #24]
 800e1a4:	015a      	lsls	r2, r3, #5
 800e1a6:	69fb      	ldr	r3, [r7, #28]
 800e1a8:	4413      	add	r3, r2
 800e1aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	69ba      	ldr	r2, [r7, #24]
 800e1b2:	0151      	lsls	r1, r2, #5
 800e1b4:	69fa      	ldr	r2, [r7, #28]
 800e1b6:	440a      	add	r2, r1
 800e1b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e1bc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e1c0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e1c2:	68bb      	ldr	r3, [r7, #8]
 800e1c4:	791b      	ldrb	r3, [r3, #4]
 800e1c6:	2b01      	cmp	r3, #1
 800e1c8:	d015      	beq.n	800e1f6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800e1ca:	68bb      	ldr	r3, [r7, #8]
 800e1cc:	691b      	ldr	r3, [r3, #16]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	f000 814e 	beq.w	800e470 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e1d4:	69fb      	ldr	r3, [r7, #28]
 800e1d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e1da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e1dc:	68bb      	ldr	r3, [r7, #8]
 800e1de:	781b      	ldrb	r3, [r3, #0]
 800e1e0:	f003 030f 	and.w	r3, r3, #15
 800e1e4:	2101      	movs	r1, #1
 800e1e6:	fa01 f303 	lsl.w	r3, r1, r3
 800e1ea:	69f9      	ldr	r1, [r7, #28]
 800e1ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e1f0:	4313      	orrs	r3, r2
 800e1f2:	634b      	str	r3, [r1, #52]	@ 0x34
 800e1f4:	e13c      	b.n	800e470 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e1f6:	69fb      	ldr	r3, [r7, #28]
 800e1f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e1fc:	689b      	ldr	r3, [r3, #8]
 800e1fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e202:	2b00      	cmp	r3, #0
 800e204:	d110      	bne.n	800e228 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e206:	69bb      	ldr	r3, [r7, #24]
 800e208:	015a      	lsls	r2, r3, #5
 800e20a:	69fb      	ldr	r3, [r7, #28]
 800e20c:	4413      	add	r3, r2
 800e20e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	69ba      	ldr	r2, [r7, #24]
 800e216:	0151      	lsls	r1, r2, #5
 800e218:	69fa      	ldr	r2, [r7, #28]
 800e21a:	440a      	add	r2, r1
 800e21c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e220:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e224:	6013      	str	r3, [r2, #0]
 800e226:	e00f      	b.n	800e248 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e228:	69bb      	ldr	r3, [r7, #24]
 800e22a:	015a      	lsls	r2, r3, #5
 800e22c:	69fb      	ldr	r3, [r7, #28]
 800e22e:	4413      	add	r3, r2
 800e230:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	69ba      	ldr	r2, [r7, #24]
 800e238:	0151      	lsls	r1, r2, #5
 800e23a:	69fa      	ldr	r2, [r7, #28]
 800e23c:	440a      	add	r2, r1
 800e23e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e242:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e246:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800e248:	68bb      	ldr	r3, [r7, #8]
 800e24a:	68d9      	ldr	r1, [r3, #12]
 800e24c:	68bb      	ldr	r3, [r7, #8]
 800e24e:	781a      	ldrb	r2, [r3, #0]
 800e250:	68bb      	ldr	r3, [r7, #8]
 800e252:	691b      	ldr	r3, [r3, #16]
 800e254:	b298      	uxth	r0, r3
 800e256:	79fb      	ldrb	r3, [r7, #7]
 800e258:	9300      	str	r3, [sp, #0]
 800e25a:	4603      	mov	r3, r0
 800e25c:	68f8      	ldr	r0, [r7, #12]
 800e25e:	f000 f9b9 	bl	800e5d4 <USB_WritePacket>
 800e262:	e105      	b.n	800e470 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e264:	69bb      	ldr	r3, [r7, #24]
 800e266:	015a      	lsls	r2, r3, #5
 800e268:	69fb      	ldr	r3, [r7, #28]
 800e26a:	4413      	add	r3, r2
 800e26c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e270:	691b      	ldr	r3, [r3, #16]
 800e272:	69ba      	ldr	r2, [r7, #24]
 800e274:	0151      	lsls	r1, r2, #5
 800e276:	69fa      	ldr	r2, [r7, #28]
 800e278:	440a      	add	r2, r1
 800e27a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e27e:	0cdb      	lsrs	r3, r3, #19
 800e280:	04db      	lsls	r3, r3, #19
 800e282:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e284:	69bb      	ldr	r3, [r7, #24]
 800e286:	015a      	lsls	r2, r3, #5
 800e288:	69fb      	ldr	r3, [r7, #28]
 800e28a:	4413      	add	r3, r2
 800e28c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e290:	691b      	ldr	r3, [r3, #16]
 800e292:	69ba      	ldr	r2, [r7, #24]
 800e294:	0151      	lsls	r1, r2, #5
 800e296:	69fa      	ldr	r2, [r7, #28]
 800e298:	440a      	add	r2, r1
 800e29a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e29e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800e2a2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800e2a6:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800e2a8:	69bb      	ldr	r3, [r7, #24]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d132      	bne.n	800e314 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800e2ae:	68bb      	ldr	r3, [r7, #8]
 800e2b0:	691b      	ldr	r3, [r3, #16]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d003      	beq.n	800e2be <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800e2b6:	68bb      	ldr	r3, [r7, #8]
 800e2b8:	689a      	ldr	r2, [r3, #8]
 800e2ba:	68bb      	ldr	r3, [r7, #8]
 800e2bc:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800e2be:	68bb      	ldr	r3, [r7, #8]
 800e2c0:	689a      	ldr	r2, [r3, #8]
 800e2c2:	68bb      	ldr	r3, [r7, #8]
 800e2c4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800e2c6:	69bb      	ldr	r3, [r7, #24]
 800e2c8:	015a      	lsls	r2, r3, #5
 800e2ca:	69fb      	ldr	r3, [r7, #28]
 800e2cc:	4413      	add	r3, r2
 800e2ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e2d2:	691a      	ldr	r2, [r3, #16]
 800e2d4:	68bb      	ldr	r3, [r7, #8]
 800e2d6:	6a1b      	ldr	r3, [r3, #32]
 800e2d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e2dc:	69b9      	ldr	r1, [r7, #24]
 800e2de:	0148      	lsls	r0, r1, #5
 800e2e0:	69f9      	ldr	r1, [r7, #28]
 800e2e2:	4401      	add	r1, r0
 800e2e4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e2e8:	4313      	orrs	r3, r2
 800e2ea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e2ec:	69bb      	ldr	r3, [r7, #24]
 800e2ee:	015a      	lsls	r2, r3, #5
 800e2f0:	69fb      	ldr	r3, [r7, #28]
 800e2f2:	4413      	add	r3, r2
 800e2f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e2f8:	691b      	ldr	r3, [r3, #16]
 800e2fa:	69ba      	ldr	r2, [r7, #24]
 800e2fc:	0151      	lsls	r1, r2, #5
 800e2fe:	69fa      	ldr	r2, [r7, #28]
 800e300:	440a      	add	r2, r1
 800e302:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e306:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e30a:	6113      	str	r3, [r2, #16]
 800e30c:	e062      	b.n	800e3d4 <USB_EPStartXfer+0x490>
 800e30e:	bf00      	nop
 800e310:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800e314:	68bb      	ldr	r3, [r7, #8]
 800e316:	691b      	ldr	r3, [r3, #16]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d123      	bne.n	800e364 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e31c:	69bb      	ldr	r3, [r7, #24]
 800e31e:	015a      	lsls	r2, r3, #5
 800e320:	69fb      	ldr	r3, [r7, #28]
 800e322:	4413      	add	r3, r2
 800e324:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e328:	691a      	ldr	r2, [r3, #16]
 800e32a:	68bb      	ldr	r3, [r7, #8]
 800e32c:	689b      	ldr	r3, [r3, #8]
 800e32e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e332:	69b9      	ldr	r1, [r7, #24]
 800e334:	0148      	lsls	r0, r1, #5
 800e336:	69f9      	ldr	r1, [r7, #28]
 800e338:	4401      	add	r1, r0
 800e33a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e33e:	4313      	orrs	r3, r2
 800e340:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e342:	69bb      	ldr	r3, [r7, #24]
 800e344:	015a      	lsls	r2, r3, #5
 800e346:	69fb      	ldr	r3, [r7, #28]
 800e348:	4413      	add	r3, r2
 800e34a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e34e:	691b      	ldr	r3, [r3, #16]
 800e350:	69ba      	ldr	r2, [r7, #24]
 800e352:	0151      	lsls	r1, r2, #5
 800e354:	69fa      	ldr	r2, [r7, #28]
 800e356:	440a      	add	r2, r1
 800e358:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e35c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e360:	6113      	str	r3, [r2, #16]
 800e362:	e037      	b.n	800e3d4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e364:	68bb      	ldr	r3, [r7, #8]
 800e366:	691a      	ldr	r2, [r3, #16]
 800e368:	68bb      	ldr	r3, [r7, #8]
 800e36a:	689b      	ldr	r3, [r3, #8]
 800e36c:	4413      	add	r3, r2
 800e36e:	1e5a      	subs	r2, r3, #1
 800e370:	68bb      	ldr	r3, [r7, #8]
 800e372:	689b      	ldr	r3, [r3, #8]
 800e374:	fbb2 f3f3 	udiv	r3, r2, r3
 800e378:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800e37a:	68bb      	ldr	r3, [r7, #8]
 800e37c:	689b      	ldr	r3, [r3, #8]
 800e37e:	8afa      	ldrh	r2, [r7, #22]
 800e380:	fb03 f202 	mul.w	r2, r3, r2
 800e384:	68bb      	ldr	r3, [r7, #8]
 800e386:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e388:	69bb      	ldr	r3, [r7, #24]
 800e38a:	015a      	lsls	r2, r3, #5
 800e38c:	69fb      	ldr	r3, [r7, #28]
 800e38e:	4413      	add	r3, r2
 800e390:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e394:	691a      	ldr	r2, [r3, #16]
 800e396:	8afb      	ldrh	r3, [r7, #22]
 800e398:	04d9      	lsls	r1, r3, #19
 800e39a:	4b38      	ldr	r3, [pc, #224]	@ (800e47c <USB_EPStartXfer+0x538>)
 800e39c:	400b      	ands	r3, r1
 800e39e:	69b9      	ldr	r1, [r7, #24]
 800e3a0:	0148      	lsls	r0, r1, #5
 800e3a2:	69f9      	ldr	r1, [r7, #28]
 800e3a4:	4401      	add	r1, r0
 800e3a6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e3aa:	4313      	orrs	r3, r2
 800e3ac:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800e3ae:	69bb      	ldr	r3, [r7, #24]
 800e3b0:	015a      	lsls	r2, r3, #5
 800e3b2:	69fb      	ldr	r3, [r7, #28]
 800e3b4:	4413      	add	r3, r2
 800e3b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e3ba:	691a      	ldr	r2, [r3, #16]
 800e3bc:	68bb      	ldr	r3, [r7, #8]
 800e3be:	6a1b      	ldr	r3, [r3, #32]
 800e3c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e3c4:	69b9      	ldr	r1, [r7, #24]
 800e3c6:	0148      	lsls	r0, r1, #5
 800e3c8:	69f9      	ldr	r1, [r7, #28]
 800e3ca:	4401      	add	r1, r0
 800e3cc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e3d0:	4313      	orrs	r3, r2
 800e3d2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800e3d4:	79fb      	ldrb	r3, [r7, #7]
 800e3d6:	2b01      	cmp	r3, #1
 800e3d8:	d10d      	bne.n	800e3f6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e3da:	68bb      	ldr	r3, [r7, #8]
 800e3dc:	68db      	ldr	r3, [r3, #12]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d009      	beq.n	800e3f6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e3e2:	68bb      	ldr	r3, [r7, #8]
 800e3e4:	68d9      	ldr	r1, [r3, #12]
 800e3e6:	69bb      	ldr	r3, [r7, #24]
 800e3e8:	015a      	lsls	r2, r3, #5
 800e3ea:	69fb      	ldr	r3, [r7, #28]
 800e3ec:	4413      	add	r3, r2
 800e3ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e3f2:	460a      	mov	r2, r1
 800e3f4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800e3f6:	68bb      	ldr	r3, [r7, #8]
 800e3f8:	791b      	ldrb	r3, [r3, #4]
 800e3fa:	2b01      	cmp	r3, #1
 800e3fc:	d128      	bne.n	800e450 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e3fe:	69fb      	ldr	r3, [r7, #28]
 800e400:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e404:	689b      	ldr	r3, [r3, #8]
 800e406:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d110      	bne.n	800e430 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e40e:	69bb      	ldr	r3, [r7, #24]
 800e410:	015a      	lsls	r2, r3, #5
 800e412:	69fb      	ldr	r3, [r7, #28]
 800e414:	4413      	add	r3, r2
 800e416:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	69ba      	ldr	r2, [r7, #24]
 800e41e:	0151      	lsls	r1, r2, #5
 800e420:	69fa      	ldr	r2, [r7, #28]
 800e422:	440a      	add	r2, r1
 800e424:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e428:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e42c:	6013      	str	r3, [r2, #0]
 800e42e:	e00f      	b.n	800e450 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e430:	69bb      	ldr	r3, [r7, #24]
 800e432:	015a      	lsls	r2, r3, #5
 800e434:	69fb      	ldr	r3, [r7, #28]
 800e436:	4413      	add	r3, r2
 800e438:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	69ba      	ldr	r2, [r7, #24]
 800e440:	0151      	lsls	r1, r2, #5
 800e442:	69fa      	ldr	r2, [r7, #28]
 800e444:	440a      	add	r2, r1
 800e446:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e44a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e44e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e450:	69bb      	ldr	r3, [r7, #24]
 800e452:	015a      	lsls	r2, r3, #5
 800e454:	69fb      	ldr	r3, [r7, #28]
 800e456:	4413      	add	r3, r2
 800e458:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	69ba      	ldr	r2, [r7, #24]
 800e460:	0151      	lsls	r1, r2, #5
 800e462:	69fa      	ldr	r2, [r7, #28]
 800e464:	440a      	add	r2, r1
 800e466:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e46a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e46e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e470:	2300      	movs	r3, #0
}
 800e472:	4618      	mov	r0, r3
 800e474:	3720      	adds	r7, #32
 800e476:	46bd      	mov	sp, r7
 800e478:	bd80      	pop	{r7, pc}
 800e47a:	bf00      	nop
 800e47c:	1ff80000 	.word	0x1ff80000

0800e480 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e480:	b480      	push	{r7}
 800e482:	b087      	sub	sp, #28
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
 800e488:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e48a:	2300      	movs	r3, #0
 800e48c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800e48e:	2300      	movs	r3, #0
 800e490:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e496:	683b      	ldr	r3, [r7, #0]
 800e498:	785b      	ldrb	r3, [r3, #1]
 800e49a:	2b01      	cmp	r3, #1
 800e49c:	d14a      	bne.n	800e534 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e49e:	683b      	ldr	r3, [r7, #0]
 800e4a0:	781b      	ldrb	r3, [r3, #0]
 800e4a2:	015a      	lsls	r2, r3, #5
 800e4a4:	693b      	ldr	r3, [r7, #16]
 800e4a6:	4413      	add	r3, r2
 800e4a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e4b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e4b6:	f040 8086 	bne.w	800e5c6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800e4ba:	683b      	ldr	r3, [r7, #0]
 800e4bc:	781b      	ldrb	r3, [r3, #0]
 800e4be:	015a      	lsls	r2, r3, #5
 800e4c0:	693b      	ldr	r3, [r7, #16]
 800e4c2:	4413      	add	r3, r2
 800e4c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	683a      	ldr	r2, [r7, #0]
 800e4cc:	7812      	ldrb	r2, [r2, #0]
 800e4ce:	0151      	lsls	r1, r2, #5
 800e4d0:	693a      	ldr	r2, [r7, #16]
 800e4d2:	440a      	add	r2, r1
 800e4d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e4d8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e4dc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800e4de:	683b      	ldr	r3, [r7, #0]
 800e4e0:	781b      	ldrb	r3, [r3, #0]
 800e4e2:	015a      	lsls	r2, r3, #5
 800e4e4:	693b      	ldr	r3, [r7, #16]
 800e4e6:	4413      	add	r3, r2
 800e4e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	683a      	ldr	r2, [r7, #0]
 800e4f0:	7812      	ldrb	r2, [r2, #0]
 800e4f2:	0151      	lsls	r1, r2, #5
 800e4f4:	693a      	ldr	r2, [r7, #16]
 800e4f6:	440a      	add	r2, r1
 800e4f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e4fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e500:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	3301      	adds	r3, #1
 800e506:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800e50e:	4293      	cmp	r3, r2
 800e510:	d902      	bls.n	800e518 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800e512:	2301      	movs	r3, #1
 800e514:	75fb      	strb	r3, [r7, #23]
          break;
 800e516:	e056      	b.n	800e5c6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800e518:	683b      	ldr	r3, [r7, #0]
 800e51a:	781b      	ldrb	r3, [r3, #0]
 800e51c:	015a      	lsls	r2, r3, #5
 800e51e:	693b      	ldr	r3, [r7, #16]
 800e520:	4413      	add	r3, r2
 800e522:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e52c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e530:	d0e7      	beq.n	800e502 <USB_EPStopXfer+0x82>
 800e532:	e048      	b.n	800e5c6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e534:	683b      	ldr	r3, [r7, #0]
 800e536:	781b      	ldrb	r3, [r3, #0]
 800e538:	015a      	lsls	r2, r3, #5
 800e53a:	693b      	ldr	r3, [r7, #16]
 800e53c:	4413      	add	r3, r2
 800e53e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e548:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e54c:	d13b      	bne.n	800e5c6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800e54e:	683b      	ldr	r3, [r7, #0]
 800e550:	781b      	ldrb	r3, [r3, #0]
 800e552:	015a      	lsls	r2, r3, #5
 800e554:	693b      	ldr	r3, [r7, #16]
 800e556:	4413      	add	r3, r2
 800e558:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	683a      	ldr	r2, [r7, #0]
 800e560:	7812      	ldrb	r2, [r2, #0]
 800e562:	0151      	lsls	r1, r2, #5
 800e564:	693a      	ldr	r2, [r7, #16]
 800e566:	440a      	add	r2, r1
 800e568:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e56c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e570:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800e572:	683b      	ldr	r3, [r7, #0]
 800e574:	781b      	ldrb	r3, [r3, #0]
 800e576:	015a      	lsls	r2, r3, #5
 800e578:	693b      	ldr	r3, [r7, #16]
 800e57a:	4413      	add	r3, r2
 800e57c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	683a      	ldr	r2, [r7, #0]
 800e584:	7812      	ldrb	r2, [r2, #0]
 800e586:	0151      	lsls	r1, r2, #5
 800e588:	693a      	ldr	r2, [r7, #16]
 800e58a:	440a      	add	r2, r1
 800e58c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e590:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e594:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	3301      	adds	r3, #1
 800e59a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800e5a2:	4293      	cmp	r3, r2
 800e5a4:	d902      	bls.n	800e5ac <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800e5a6:	2301      	movs	r3, #1
 800e5a8:	75fb      	strb	r3, [r7, #23]
          break;
 800e5aa:	e00c      	b.n	800e5c6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800e5ac:	683b      	ldr	r3, [r7, #0]
 800e5ae:	781b      	ldrb	r3, [r3, #0]
 800e5b0:	015a      	lsls	r2, r3, #5
 800e5b2:	693b      	ldr	r3, [r7, #16]
 800e5b4:	4413      	add	r3, r2
 800e5b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e5c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e5c4:	d0e7      	beq.n	800e596 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800e5c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	371c      	adds	r7, #28
 800e5cc:	46bd      	mov	sp, r7
 800e5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d2:	4770      	bx	lr

0800e5d4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800e5d4:	b480      	push	{r7}
 800e5d6:	b089      	sub	sp, #36	@ 0x24
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	60f8      	str	r0, [r7, #12]
 800e5dc:	60b9      	str	r1, [r7, #8]
 800e5de:	4611      	mov	r1, r2
 800e5e0:	461a      	mov	r2, r3
 800e5e2:	460b      	mov	r3, r1
 800e5e4:	71fb      	strb	r3, [r7, #7]
 800e5e6:	4613      	mov	r3, r2
 800e5e8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800e5ee:	68bb      	ldr	r3, [r7, #8]
 800e5f0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800e5f2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d123      	bne.n	800e642 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800e5fa:	88bb      	ldrh	r3, [r7, #4]
 800e5fc:	3303      	adds	r3, #3
 800e5fe:	089b      	lsrs	r3, r3, #2
 800e600:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800e602:	2300      	movs	r3, #0
 800e604:	61bb      	str	r3, [r7, #24]
 800e606:	e018      	b.n	800e63a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e608:	79fb      	ldrb	r3, [r7, #7]
 800e60a:	031a      	lsls	r2, r3, #12
 800e60c:	697b      	ldr	r3, [r7, #20]
 800e60e:	4413      	add	r3, r2
 800e610:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e614:	461a      	mov	r2, r3
 800e616:	69fb      	ldr	r3, [r7, #28]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800e61c:	69fb      	ldr	r3, [r7, #28]
 800e61e:	3301      	adds	r3, #1
 800e620:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e622:	69fb      	ldr	r3, [r7, #28]
 800e624:	3301      	adds	r3, #1
 800e626:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e628:	69fb      	ldr	r3, [r7, #28]
 800e62a:	3301      	adds	r3, #1
 800e62c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e62e:	69fb      	ldr	r3, [r7, #28]
 800e630:	3301      	adds	r3, #1
 800e632:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800e634:	69bb      	ldr	r3, [r7, #24]
 800e636:	3301      	adds	r3, #1
 800e638:	61bb      	str	r3, [r7, #24]
 800e63a:	69ba      	ldr	r2, [r7, #24]
 800e63c:	693b      	ldr	r3, [r7, #16]
 800e63e:	429a      	cmp	r2, r3
 800e640:	d3e2      	bcc.n	800e608 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800e642:	2300      	movs	r3, #0
}
 800e644:	4618      	mov	r0, r3
 800e646:	3724      	adds	r7, #36	@ 0x24
 800e648:	46bd      	mov	sp, r7
 800e64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e64e:	4770      	bx	lr

0800e650 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e650:	b480      	push	{r7}
 800e652:	b08b      	sub	sp, #44	@ 0x2c
 800e654:	af00      	add	r7, sp, #0
 800e656:	60f8      	str	r0, [r7, #12]
 800e658:	60b9      	str	r1, [r7, #8]
 800e65a:	4613      	mov	r3, r2
 800e65c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800e662:	68bb      	ldr	r3, [r7, #8]
 800e664:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800e666:	88fb      	ldrh	r3, [r7, #6]
 800e668:	089b      	lsrs	r3, r3, #2
 800e66a:	b29b      	uxth	r3, r3
 800e66c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800e66e:	88fb      	ldrh	r3, [r7, #6]
 800e670:	f003 0303 	and.w	r3, r3, #3
 800e674:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800e676:	2300      	movs	r3, #0
 800e678:	623b      	str	r3, [r7, #32]
 800e67a:	e014      	b.n	800e6a6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e67c:	69bb      	ldr	r3, [r7, #24]
 800e67e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e682:	681a      	ldr	r2, [r3, #0]
 800e684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e686:	601a      	str	r2, [r3, #0]
    pDest++;
 800e688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e68a:	3301      	adds	r3, #1
 800e68c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e68e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e690:	3301      	adds	r3, #1
 800e692:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e696:	3301      	adds	r3, #1
 800e698:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e69a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e69c:	3301      	adds	r3, #1
 800e69e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800e6a0:	6a3b      	ldr	r3, [r7, #32]
 800e6a2:	3301      	adds	r3, #1
 800e6a4:	623b      	str	r3, [r7, #32]
 800e6a6:	6a3a      	ldr	r2, [r7, #32]
 800e6a8:	697b      	ldr	r3, [r7, #20]
 800e6aa:	429a      	cmp	r2, r3
 800e6ac:	d3e6      	bcc.n	800e67c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800e6ae:	8bfb      	ldrh	r3, [r7, #30]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d01e      	beq.n	800e6f2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e6b8:	69bb      	ldr	r3, [r7, #24]
 800e6ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e6be:	461a      	mov	r2, r3
 800e6c0:	f107 0310 	add.w	r3, r7, #16
 800e6c4:	6812      	ldr	r2, [r2, #0]
 800e6c6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e6c8:	693a      	ldr	r2, [r7, #16]
 800e6ca:	6a3b      	ldr	r3, [r7, #32]
 800e6cc:	b2db      	uxtb	r3, r3
 800e6ce:	00db      	lsls	r3, r3, #3
 800e6d0:	fa22 f303 	lsr.w	r3, r2, r3
 800e6d4:	b2da      	uxtb	r2, r3
 800e6d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6d8:	701a      	strb	r2, [r3, #0]
      i++;
 800e6da:	6a3b      	ldr	r3, [r7, #32]
 800e6dc:	3301      	adds	r3, #1
 800e6de:	623b      	str	r3, [r7, #32]
      pDest++;
 800e6e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6e2:	3301      	adds	r3, #1
 800e6e4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800e6e6:	8bfb      	ldrh	r3, [r7, #30]
 800e6e8:	3b01      	subs	r3, #1
 800e6ea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800e6ec:	8bfb      	ldrh	r3, [r7, #30]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d1ea      	bne.n	800e6c8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800e6f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	372c      	adds	r7, #44	@ 0x2c
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fe:	4770      	bx	lr

0800e700 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e700:	b480      	push	{r7}
 800e702:	b085      	sub	sp, #20
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
 800e708:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e70e:	683b      	ldr	r3, [r7, #0]
 800e710:	781b      	ldrb	r3, [r3, #0]
 800e712:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e714:	683b      	ldr	r3, [r7, #0]
 800e716:	785b      	ldrb	r3, [r3, #1]
 800e718:	2b01      	cmp	r3, #1
 800e71a:	d12c      	bne.n	800e776 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e71c:	68bb      	ldr	r3, [r7, #8]
 800e71e:	015a      	lsls	r2, r3, #5
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	4413      	add	r3, r2
 800e724:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	db12      	blt.n	800e754 <USB_EPSetStall+0x54>
 800e72e:	68bb      	ldr	r3, [r7, #8]
 800e730:	2b00      	cmp	r3, #0
 800e732:	d00f      	beq.n	800e754 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e734:	68bb      	ldr	r3, [r7, #8]
 800e736:	015a      	lsls	r2, r3, #5
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	4413      	add	r3, r2
 800e73c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	68ba      	ldr	r2, [r7, #8]
 800e744:	0151      	lsls	r1, r2, #5
 800e746:	68fa      	ldr	r2, [r7, #12]
 800e748:	440a      	add	r2, r1
 800e74a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e74e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800e752:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e754:	68bb      	ldr	r3, [r7, #8]
 800e756:	015a      	lsls	r2, r3, #5
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	4413      	add	r3, r2
 800e75c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	68ba      	ldr	r2, [r7, #8]
 800e764:	0151      	lsls	r1, r2, #5
 800e766:	68fa      	ldr	r2, [r7, #12]
 800e768:	440a      	add	r2, r1
 800e76a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e76e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800e772:	6013      	str	r3, [r2, #0]
 800e774:	e02b      	b.n	800e7ce <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e776:	68bb      	ldr	r3, [r7, #8]
 800e778:	015a      	lsls	r2, r3, #5
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	4413      	add	r3, r2
 800e77e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	2b00      	cmp	r3, #0
 800e786:	db12      	blt.n	800e7ae <USB_EPSetStall+0xae>
 800e788:	68bb      	ldr	r3, [r7, #8]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d00f      	beq.n	800e7ae <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e78e:	68bb      	ldr	r3, [r7, #8]
 800e790:	015a      	lsls	r2, r3, #5
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	4413      	add	r3, r2
 800e796:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	68ba      	ldr	r2, [r7, #8]
 800e79e:	0151      	lsls	r1, r2, #5
 800e7a0:	68fa      	ldr	r2, [r7, #12]
 800e7a2:	440a      	add	r2, r1
 800e7a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e7a8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800e7ac:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e7ae:	68bb      	ldr	r3, [r7, #8]
 800e7b0:	015a      	lsls	r2, r3, #5
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	4413      	add	r3, r2
 800e7b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	68ba      	ldr	r2, [r7, #8]
 800e7be:	0151      	lsls	r1, r2, #5
 800e7c0:	68fa      	ldr	r2, [r7, #12]
 800e7c2:	440a      	add	r2, r1
 800e7c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e7c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800e7cc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e7ce:	2300      	movs	r3, #0
}
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	3714      	adds	r7, #20
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7da:	4770      	bx	lr

0800e7dc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e7dc:	b480      	push	{r7}
 800e7de:	b085      	sub	sp, #20
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
 800e7e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e7ea:	683b      	ldr	r3, [r7, #0]
 800e7ec:	781b      	ldrb	r3, [r3, #0]
 800e7ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e7f0:	683b      	ldr	r3, [r7, #0]
 800e7f2:	785b      	ldrb	r3, [r3, #1]
 800e7f4:	2b01      	cmp	r3, #1
 800e7f6:	d128      	bne.n	800e84a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e7f8:	68bb      	ldr	r3, [r7, #8]
 800e7fa:	015a      	lsls	r2, r3, #5
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	4413      	add	r3, r2
 800e800:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	68ba      	ldr	r2, [r7, #8]
 800e808:	0151      	lsls	r1, r2, #5
 800e80a:	68fa      	ldr	r2, [r7, #12]
 800e80c:	440a      	add	r2, r1
 800e80e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e812:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e816:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e818:	683b      	ldr	r3, [r7, #0]
 800e81a:	791b      	ldrb	r3, [r3, #4]
 800e81c:	2b03      	cmp	r3, #3
 800e81e:	d003      	beq.n	800e828 <USB_EPClearStall+0x4c>
 800e820:	683b      	ldr	r3, [r7, #0]
 800e822:	791b      	ldrb	r3, [r3, #4]
 800e824:	2b02      	cmp	r3, #2
 800e826:	d138      	bne.n	800e89a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e828:	68bb      	ldr	r3, [r7, #8]
 800e82a:	015a      	lsls	r2, r3, #5
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	4413      	add	r3, r2
 800e830:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	68ba      	ldr	r2, [r7, #8]
 800e838:	0151      	lsls	r1, r2, #5
 800e83a:	68fa      	ldr	r2, [r7, #12]
 800e83c:	440a      	add	r2, r1
 800e83e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e842:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e846:	6013      	str	r3, [r2, #0]
 800e848:	e027      	b.n	800e89a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e84a:	68bb      	ldr	r3, [r7, #8]
 800e84c:	015a      	lsls	r2, r3, #5
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	4413      	add	r3, r2
 800e852:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	68ba      	ldr	r2, [r7, #8]
 800e85a:	0151      	lsls	r1, r2, #5
 800e85c:	68fa      	ldr	r2, [r7, #12]
 800e85e:	440a      	add	r2, r1
 800e860:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e864:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e868:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e86a:	683b      	ldr	r3, [r7, #0]
 800e86c:	791b      	ldrb	r3, [r3, #4]
 800e86e:	2b03      	cmp	r3, #3
 800e870:	d003      	beq.n	800e87a <USB_EPClearStall+0x9e>
 800e872:	683b      	ldr	r3, [r7, #0]
 800e874:	791b      	ldrb	r3, [r3, #4]
 800e876:	2b02      	cmp	r3, #2
 800e878:	d10f      	bne.n	800e89a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e87a:	68bb      	ldr	r3, [r7, #8]
 800e87c:	015a      	lsls	r2, r3, #5
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	4413      	add	r3, r2
 800e882:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	68ba      	ldr	r2, [r7, #8]
 800e88a:	0151      	lsls	r1, r2, #5
 800e88c:	68fa      	ldr	r2, [r7, #12]
 800e88e:	440a      	add	r2, r1
 800e890:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e894:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e898:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800e89a:	2300      	movs	r3, #0
}
 800e89c:	4618      	mov	r0, r3
 800e89e:	3714      	adds	r7, #20
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a6:	4770      	bx	lr

0800e8a8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800e8a8:	b480      	push	{r7}
 800e8aa:	b085      	sub	sp, #20
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
 800e8b0:	460b      	mov	r3, r1
 800e8b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	68fa      	ldr	r2, [r7, #12]
 800e8c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e8c6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800e8ca:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e8d2:	681a      	ldr	r2, [r3, #0]
 800e8d4:	78fb      	ldrb	r3, [r7, #3]
 800e8d6:	011b      	lsls	r3, r3, #4
 800e8d8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800e8dc:	68f9      	ldr	r1, [r7, #12]
 800e8de:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e8e2:	4313      	orrs	r3, r2
 800e8e4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800e8e6:	2300      	movs	r3, #0
}
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	3714      	adds	r7, #20
 800e8ec:	46bd      	mov	sp, r7
 800e8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f2:	4770      	bx	lr

0800e8f4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800e8f4:	b480      	push	{r7}
 800e8f6:	b085      	sub	sp, #20
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	68fa      	ldr	r2, [r7, #12]
 800e90a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e90e:	f023 0303 	bic.w	r3, r3, #3
 800e912:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e91a:	685b      	ldr	r3, [r3, #4]
 800e91c:	68fa      	ldr	r2, [r7, #12]
 800e91e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e922:	f023 0302 	bic.w	r3, r3, #2
 800e926:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e928:	2300      	movs	r3, #0
}
 800e92a:	4618      	mov	r0, r3
 800e92c:	3714      	adds	r7, #20
 800e92e:	46bd      	mov	sp, r7
 800e930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e934:	4770      	bx	lr

0800e936 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800e936:	b480      	push	{r7}
 800e938:	b085      	sub	sp, #20
 800e93a:	af00      	add	r7, sp, #0
 800e93c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	68fa      	ldr	r2, [r7, #12]
 800e94c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e950:	f023 0303 	bic.w	r3, r3, #3
 800e954:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e95c:	685b      	ldr	r3, [r3, #4]
 800e95e:	68fa      	ldr	r2, [r7, #12]
 800e960:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e964:	f043 0302 	orr.w	r3, r3, #2
 800e968:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e96a:	2300      	movs	r3, #0
}
 800e96c:	4618      	mov	r0, r3
 800e96e:	3714      	adds	r7, #20
 800e970:	46bd      	mov	sp, r7
 800e972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e976:	4770      	bx	lr

0800e978 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800e978:	b480      	push	{r7}
 800e97a:	b085      	sub	sp, #20
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	695b      	ldr	r3, [r3, #20]
 800e984:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	699b      	ldr	r3, [r3, #24]
 800e98a:	68fa      	ldr	r2, [r7, #12]
 800e98c:	4013      	ands	r3, r2
 800e98e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e990:	68fb      	ldr	r3, [r7, #12]
}
 800e992:	4618      	mov	r0, r3
 800e994:	3714      	adds	r7, #20
 800e996:	46bd      	mov	sp, r7
 800e998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99c:	4770      	bx	lr

0800e99e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800e99e:	b480      	push	{r7}
 800e9a0:	b085      	sub	sp, #20
 800e9a2:	af00      	add	r7, sp, #0
 800e9a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e9b0:	699b      	ldr	r3, [r3, #24]
 800e9b2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e9ba:	69db      	ldr	r3, [r3, #28]
 800e9bc:	68ba      	ldr	r2, [r7, #8]
 800e9be:	4013      	ands	r3, r2
 800e9c0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800e9c2:	68bb      	ldr	r3, [r7, #8]
 800e9c4:	0c1b      	lsrs	r3, r3, #16
}
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	3714      	adds	r7, #20
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d0:	4770      	bx	lr

0800e9d2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800e9d2:	b480      	push	{r7}
 800e9d4:	b085      	sub	sp, #20
 800e9d6:	af00      	add	r7, sp, #0
 800e9d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e9e4:	699b      	ldr	r3, [r3, #24]
 800e9e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e9ee:	69db      	ldr	r3, [r3, #28]
 800e9f0:	68ba      	ldr	r2, [r7, #8]
 800e9f2:	4013      	ands	r3, r2
 800e9f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800e9f6:	68bb      	ldr	r3, [r7, #8]
 800e9f8:	b29b      	uxth	r3, r3
}
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	3714      	adds	r7, #20
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea04:	4770      	bx	lr

0800ea06 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ea06:	b480      	push	{r7}
 800ea08:	b085      	sub	sp, #20
 800ea0a:	af00      	add	r7, sp, #0
 800ea0c:	6078      	str	r0, [r7, #4]
 800ea0e:	460b      	mov	r3, r1
 800ea10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ea16:	78fb      	ldrb	r3, [r7, #3]
 800ea18:	015a      	lsls	r2, r3, #5
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	4413      	add	r3, r2
 800ea1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea22:	689b      	ldr	r3, [r3, #8]
 800ea24:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ea2c:	695b      	ldr	r3, [r3, #20]
 800ea2e:	68ba      	ldr	r2, [r7, #8]
 800ea30:	4013      	ands	r3, r2
 800ea32:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ea34:	68bb      	ldr	r3, [r7, #8]
}
 800ea36:	4618      	mov	r0, r3
 800ea38:	3714      	adds	r7, #20
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea40:	4770      	bx	lr

0800ea42 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ea42:	b480      	push	{r7}
 800ea44:	b087      	sub	sp, #28
 800ea46:	af00      	add	r7, sp, #0
 800ea48:	6078      	str	r0, [r7, #4]
 800ea4a:	460b      	mov	r3, r1
 800ea4c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ea52:	697b      	ldr	r3, [r7, #20]
 800ea54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ea58:	691b      	ldr	r3, [r3, #16]
 800ea5a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ea5c:	697b      	ldr	r3, [r7, #20]
 800ea5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ea62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ea64:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ea66:	78fb      	ldrb	r3, [r7, #3]
 800ea68:	f003 030f 	and.w	r3, r3, #15
 800ea6c:	68fa      	ldr	r2, [r7, #12]
 800ea6e:	fa22 f303 	lsr.w	r3, r2, r3
 800ea72:	01db      	lsls	r3, r3, #7
 800ea74:	b2db      	uxtb	r3, r3
 800ea76:	693a      	ldr	r2, [r7, #16]
 800ea78:	4313      	orrs	r3, r2
 800ea7a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ea7c:	78fb      	ldrb	r3, [r7, #3]
 800ea7e:	015a      	lsls	r2, r3, #5
 800ea80:	697b      	ldr	r3, [r7, #20]
 800ea82:	4413      	add	r3, r2
 800ea84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ea88:	689b      	ldr	r3, [r3, #8]
 800ea8a:	693a      	ldr	r2, [r7, #16]
 800ea8c:	4013      	ands	r3, r2
 800ea8e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ea90:	68bb      	ldr	r3, [r7, #8]
}
 800ea92:	4618      	mov	r0, r3
 800ea94:	371c      	adds	r7, #28
 800ea96:	46bd      	mov	sp, r7
 800ea98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9c:	4770      	bx	lr

0800ea9e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800ea9e:	b480      	push	{r7}
 800eaa0:	b083      	sub	sp, #12
 800eaa2:	af00      	add	r7, sp, #0
 800eaa4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	695b      	ldr	r3, [r3, #20]
 800eaaa:	f003 0301 	and.w	r3, r3, #1
}
 800eaae:	4618      	mov	r0, r3
 800eab0:	370c      	adds	r7, #12
 800eab2:	46bd      	mov	sp, r7
 800eab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab8:	4770      	bx	lr

0800eaba <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800eaba:	b480      	push	{r7}
 800eabc:	b085      	sub	sp, #20
 800eabe:	af00      	add	r7, sp, #0
 800eac0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	68fa      	ldr	r2, [r7, #12]
 800ead0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ead4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800ead8:	f023 0307 	bic.w	r3, r3, #7
 800eadc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eae4:	685b      	ldr	r3, [r3, #4]
 800eae6:	68fa      	ldr	r2, [r7, #12]
 800eae8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800eaec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800eaf0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800eaf2:	2300      	movs	r3, #0
}
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	3714      	adds	r7, #20
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafe:	4770      	bx	lr

0800eb00 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800eb00:	b480      	push	{r7}
 800eb02:	b087      	sub	sp, #28
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	60f8      	str	r0, [r7, #12]
 800eb08:	460b      	mov	r3, r1
 800eb0a:	607a      	str	r2, [r7, #4]
 800eb0c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	333c      	adds	r3, #60	@ 0x3c
 800eb16:	3304      	adds	r3, #4
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800eb1c:	693b      	ldr	r3, [r7, #16]
 800eb1e:	4a26      	ldr	r2, [pc, #152]	@ (800ebb8 <USB_EP0_OutStart+0xb8>)
 800eb20:	4293      	cmp	r3, r2
 800eb22:	d90a      	bls.n	800eb3a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800eb24:	697b      	ldr	r3, [r7, #20]
 800eb26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800eb30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800eb34:	d101      	bne.n	800eb3a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800eb36:	2300      	movs	r3, #0
 800eb38:	e037      	b.n	800ebaa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800eb3a:	697b      	ldr	r3, [r7, #20]
 800eb3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb40:	461a      	mov	r2, r3
 800eb42:	2300      	movs	r3, #0
 800eb44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800eb46:	697b      	ldr	r3, [r7, #20]
 800eb48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb4c:	691b      	ldr	r3, [r3, #16]
 800eb4e:	697a      	ldr	r2, [r7, #20]
 800eb50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eb54:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800eb58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800eb5a:	697b      	ldr	r3, [r7, #20]
 800eb5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb60:	691b      	ldr	r3, [r3, #16]
 800eb62:	697a      	ldr	r2, [r7, #20]
 800eb64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eb68:	f043 0318 	orr.w	r3, r3, #24
 800eb6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800eb6e:	697b      	ldr	r3, [r7, #20]
 800eb70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb74:	691b      	ldr	r3, [r3, #16]
 800eb76:	697a      	ldr	r2, [r7, #20]
 800eb78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eb7c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800eb80:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800eb82:	7afb      	ldrb	r3, [r7, #11]
 800eb84:	2b01      	cmp	r3, #1
 800eb86:	d10f      	bne.n	800eba8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800eb88:	697b      	ldr	r3, [r7, #20]
 800eb8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb8e:	461a      	mov	r2, r3
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800eb94:	697b      	ldr	r3, [r7, #20]
 800eb96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	697a      	ldr	r2, [r7, #20]
 800eb9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eba2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800eba6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800eba8:	2300      	movs	r3, #0
}
 800ebaa:	4618      	mov	r0, r3
 800ebac:	371c      	adds	r7, #28
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb4:	4770      	bx	lr
 800ebb6:	bf00      	nop
 800ebb8:	4f54300a 	.word	0x4f54300a

0800ebbc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ebbc:	b480      	push	{r7}
 800ebbe:	b085      	sub	sp, #20
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	3301      	adds	r3, #1
 800ebcc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ebd4:	d901      	bls.n	800ebda <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ebd6:	2303      	movs	r3, #3
 800ebd8:	e022      	b.n	800ec20 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	691b      	ldr	r3, [r3, #16]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	daf2      	bge.n	800ebc8 <USB_CoreReset+0xc>

  count = 10U;
 800ebe2:	230a      	movs	r3, #10
 800ebe4:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800ebe6:	e002      	b.n	800ebee <USB_CoreReset+0x32>
  {
    count--;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	3b01      	subs	r3, #1
 800ebec:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d1f9      	bne.n	800ebe8 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	691b      	ldr	r3, [r3, #16]
 800ebf8:	f043 0201 	orr.w	r2, r3, #1
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	3301      	adds	r3, #1
 800ec04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ec0c:	d901      	bls.n	800ec12 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800ec0e:	2303      	movs	r3, #3
 800ec10:	e006      	b.n	800ec20 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	691b      	ldr	r3, [r3, #16]
 800ec16:	f003 0301 	and.w	r3, r3, #1
 800ec1a:	2b01      	cmp	r3, #1
 800ec1c:	d0f0      	beq.n	800ec00 <USB_CoreReset+0x44>

  return HAL_OK;
 800ec1e:	2300      	movs	r3, #0
}
 800ec20:	4618      	mov	r0, r3
 800ec22:	3714      	adds	r7, #20
 800ec24:	46bd      	mov	sp, r7
 800ec26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2a:	4770      	bx	lr

0800ec2c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b084      	sub	sp, #16
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
 800ec34:	460b      	mov	r3, r1
 800ec36:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ec38:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800ec3c:	f002 fcc6 	bl	80115cc <USBD_static_malloc>
 800ec40:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d109      	bne.n	800ec5c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	32b0      	adds	r2, #176	@ 0xb0
 800ec52:	2100      	movs	r1, #0
 800ec54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ec58:	2302      	movs	r3, #2
 800ec5a:	e0d4      	b.n	800ee06 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ec5c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800ec60:	2100      	movs	r1, #0
 800ec62:	68f8      	ldr	r0, [r7, #12]
 800ec64:	f002 fdae 	bl	80117c4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	32b0      	adds	r2, #176	@ 0xb0
 800ec72:	68f9      	ldr	r1, [r7, #12]
 800ec74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	32b0      	adds	r2, #176	@ 0xb0
 800ec82:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	7c1b      	ldrb	r3, [r3, #16]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d138      	bne.n	800ed06 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ec94:	4b5e      	ldr	r3, [pc, #376]	@ (800ee10 <USBD_CDC_Init+0x1e4>)
 800ec96:	7819      	ldrb	r1, [r3, #0]
 800ec98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ec9c:	2202      	movs	r2, #2
 800ec9e:	6878      	ldr	r0, [r7, #4]
 800eca0:	f002 fb71 	bl	8011386 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800eca4:	4b5a      	ldr	r3, [pc, #360]	@ (800ee10 <USBD_CDC_Init+0x1e4>)
 800eca6:	781b      	ldrb	r3, [r3, #0]
 800eca8:	f003 020f 	and.w	r2, r3, #15
 800ecac:	6879      	ldr	r1, [r7, #4]
 800ecae:	4613      	mov	r3, r2
 800ecb0:	009b      	lsls	r3, r3, #2
 800ecb2:	4413      	add	r3, r2
 800ecb4:	009b      	lsls	r3, r3, #2
 800ecb6:	440b      	add	r3, r1
 800ecb8:	3323      	adds	r3, #35	@ 0x23
 800ecba:	2201      	movs	r2, #1
 800ecbc:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ecbe:	4b55      	ldr	r3, [pc, #340]	@ (800ee14 <USBD_CDC_Init+0x1e8>)
 800ecc0:	7819      	ldrb	r1, [r3, #0]
 800ecc2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ecc6:	2202      	movs	r2, #2
 800ecc8:	6878      	ldr	r0, [r7, #4]
 800ecca:	f002 fb5c 	bl	8011386 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ecce:	4b51      	ldr	r3, [pc, #324]	@ (800ee14 <USBD_CDC_Init+0x1e8>)
 800ecd0:	781b      	ldrb	r3, [r3, #0]
 800ecd2:	f003 020f 	and.w	r2, r3, #15
 800ecd6:	6879      	ldr	r1, [r7, #4]
 800ecd8:	4613      	mov	r3, r2
 800ecda:	009b      	lsls	r3, r3, #2
 800ecdc:	4413      	add	r3, r2
 800ecde:	009b      	lsls	r3, r3, #2
 800ece0:	440b      	add	r3, r1
 800ece2:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800ece6:	2201      	movs	r2, #1
 800ece8:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ecea:	4b4b      	ldr	r3, [pc, #300]	@ (800ee18 <USBD_CDC_Init+0x1ec>)
 800ecec:	781b      	ldrb	r3, [r3, #0]
 800ecee:	f003 020f 	and.w	r2, r3, #15
 800ecf2:	6879      	ldr	r1, [r7, #4]
 800ecf4:	4613      	mov	r3, r2
 800ecf6:	009b      	lsls	r3, r3, #2
 800ecf8:	4413      	add	r3, r2
 800ecfa:	009b      	lsls	r3, r3, #2
 800ecfc:	440b      	add	r3, r1
 800ecfe:	331c      	adds	r3, #28
 800ed00:	2210      	movs	r2, #16
 800ed02:	601a      	str	r2, [r3, #0]
 800ed04:	e035      	b.n	800ed72 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ed06:	4b42      	ldr	r3, [pc, #264]	@ (800ee10 <USBD_CDC_Init+0x1e4>)
 800ed08:	7819      	ldrb	r1, [r3, #0]
 800ed0a:	2340      	movs	r3, #64	@ 0x40
 800ed0c:	2202      	movs	r2, #2
 800ed0e:	6878      	ldr	r0, [r7, #4]
 800ed10:	f002 fb39 	bl	8011386 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ed14:	4b3e      	ldr	r3, [pc, #248]	@ (800ee10 <USBD_CDC_Init+0x1e4>)
 800ed16:	781b      	ldrb	r3, [r3, #0]
 800ed18:	f003 020f 	and.w	r2, r3, #15
 800ed1c:	6879      	ldr	r1, [r7, #4]
 800ed1e:	4613      	mov	r3, r2
 800ed20:	009b      	lsls	r3, r3, #2
 800ed22:	4413      	add	r3, r2
 800ed24:	009b      	lsls	r3, r3, #2
 800ed26:	440b      	add	r3, r1
 800ed28:	3323      	adds	r3, #35	@ 0x23
 800ed2a:	2201      	movs	r2, #1
 800ed2c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ed2e:	4b39      	ldr	r3, [pc, #228]	@ (800ee14 <USBD_CDC_Init+0x1e8>)
 800ed30:	7819      	ldrb	r1, [r3, #0]
 800ed32:	2340      	movs	r3, #64	@ 0x40
 800ed34:	2202      	movs	r2, #2
 800ed36:	6878      	ldr	r0, [r7, #4]
 800ed38:	f002 fb25 	bl	8011386 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ed3c:	4b35      	ldr	r3, [pc, #212]	@ (800ee14 <USBD_CDC_Init+0x1e8>)
 800ed3e:	781b      	ldrb	r3, [r3, #0]
 800ed40:	f003 020f 	and.w	r2, r3, #15
 800ed44:	6879      	ldr	r1, [r7, #4]
 800ed46:	4613      	mov	r3, r2
 800ed48:	009b      	lsls	r3, r3, #2
 800ed4a:	4413      	add	r3, r2
 800ed4c:	009b      	lsls	r3, r3, #2
 800ed4e:	440b      	add	r3, r1
 800ed50:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800ed54:	2201      	movs	r2, #1
 800ed56:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ed58:	4b2f      	ldr	r3, [pc, #188]	@ (800ee18 <USBD_CDC_Init+0x1ec>)
 800ed5a:	781b      	ldrb	r3, [r3, #0]
 800ed5c:	f003 020f 	and.w	r2, r3, #15
 800ed60:	6879      	ldr	r1, [r7, #4]
 800ed62:	4613      	mov	r3, r2
 800ed64:	009b      	lsls	r3, r3, #2
 800ed66:	4413      	add	r3, r2
 800ed68:	009b      	lsls	r3, r3, #2
 800ed6a:	440b      	add	r3, r1
 800ed6c:	331c      	adds	r3, #28
 800ed6e:	2210      	movs	r2, #16
 800ed70:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ed72:	4b29      	ldr	r3, [pc, #164]	@ (800ee18 <USBD_CDC_Init+0x1ec>)
 800ed74:	7819      	ldrb	r1, [r3, #0]
 800ed76:	2308      	movs	r3, #8
 800ed78:	2203      	movs	r2, #3
 800ed7a:	6878      	ldr	r0, [r7, #4]
 800ed7c:	f002 fb03 	bl	8011386 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ed80:	4b25      	ldr	r3, [pc, #148]	@ (800ee18 <USBD_CDC_Init+0x1ec>)
 800ed82:	781b      	ldrb	r3, [r3, #0]
 800ed84:	f003 020f 	and.w	r2, r3, #15
 800ed88:	6879      	ldr	r1, [r7, #4]
 800ed8a:	4613      	mov	r3, r2
 800ed8c:	009b      	lsls	r3, r3, #2
 800ed8e:	4413      	add	r3, r2
 800ed90:	009b      	lsls	r3, r3, #2
 800ed92:	440b      	add	r3, r1
 800ed94:	3323      	adds	r3, #35	@ 0x23
 800ed96:	2201      	movs	r2, #1
 800ed98:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	2200      	movs	r2, #0
 800ed9e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800eda8:	687a      	ldr	r2, [r7, #4]
 800edaa:	33b0      	adds	r3, #176	@ 0xb0
 800edac:	009b      	lsls	r3, r3, #2
 800edae:	4413      	add	r3, r2
 800edb0:	685b      	ldr	r3, [r3, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	2200      	movs	r2, #0
 800edba:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	2200      	movs	r2, #0
 800edc2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d101      	bne.n	800edd4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800edd0:	2302      	movs	r3, #2
 800edd2:	e018      	b.n	800ee06 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	7c1b      	ldrb	r3, [r3, #16]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d10a      	bne.n	800edf2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800eddc:	4b0d      	ldr	r3, [pc, #52]	@ (800ee14 <USBD_CDC_Init+0x1e8>)
 800edde:	7819      	ldrb	r1, [r3, #0]
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ede6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800edea:	6878      	ldr	r0, [r7, #4]
 800edec:	f002 fbba 	bl	8011564 <USBD_LL_PrepareReceive>
 800edf0:	e008      	b.n	800ee04 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800edf2:	4b08      	ldr	r3, [pc, #32]	@ (800ee14 <USBD_CDC_Init+0x1e8>)
 800edf4:	7819      	ldrb	r1, [r3, #0]
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800edfc:	2340      	movs	r3, #64	@ 0x40
 800edfe:	6878      	ldr	r0, [r7, #4]
 800ee00:	f002 fbb0 	bl	8011564 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ee04:	2300      	movs	r3, #0
}
 800ee06:	4618      	mov	r0, r3
 800ee08:	3710      	adds	r7, #16
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	bd80      	pop	{r7, pc}
 800ee0e:	bf00      	nop
 800ee10:	2000035f 	.word	0x2000035f
 800ee14:	20000360 	.word	0x20000360
 800ee18:	20000361 	.word	0x20000361

0800ee1c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b082      	sub	sp, #8
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
 800ee24:	460b      	mov	r3, r1
 800ee26:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ee28:	4b3a      	ldr	r3, [pc, #232]	@ (800ef14 <USBD_CDC_DeInit+0xf8>)
 800ee2a:	781b      	ldrb	r3, [r3, #0]
 800ee2c:	4619      	mov	r1, r3
 800ee2e:	6878      	ldr	r0, [r7, #4]
 800ee30:	f002 facf 	bl	80113d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ee34:	4b37      	ldr	r3, [pc, #220]	@ (800ef14 <USBD_CDC_DeInit+0xf8>)
 800ee36:	781b      	ldrb	r3, [r3, #0]
 800ee38:	f003 020f 	and.w	r2, r3, #15
 800ee3c:	6879      	ldr	r1, [r7, #4]
 800ee3e:	4613      	mov	r3, r2
 800ee40:	009b      	lsls	r3, r3, #2
 800ee42:	4413      	add	r3, r2
 800ee44:	009b      	lsls	r3, r3, #2
 800ee46:	440b      	add	r3, r1
 800ee48:	3323      	adds	r3, #35	@ 0x23
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ee4e:	4b32      	ldr	r3, [pc, #200]	@ (800ef18 <USBD_CDC_DeInit+0xfc>)
 800ee50:	781b      	ldrb	r3, [r3, #0]
 800ee52:	4619      	mov	r1, r3
 800ee54:	6878      	ldr	r0, [r7, #4]
 800ee56:	f002 fabc 	bl	80113d2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ee5a:	4b2f      	ldr	r3, [pc, #188]	@ (800ef18 <USBD_CDC_DeInit+0xfc>)
 800ee5c:	781b      	ldrb	r3, [r3, #0]
 800ee5e:	f003 020f 	and.w	r2, r3, #15
 800ee62:	6879      	ldr	r1, [r7, #4]
 800ee64:	4613      	mov	r3, r2
 800ee66:	009b      	lsls	r3, r3, #2
 800ee68:	4413      	add	r3, r2
 800ee6a:	009b      	lsls	r3, r3, #2
 800ee6c:	440b      	add	r3, r1
 800ee6e:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800ee72:	2200      	movs	r2, #0
 800ee74:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ee76:	4b29      	ldr	r3, [pc, #164]	@ (800ef1c <USBD_CDC_DeInit+0x100>)
 800ee78:	781b      	ldrb	r3, [r3, #0]
 800ee7a:	4619      	mov	r1, r3
 800ee7c:	6878      	ldr	r0, [r7, #4]
 800ee7e:	f002 faa8 	bl	80113d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ee82:	4b26      	ldr	r3, [pc, #152]	@ (800ef1c <USBD_CDC_DeInit+0x100>)
 800ee84:	781b      	ldrb	r3, [r3, #0]
 800ee86:	f003 020f 	and.w	r2, r3, #15
 800ee8a:	6879      	ldr	r1, [r7, #4]
 800ee8c:	4613      	mov	r3, r2
 800ee8e:	009b      	lsls	r3, r3, #2
 800ee90:	4413      	add	r3, r2
 800ee92:	009b      	lsls	r3, r3, #2
 800ee94:	440b      	add	r3, r1
 800ee96:	3323      	adds	r3, #35	@ 0x23
 800ee98:	2200      	movs	r2, #0
 800ee9a:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ee9c:	4b1f      	ldr	r3, [pc, #124]	@ (800ef1c <USBD_CDC_DeInit+0x100>)
 800ee9e:	781b      	ldrb	r3, [r3, #0]
 800eea0:	f003 020f 	and.w	r2, r3, #15
 800eea4:	6879      	ldr	r1, [r7, #4]
 800eea6:	4613      	mov	r3, r2
 800eea8:	009b      	lsls	r3, r3, #2
 800eeaa:	4413      	add	r3, r2
 800eeac:	009b      	lsls	r3, r3, #2
 800eeae:	440b      	add	r3, r1
 800eeb0:	331c      	adds	r3, #28
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	32b0      	adds	r2, #176	@ 0xb0
 800eec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d01f      	beq.n	800ef08 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800eece:	687a      	ldr	r2, [r7, #4]
 800eed0:	33b0      	adds	r3, #176	@ 0xb0
 800eed2:	009b      	lsls	r3, r3, #2
 800eed4:	4413      	add	r3, r2
 800eed6:	685b      	ldr	r3, [r3, #4]
 800eed8:	685b      	ldr	r3, [r3, #4]
 800eeda:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	32b0      	adds	r2, #176	@ 0xb0
 800eee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eeea:	4618      	mov	r0, r3
 800eeec:	f002 fb7c 	bl	80115e8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	32b0      	adds	r2, #176	@ 0xb0
 800eefa:	2100      	movs	r1, #0
 800eefc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	2200      	movs	r2, #0
 800ef04:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ef08:	2300      	movs	r3, #0
}
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	3708      	adds	r7, #8
 800ef0e:	46bd      	mov	sp, r7
 800ef10:	bd80      	pop	{r7, pc}
 800ef12:	bf00      	nop
 800ef14:	2000035f 	.word	0x2000035f
 800ef18:	20000360 	.word	0x20000360
 800ef1c:	20000361 	.word	0x20000361

0800ef20 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b086      	sub	sp, #24
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
 800ef28:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	32b0      	adds	r2, #176	@ 0xb0
 800ef34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef38:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ef3e:	2300      	movs	r3, #0
 800ef40:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ef42:	2300      	movs	r3, #0
 800ef44:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ef46:	693b      	ldr	r3, [r7, #16]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d101      	bne.n	800ef50 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ef4c:	2303      	movs	r3, #3
 800ef4e:	e0bf      	b.n	800f0d0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ef50:	683b      	ldr	r3, [r7, #0]
 800ef52:	781b      	ldrb	r3, [r3, #0]
 800ef54:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d050      	beq.n	800effe <USBD_CDC_Setup+0xde>
 800ef5c:	2b20      	cmp	r3, #32
 800ef5e:	f040 80af 	bne.w	800f0c0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ef62:	683b      	ldr	r3, [r7, #0]
 800ef64:	88db      	ldrh	r3, [r3, #6]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d03a      	beq.n	800efe0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ef6a:	683b      	ldr	r3, [r7, #0]
 800ef6c:	781b      	ldrb	r3, [r3, #0]
 800ef6e:	b25b      	sxtb	r3, r3
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	da1b      	bge.n	800efac <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ef7a:	687a      	ldr	r2, [r7, #4]
 800ef7c:	33b0      	adds	r3, #176	@ 0xb0
 800ef7e:	009b      	lsls	r3, r3, #2
 800ef80:	4413      	add	r3, r2
 800ef82:	685b      	ldr	r3, [r3, #4]
 800ef84:	689b      	ldr	r3, [r3, #8]
 800ef86:	683a      	ldr	r2, [r7, #0]
 800ef88:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ef8a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ef8c:	683a      	ldr	r2, [r7, #0]
 800ef8e:	88d2      	ldrh	r2, [r2, #6]
 800ef90:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ef92:	683b      	ldr	r3, [r7, #0]
 800ef94:	88db      	ldrh	r3, [r3, #6]
 800ef96:	2b07      	cmp	r3, #7
 800ef98:	bf28      	it	cs
 800ef9a:	2307      	movcs	r3, #7
 800ef9c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ef9e:	693b      	ldr	r3, [r7, #16]
 800efa0:	89fa      	ldrh	r2, [r7, #14]
 800efa2:	4619      	mov	r1, r3
 800efa4:	6878      	ldr	r0, [r7, #4]
 800efa6:	f001 fda7 	bl	8010af8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800efaa:	e090      	b.n	800f0ce <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800efac:	683b      	ldr	r3, [r7, #0]
 800efae:	785a      	ldrb	r2, [r3, #1]
 800efb0:	693b      	ldr	r3, [r7, #16]
 800efb2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800efb6:	683b      	ldr	r3, [r7, #0]
 800efb8:	88db      	ldrh	r3, [r3, #6]
 800efba:	2b3f      	cmp	r3, #63	@ 0x3f
 800efbc:	d803      	bhi.n	800efc6 <USBD_CDC_Setup+0xa6>
 800efbe:	683b      	ldr	r3, [r7, #0]
 800efc0:	88db      	ldrh	r3, [r3, #6]
 800efc2:	b2da      	uxtb	r2, r3
 800efc4:	e000      	b.n	800efc8 <USBD_CDC_Setup+0xa8>
 800efc6:	2240      	movs	r2, #64	@ 0x40
 800efc8:	693b      	ldr	r3, [r7, #16]
 800efca:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800efce:	6939      	ldr	r1, [r7, #16]
 800efd0:	693b      	ldr	r3, [r7, #16]
 800efd2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800efd6:	461a      	mov	r2, r3
 800efd8:	6878      	ldr	r0, [r7, #4]
 800efda:	f001 fdbc 	bl	8010b56 <USBD_CtlPrepareRx>
      break;
 800efde:	e076      	b.n	800f0ce <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800efe6:	687a      	ldr	r2, [r7, #4]
 800efe8:	33b0      	adds	r3, #176	@ 0xb0
 800efea:	009b      	lsls	r3, r3, #2
 800efec:	4413      	add	r3, r2
 800efee:	685b      	ldr	r3, [r3, #4]
 800eff0:	689b      	ldr	r3, [r3, #8]
 800eff2:	683a      	ldr	r2, [r7, #0]
 800eff4:	7850      	ldrb	r0, [r2, #1]
 800eff6:	2200      	movs	r2, #0
 800eff8:	6839      	ldr	r1, [r7, #0]
 800effa:	4798      	blx	r3
      break;
 800effc:	e067      	b.n	800f0ce <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800effe:	683b      	ldr	r3, [r7, #0]
 800f000:	785b      	ldrb	r3, [r3, #1]
 800f002:	2b0b      	cmp	r3, #11
 800f004:	d851      	bhi.n	800f0aa <USBD_CDC_Setup+0x18a>
 800f006:	a201      	add	r2, pc, #4	@ (adr r2, 800f00c <USBD_CDC_Setup+0xec>)
 800f008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f00c:	0800f03d 	.word	0x0800f03d
 800f010:	0800f0b9 	.word	0x0800f0b9
 800f014:	0800f0ab 	.word	0x0800f0ab
 800f018:	0800f0ab 	.word	0x0800f0ab
 800f01c:	0800f0ab 	.word	0x0800f0ab
 800f020:	0800f0ab 	.word	0x0800f0ab
 800f024:	0800f0ab 	.word	0x0800f0ab
 800f028:	0800f0ab 	.word	0x0800f0ab
 800f02c:	0800f0ab 	.word	0x0800f0ab
 800f030:	0800f0ab 	.word	0x0800f0ab
 800f034:	0800f067 	.word	0x0800f067
 800f038:	0800f091 	.word	0x0800f091
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f042:	b2db      	uxtb	r3, r3
 800f044:	2b03      	cmp	r3, #3
 800f046:	d107      	bne.n	800f058 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f048:	f107 030a 	add.w	r3, r7, #10
 800f04c:	2202      	movs	r2, #2
 800f04e:	4619      	mov	r1, r3
 800f050:	6878      	ldr	r0, [r7, #4]
 800f052:	f001 fd51 	bl	8010af8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f056:	e032      	b.n	800f0be <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800f058:	6839      	ldr	r1, [r7, #0]
 800f05a:	6878      	ldr	r0, [r7, #4]
 800f05c:	f001 fccf 	bl	80109fe <USBD_CtlError>
            ret = USBD_FAIL;
 800f060:	2303      	movs	r3, #3
 800f062:	75fb      	strb	r3, [r7, #23]
          break;
 800f064:	e02b      	b.n	800f0be <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f06c:	b2db      	uxtb	r3, r3
 800f06e:	2b03      	cmp	r3, #3
 800f070:	d107      	bne.n	800f082 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800f072:	f107 030d 	add.w	r3, r7, #13
 800f076:	2201      	movs	r2, #1
 800f078:	4619      	mov	r1, r3
 800f07a:	6878      	ldr	r0, [r7, #4]
 800f07c:	f001 fd3c 	bl	8010af8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f080:	e01d      	b.n	800f0be <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800f082:	6839      	ldr	r1, [r7, #0]
 800f084:	6878      	ldr	r0, [r7, #4]
 800f086:	f001 fcba 	bl	80109fe <USBD_CtlError>
            ret = USBD_FAIL;
 800f08a:	2303      	movs	r3, #3
 800f08c:	75fb      	strb	r3, [r7, #23]
          break;
 800f08e:	e016      	b.n	800f0be <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f096:	b2db      	uxtb	r3, r3
 800f098:	2b03      	cmp	r3, #3
 800f09a:	d00f      	beq.n	800f0bc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800f09c:	6839      	ldr	r1, [r7, #0]
 800f09e:	6878      	ldr	r0, [r7, #4]
 800f0a0:	f001 fcad 	bl	80109fe <USBD_CtlError>
            ret = USBD_FAIL;
 800f0a4:	2303      	movs	r3, #3
 800f0a6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800f0a8:	e008      	b.n	800f0bc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800f0aa:	6839      	ldr	r1, [r7, #0]
 800f0ac:	6878      	ldr	r0, [r7, #4]
 800f0ae:	f001 fca6 	bl	80109fe <USBD_CtlError>
          ret = USBD_FAIL;
 800f0b2:	2303      	movs	r3, #3
 800f0b4:	75fb      	strb	r3, [r7, #23]
          break;
 800f0b6:	e002      	b.n	800f0be <USBD_CDC_Setup+0x19e>
          break;
 800f0b8:	bf00      	nop
 800f0ba:	e008      	b.n	800f0ce <USBD_CDC_Setup+0x1ae>
          break;
 800f0bc:	bf00      	nop
      }
      break;
 800f0be:	e006      	b.n	800f0ce <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800f0c0:	6839      	ldr	r1, [r7, #0]
 800f0c2:	6878      	ldr	r0, [r7, #4]
 800f0c4:	f001 fc9b 	bl	80109fe <USBD_CtlError>
      ret = USBD_FAIL;
 800f0c8:	2303      	movs	r3, #3
 800f0ca:	75fb      	strb	r3, [r7, #23]
      break;
 800f0cc:	bf00      	nop
  }

  return (uint8_t)ret;
 800f0ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	3718      	adds	r7, #24
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	bd80      	pop	{r7, pc}

0800f0d8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	b084      	sub	sp, #16
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	6078      	str	r0, [r7, #4]
 800f0e0:	460b      	mov	r3, r1
 800f0e2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f0ea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	32b0      	adds	r2, #176	@ 0xb0
 800f0f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d101      	bne.n	800f102 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800f0fe:	2303      	movs	r3, #3
 800f100:	e065      	b.n	800f1ce <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	32b0      	adds	r2, #176	@ 0xb0
 800f10c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f110:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800f112:	78fb      	ldrb	r3, [r7, #3]
 800f114:	f003 020f 	and.w	r2, r3, #15
 800f118:	6879      	ldr	r1, [r7, #4]
 800f11a:	4613      	mov	r3, r2
 800f11c:	009b      	lsls	r3, r3, #2
 800f11e:	4413      	add	r3, r2
 800f120:	009b      	lsls	r3, r3, #2
 800f122:	440b      	add	r3, r1
 800f124:	3314      	adds	r3, #20
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d02f      	beq.n	800f18c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800f12c:	78fb      	ldrb	r3, [r7, #3]
 800f12e:	f003 020f 	and.w	r2, r3, #15
 800f132:	6879      	ldr	r1, [r7, #4]
 800f134:	4613      	mov	r3, r2
 800f136:	009b      	lsls	r3, r3, #2
 800f138:	4413      	add	r3, r2
 800f13a:	009b      	lsls	r3, r3, #2
 800f13c:	440b      	add	r3, r1
 800f13e:	3314      	adds	r3, #20
 800f140:	681a      	ldr	r2, [r3, #0]
 800f142:	78fb      	ldrb	r3, [r7, #3]
 800f144:	f003 010f 	and.w	r1, r3, #15
 800f148:	68f8      	ldr	r0, [r7, #12]
 800f14a:	460b      	mov	r3, r1
 800f14c:	00db      	lsls	r3, r3, #3
 800f14e:	440b      	add	r3, r1
 800f150:	009b      	lsls	r3, r3, #2
 800f152:	4403      	add	r3, r0
 800f154:	331c      	adds	r3, #28
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	fbb2 f1f3 	udiv	r1, r2, r3
 800f15c:	fb01 f303 	mul.w	r3, r1, r3
 800f160:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800f162:	2b00      	cmp	r3, #0
 800f164:	d112      	bne.n	800f18c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800f166:	78fb      	ldrb	r3, [r7, #3]
 800f168:	f003 020f 	and.w	r2, r3, #15
 800f16c:	6879      	ldr	r1, [r7, #4]
 800f16e:	4613      	mov	r3, r2
 800f170:	009b      	lsls	r3, r3, #2
 800f172:	4413      	add	r3, r2
 800f174:	009b      	lsls	r3, r3, #2
 800f176:	440b      	add	r3, r1
 800f178:	3314      	adds	r3, #20
 800f17a:	2200      	movs	r2, #0
 800f17c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f17e:	78f9      	ldrb	r1, [r7, #3]
 800f180:	2300      	movs	r3, #0
 800f182:	2200      	movs	r2, #0
 800f184:	6878      	ldr	r0, [r7, #4]
 800f186:	f002 f9cc 	bl	8011522 <USBD_LL_Transmit>
 800f18a:	e01f      	b.n	800f1cc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800f18c:	68bb      	ldr	r3, [r7, #8]
 800f18e:	2200      	movs	r2, #0
 800f190:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f19a:	687a      	ldr	r2, [r7, #4]
 800f19c:	33b0      	adds	r3, #176	@ 0xb0
 800f19e:	009b      	lsls	r3, r3, #2
 800f1a0:	4413      	add	r3, r2
 800f1a2:	685b      	ldr	r3, [r3, #4]
 800f1a4:	691b      	ldr	r3, [r3, #16]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d010      	beq.n	800f1cc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f1b0:	687a      	ldr	r2, [r7, #4]
 800f1b2:	33b0      	adds	r3, #176	@ 0xb0
 800f1b4:	009b      	lsls	r3, r3, #2
 800f1b6:	4413      	add	r3, r2
 800f1b8:	685b      	ldr	r3, [r3, #4]
 800f1ba:	691b      	ldr	r3, [r3, #16]
 800f1bc:	68ba      	ldr	r2, [r7, #8]
 800f1be:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800f1c2:	68ba      	ldr	r2, [r7, #8]
 800f1c4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800f1c8:	78fa      	ldrb	r2, [r7, #3]
 800f1ca:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800f1cc:	2300      	movs	r3, #0
}
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	3710      	adds	r7, #16
 800f1d2:	46bd      	mov	sp, r7
 800f1d4:	bd80      	pop	{r7, pc}

0800f1d6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f1d6:	b580      	push	{r7, lr}
 800f1d8:	b084      	sub	sp, #16
 800f1da:	af00      	add	r7, sp, #0
 800f1dc:	6078      	str	r0, [r7, #4]
 800f1de:	460b      	mov	r3, r1
 800f1e0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	32b0      	adds	r2, #176	@ 0xb0
 800f1ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1f0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	32b0      	adds	r2, #176	@ 0xb0
 800f1fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d101      	bne.n	800f208 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800f204:	2303      	movs	r3, #3
 800f206:	e01a      	b.n	800f23e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f208:	78fb      	ldrb	r3, [r7, #3]
 800f20a:	4619      	mov	r1, r3
 800f20c:	6878      	ldr	r0, [r7, #4]
 800f20e:	f002 f9ca 	bl	80115a6 <USBD_LL_GetRxDataSize>
 800f212:	4602      	mov	r2, r0
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f220:	687a      	ldr	r2, [r7, #4]
 800f222:	33b0      	adds	r3, #176	@ 0xb0
 800f224:	009b      	lsls	r3, r3, #2
 800f226:	4413      	add	r3, r2
 800f228:	685b      	ldr	r3, [r3, #4]
 800f22a:	68db      	ldr	r3, [r3, #12]
 800f22c:	68fa      	ldr	r2, [r7, #12]
 800f22e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800f232:	68fa      	ldr	r2, [r7, #12]
 800f234:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800f238:	4611      	mov	r1, r2
 800f23a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800f23c:	2300      	movs	r3, #0
}
 800f23e:	4618      	mov	r0, r3
 800f240:	3710      	adds	r7, #16
 800f242:	46bd      	mov	sp, r7
 800f244:	bd80      	pop	{r7, pc}

0800f246 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f246:	b580      	push	{r7, lr}
 800f248:	b084      	sub	sp, #16
 800f24a:	af00      	add	r7, sp, #0
 800f24c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	32b0      	adds	r2, #176	@ 0xb0
 800f258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f25c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d101      	bne.n	800f268 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f264:	2303      	movs	r3, #3
 800f266:	e024      	b.n	800f2b2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f26e:	687a      	ldr	r2, [r7, #4]
 800f270:	33b0      	adds	r3, #176	@ 0xb0
 800f272:	009b      	lsls	r3, r3, #2
 800f274:	4413      	add	r3, r2
 800f276:	685b      	ldr	r3, [r3, #4]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d019      	beq.n	800f2b0 <USBD_CDC_EP0_RxReady+0x6a>
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800f282:	2bff      	cmp	r3, #255	@ 0xff
 800f284:	d014      	beq.n	800f2b0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f28c:	687a      	ldr	r2, [r7, #4]
 800f28e:	33b0      	adds	r3, #176	@ 0xb0
 800f290:	009b      	lsls	r3, r3, #2
 800f292:	4413      	add	r3, r2
 800f294:	685b      	ldr	r3, [r3, #4]
 800f296:	689b      	ldr	r3, [r3, #8]
 800f298:	68fa      	ldr	r2, [r7, #12]
 800f29a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800f29e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800f2a0:	68fa      	ldr	r2, [r7, #12]
 800f2a2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800f2a6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	22ff      	movs	r2, #255	@ 0xff
 800f2ac:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800f2b0:	2300      	movs	r3, #0
}
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	3710      	adds	r7, #16
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	bd80      	pop	{r7, pc}
	...

0800f2bc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b086      	sub	sp, #24
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f2c4:	2182      	movs	r1, #130	@ 0x82
 800f2c6:	4818      	ldr	r0, [pc, #96]	@ (800f328 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800f2c8:	f000 fd62 	bl	800fd90 <USBD_GetEpDesc>
 800f2cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f2ce:	2101      	movs	r1, #1
 800f2d0:	4815      	ldr	r0, [pc, #84]	@ (800f328 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800f2d2:	f000 fd5d 	bl	800fd90 <USBD_GetEpDesc>
 800f2d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800f2d8:	2181      	movs	r1, #129	@ 0x81
 800f2da:	4813      	ldr	r0, [pc, #76]	@ (800f328 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800f2dc:	f000 fd58 	bl	800fd90 <USBD_GetEpDesc>
 800f2e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800f2e2:	697b      	ldr	r3, [r7, #20]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d002      	beq.n	800f2ee <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800f2e8:	697b      	ldr	r3, [r7, #20]
 800f2ea:	2210      	movs	r2, #16
 800f2ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800f2ee:	693b      	ldr	r3, [r7, #16]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d006      	beq.n	800f302 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f2f4:	693b      	ldr	r3, [r7, #16]
 800f2f6:	2200      	movs	r2, #0
 800f2f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f2fc:	711a      	strb	r2, [r3, #4]
 800f2fe:	2200      	movs	r2, #0
 800f300:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d006      	beq.n	800f316 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	2200      	movs	r2, #0
 800f30c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f310:	711a      	strb	r2, [r3, #4]
 800f312:	2200      	movs	r2, #0
 800f314:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	2243      	movs	r2, #67	@ 0x43
 800f31a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800f31c:	4b02      	ldr	r3, [pc, #8]	@ (800f328 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800f31e:	4618      	mov	r0, r3
 800f320:	3718      	adds	r7, #24
 800f322:	46bd      	mov	sp, r7
 800f324:	bd80      	pop	{r7, pc}
 800f326:	bf00      	nop
 800f328:	2000031c 	.word	0x2000031c

0800f32c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b086      	sub	sp, #24
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f334:	2182      	movs	r1, #130	@ 0x82
 800f336:	4818      	ldr	r0, [pc, #96]	@ (800f398 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800f338:	f000 fd2a 	bl	800fd90 <USBD_GetEpDesc>
 800f33c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f33e:	2101      	movs	r1, #1
 800f340:	4815      	ldr	r0, [pc, #84]	@ (800f398 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800f342:	f000 fd25 	bl	800fd90 <USBD_GetEpDesc>
 800f346:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800f348:	2181      	movs	r1, #129	@ 0x81
 800f34a:	4813      	ldr	r0, [pc, #76]	@ (800f398 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800f34c:	f000 fd20 	bl	800fd90 <USBD_GetEpDesc>
 800f350:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800f352:	697b      	ldr	r3, [r7, #20]
 800f354:	2b00      	cmp	r3, #0
 800f356:	d002      	beq.n	800f35e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800f358:	697b      	ldr	r3, [r7, #20]
 800f35a:	2210      	movs	r2, #16
 800f35c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800f35e:	693b      	ldr	r3, [r7, #16]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d006      	beq.n	800f372 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800f364:	693b      	ldr	r3, [r7, #16]
 800f366:	2200      	movs	r2, #0
 800f368:	711a      	strb	r2, [r3, #4]
 800f36a:	2200      	movs	r2, #0
 800f36c:	f042 0202 	orr.w	r2, r2, #2
 800f370:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d006      	beq.n	800f386 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	2200      	movs	r2, #0
 800f37c:	711a      	strb	r2, [r3, #4]
 800f37e:	2200      	movs	r2, #0
 800f380:	f042 0202 	orr.w	r2, r2, #2
 800f384:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	2243      	movs	r2, #67	@ 0x43
 800f38a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800f38c:	4b02      	ldr	r3, [pc, #8]	@ (800f398 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800f38e:	4618      	mov	r0, r3
 800f390:	3718      	adds	r7, #24
 800f392:	46bd      	mov	sp, r7
 800f394:	bd80      	pop	{r7, pc}
 800f396:	bf00      	nop
 800f398:	2000031c 	.word	0x2000031c

0800f39c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b086      	sub	sp, #24
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f3a4:	2182      	movs	r1, #130	@ 0x82
 800f3a6:	4818      	ldr	r0, [pc, #96]	@ (800f408 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800f3a8:	f000 fcf2 	bl	800fd90 <USBD_GetEpDesc>
 800f3ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f3ae:	2101      	movs	r1, #1
 800f3b0:	4815      	ldr	r0, [pc, #84]	@ (800f408 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800f3b2:	f000 fced 	bl	800fd90 <USBD_GetEpDesc>
 800f3b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800f3b8:	2181      	movs	r1, #129	@ 0x81
 800f3ba:	4813      	ldr	r0, [pc, #76]	@ (800f408 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800f3bc:	f000 fce8 	bl	800fd90 <USBD_GetEpDesc>
 800f3c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800f3c2:	697b      	ldr	r3, [r7, #20]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d002      	beq.n	800f3ce <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800f3c8:	697b      	ldr	r3, [r7, #20]
 800f3ca:	2210      	movs	r2, #16
 800f3cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800f3ce:	693b      	ldr	r3, [r7, #16]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d006      	beq.n	800f3e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f3d4:	693b      	ldr	r3, [r7, #16]
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f3dc:	711a      	strb	r2, [r3, #4]
 800f3de:	2200      	movs	r2, #0
 800f3e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d006      	beq.n	800f3f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f3f0:	711a      	strb	r2, [r3, #4]
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	2243      	movs	r2, #67	@ 0x43
 800f3fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800f3fc:	4b02      	ldr	r3, [pc, #8]	@ (800f408 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800f3fe:	4618      	mov	r0, r3
 800f400:	3718      	adds	r7, #24
 800f402:	46bd      	mov	sp, r7
 800f404:	bd80      	pop	{r7, pc}
 800f406:	bf00      	nop
 800f408:	2000031c 	.word	0x2000031c

0800f40c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800f40c:	b480      	push	{r7}
 800f40e:	b083      	sub	sp, #12
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	220a      	movs	r2, #10
 800f418:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800f41a:	4b03      	ldr	r3, [pc, #12]	@ (800f428 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800f41c:	4618      	mov	r0, r3
 800f41e:	370c      	adds	r7, #12
 800f420:	46bd      	mov	sp, r7
 800f422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f426:	4770      	bx	lr
 800f428:	200002d8 	.word	0x200002d8

0800f42c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800f42c:	b480      	push	{r7}
 800f42e:	b083      	sub	sp, #12
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
 800f434:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800f436:	683b      	ldr	r3, [r7, #0]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d101      	bne.n	800f440 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800f43c:	2303      	movs	r3, #3
 800f43e:	e009      	b.n	800f454 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f446:	687a      	ldr	r2, [r7, #4]
 800f448:	33b0      	adds	r3, #176	@ 0xb0
 800f44a:	009b      	lsls	r3, r3, #2
 800f44c:	4413      	add	r3, r2
 800f44e:	683a      	ldr	r2, [r7, #0]
 800f450:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800f452:	2300      	movs	r3, #0
}
 800f454:	4618      	mov	r0, r3
 800f456:	370c      	adds	r7, #12
 800f458:	46bd      	mov	sp, r7
 800f45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f45e:	4770      	bx	lr

0800f460 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800f460:	b480      	push	{r7}
 800f462:	b087      	sub	sp, #28
 800f464:	af00      	add	r7, sp, #0
 800f466:	60f8      	str	r0, [r7, #12]
 800f468:	60b9      	str	r1, [r7, #8]
 800f46a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	32b0      	adds	r2, #176	@ 0xb0
 800f476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f47a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800f47c:	697b      	ldr	r3, [r7, #20]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d101      	bne.n	800f486 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800f482:	2303      	movs	r3, #3
 800f484:	e008      	b.n	800f498 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800f486:	697b      	ldr	r3, [r7, #20]
 800f488:	68ba      	ldr	r2, [r7, #8]
 800f48a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800f48e:	697b      	ldr	r3, [r7, #20]
 800f490:	687a      	ldr	r2, [r7, #4]
 800f492:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800f496:	2300      	movs	r3, #0
}
 800f498:	4618      	mov	r0, r3
 800f49a:	371c      	adds	r7, #28
 800f49c:	46bd      	mov	sp, r7
 800f49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a2:	4770      	bx	lr

0800f4a4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800f4a4:	b480      	push	{r7}
 800f4a6:	b085      	sub	sp, #20
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
 800f4ac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	32b0      	adds	r2, #176	@ 0xb0
 800f4b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4bc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d101      	bne.n	800f4c8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800f4c4:	2303      	movs	r3, #3
 800f4c6:	e004      	b.n	800f4d2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	683a      	ldr	r2, [r7, #0]
 800f4cc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800f4d0:	2300      	movs	r3, #0
}
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	3714      	adds	r7, #20
 800f4d6:	46bd      	mov	sp, r7
 800f4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4dc:	4770      	bx	lr
	...

0800f4e0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800f4e0:	b580      	push	{r7, lr}
 800f4e2:	b084      	sub	sp, #16
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	32b0      	adds	r2, #176	@ 0xb0
 800f4f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4f6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800f4f8:	2301      	movs	r3, #1
 800f4fa:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800f4fc:	68bb      	ldr	r3, [r7, #8]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d101      	bne.n	800f506 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800f502:	2303      	movs	r3, #3
 800f504:	e025      	b.n	800f552 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800f506:	68bb      	ldr	r3, [r7, #8]
 800f508:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d11f      	bne.n	800f550 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800f510:	68bb      	ldr	r3, [r7, #8]
 800f512:	2201      	movs	r2, #1
 800f514:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800f518:	4b10      	ldr	r3, [pc, #64]	@ (800f55c <USBD_CDC_TransmitPacket+0x7c>)
 800f51a:	781b      	ldrb	r3, [r3, #0]
 800f51c:	f003 020f 	and.w	r2, r3, #15
 800f520:	68bb      	ldr	r3, [r7, #8]
 800f522:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800f526:	6878      	ldr	r0, [r7, #4]
 800f528:	4613      	mov	r3, r2
 800f52a:	009b      	lsls	r3, r3, #2
 800f52c:	4413      	add	r3, r2
 800f52e:	009b      	lsls	r3, r3, #2
 800f530:	4403      	add	r3, r0
 800f532:	3314      	adds	r3, #20
 800f534:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800f536:	4b09      	ldr	r3, [pc, #36]	@ (800f55c <USBD_CDC_TransmitPacket+0x7c>)
 800f538:	7819      	ldrb	r1, [r3, #0]
 800f53a:	68bb      	ldr	r3, [r7, #8]
 800f53c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800f540:	68bb      	ldr	r3, [r7, #8]
 800f542:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800f546:	6878      	ldr	r0, [r7, #4]
 800f548:	f001 ffeb 	bl	8011522 <USBD_LL_Transmit>

    ret = USBD_OK;
 800f54c:	2300      	movs	r3, #0
 800f54e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800f550:	7bfb      	ldrb	r3, [r7, #15]
}
 800f552:	4618      	mov	r0, r3
 800f554:	3710      	adds	r7, #16
 800f556:	46bd      	mov	sp, r7
 800f558:	bd80      	pop	{r7, pc}
 800f55a:	bf00      	nop
 800f55c:	2000035f 	.word	0x2000035f

0800f560 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f560:	b580      	push	{r7, lr}
 800f562:	b084      	sub	sp, #16
 800f564:	af00      	add	r7, sp, #0
 800f566:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	32b0      	adds	r2, #176	@ 0xb0
 800f572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f576:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	32b0      	adds	r2, #176	@ 0xb0
 800f582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f586:	2b00      	cmp	r3, #0
 800f588:	d101      	bne.n	800f58e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800f58a:	2303      	movs	r3, #3
 800f58c:	e018      	b.n	800f5c0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	7c1b      	ldrb	r3, [r3, #16]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d10a      	bne.n	800f5ac <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f596:	4b0c      	ldr	r3, [pc, #48]	@ (800f5c8 <USBD_CDC_ReceivePacket+0x68>)
 800f598:	7819      	ldrb	r1, [r3, #0]
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f5a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f5a4:	6878      	ldr	r0, [r7, #4]
 800f5a6:	f001 ffdd 	bl	8011564 <USBD_LL_PrepareReceive>
 800f5aa:	e008      	b.n	800f5be <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f5ac:	4b06      	ldr	r3, [pc, #24]	@ (800f5c8 <USBD_CDC_ReceivePacket+0x68>)
 800f5ae:	7819      	ldrb	r1, [r3, #0]
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f5b6:	2340      	movs	r3, #64	@ 0x40
 800f5b8:	6878      	ldr	r0, [r7, #4]
 800f5ba:	f001 ffd3 	bl	8011564 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f5be:	2300      	movs	r3, #0
}
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	3710      	adds	r7, #16
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	bd80      	pop	{r7, pc}
 800f5c8:	20000360 	.word	0x20000360

0800f5cc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b086      	sub	sp, #24
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	60f8      	str	r0, [r7, #12]
 800f5d4:	60b9      	str	r1, [r7, #8]
 800f5d6:	4613      	mov	r3, r2
 800f5d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d101      	bne.n	800f5e4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800f5e0:	2303      	movs	r3, #3
 800f5e2:	e01f      	b.n	800f624 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	2200      	movs	r2, #0
 800f5f0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	2200      	movs	r2, #0
 800f5f8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f5fc:	68bb      	ldr	r3, [r7, #8]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d003      	beq.n	800f60a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	68ba      	ldr	r2, [r7, #8]
 800f606:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	2201      	movs	r2, #1
 800f60e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	79fa      	ldrb	r2, [r7, #7]
 800f616:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f618:	68f8      	ldr	r0, [r7, #12]
 800f61a:	f001 fe4d 	bl	80112b8 <USBD_LL_Init>
 800f61e:	4603      	mov	r3, r0
 800f620:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f622:	7dfb      	ldrb	r3, [r7, #23]
}
 800f624:	4618      	mov	r0, r3
 800f626:	3718      	adds	r7, #24
 800f628:	46bd      	mov	sp, r7
 800f62a:	bd80      	pop	{r7, pc}

0800f62c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b084      	sub	sp, #16
 800f630:	af00      	add	r7, sp, #0
 800f632:	6078      	str	r0, [r7, #4]
 800f634:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f636:	2300      	movs	r3, #0
 800f638:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f63a:	683b      	ldr	r3, [r7, #0]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d101      	bne.n	800f644 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800f640:	2303      	movs	r3, #3
 800f642:	e025      	b.n	800f690 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	683a      	ldr	r2, [r7, #0]
 800f648:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	32ae      	adds	r2, #174	@ 0xae
 800f656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f65a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d00f      	beq.n	800f680 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	32ae      	adds	r2, #174	@ 0xae
 800f66a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f66e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f670:	f107 020e 	add.w	r2, r7, #14
 800f674:	4610      	mov	r0, r2
 800f676:	4798      	blx	r3
 800f678:	4602      	mov	r2, r0
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f686:	1c5a      	adds	r2, r3, #1
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800f68e:	2300      	movs	r3, #0
}
 800f690:	4618      	mov	r0, r3
 800f692:	3710      	adds	r7, #16
 800f694:	46bd      	mov	sp, r7
 800f696:	bd80      	pop	{r7, pc}

0800f698 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f698:	b580      	push	{r7, lr}
 800f69a:	b082      	sub	sp, #8
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f6a0:	6878      	ldr	r0, [r7, #4]
 800f6a2:	f001 fe55 	bl	8011350 <USBD_LL_Start>
 800f6a6:	4603      	mov	r3, r0
}
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	3708      	adds	r7, #8
 800f6ac:	46bd      	mov	sp, r7
 800f6ae:	bd80      	pop	{r7, pc}

0800f6b0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800f6b0:	b480      	push	{r7}
 800f6b2:	b083      	sub	sp, #12
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f6b8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	370c      	adds	r7, #12
 800f6be:	46bd      	mov	sp, r7
 800f6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c4:	4770      	bx	lr

0800f6c6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f6c6:	b580      	push	{r7, lr}
 800f6c8:	b084      	sub	sp, #16
 800f6ca:	af00      	add	r7, sp, #0
 800f6cc:	6078      	str	r0, [r7, #4]
 800f6ce:	460b      	mov	r3, r1
 800f6d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d009      	beq.n	800f6f4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	78fa      	ldrb	r2, [r7, #3]
 800f6ea:	4611      	mov	r1, r2
 800f6ec:	6878      	ldr	r0, [r7, #4]
 800f6ee:	4798      	blx	r3
 800f6f0:	4603      	mov	r3, r0
 800f6f2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f6f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	3710      	adds	r7, #16
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	bd80      	pop	{r7, pc}

0800f6fe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f6fe:	b580      	push	{r7, lr}
 800f700:	b084      	sub	sp, #16
 800f702:	af00      	add	r7, sp, #0
 800f704:	6078      	str	r0, [r7, #4]
 800f706:	460b      	mov	r3, r1
 800f708:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800f70a:	2300      	movs	r3, #0
 800f70c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f714:	685b      	ldr	r3, [r3, #4]
 800f716:	78fa      	ldrb	r2, [r7, #3]
 800f718:	4611      	mov	r1, r2
 800f71a:	6878      	ldr	r0, [r7, #4]
 800f71c:	4798      	blx	r3
 800f71e:	4603      	mov	r3, r0
 800f720:	2b00      	cmp	r3, #0
 800f722:	d001      	beq.n	800f728 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800f724:	2303      	movs	r3, #3
 800f726:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f728:	7bfb      	ldrb	r3, [r7, #15]
}
 800f72a:	4618      	mov	r0, r3
 800f72c:	3710      	adds	r7, #16
 800f72e:	46bd      	mov	sp, r7
 800f730:	bd80      	pop	{r7, pc}

0800f732 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f732:	b580      	push	{r7, lr}
 800f734:	b084      	sub	sp, #16
 800f736:	af00      	add	r7, sp, #0
 800f738:	6078      	str	r0, [r7, #4]
 800f73a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f742:	6839      	ldr	r1, [r7, #0]
 800f744:	4618      	mov	r0, r3
 800f746:	f001 f920 	bl	801098a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	2201      	movs	r2, #1
 800f74e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800f758:	461a      	mov	r2, r3
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f766:	f003 031f 	and.w	r3, r3, #31
 800f76a:	2b02      	cmp	r3, #2
 800f76c:	d01a      	beq.n	800f7a4 <USBD_LL_SetupStage+0x72>
 800f76e:	2b02      	cmp	r3, #2
 800f770:	d822      	bhi.n	800f7b8 <USBD_LL_SetupStage+0x86>
 800f772:	2b00      	cmp	r3, #0
 800f774:	d002      	beq.n	800f77c <USBD_LL_SetupStage+0x4a>
 800f776:	2b01      	cmp	r3, #1
 800f778:	d00a      	beq.n	800f790 <USBD_LL_SetupStage+0x5e>
 800f77a:	e01d      	b.n	800f7b8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f782:	4619      	mov	r1, r3
 800f784:	6878      	ldr	r0, [r7, #4]
 800f786:	f000 fb75 	bl	800fe74 <USBD_StdDevReq>
 800f78a:	4603      	mov	r3, r0
 800f78c:	73fb      	strb	r3, [r7, #15]
      break;
 800f78e:	e020      	b.n	800f7d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f796:	4619      	mov	r1, r3
 800f798:	6878      	ldr	r0, [r7, #4]
 800f79a:	f000 fbdd 	bl	800ff58 <USBD_StdItfReq>
 800f79e:	4603      	mov	r3, r0
 800f7a0:	73fb      	strb	r3, [r7, #15]
      break;
 800f7a2:	e016      	b.n	800f7d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f7aa:	4619      	mov	r1, r3
 800f7ac:	6878      	ldr	r0, [r7, #4]
 800f7ae:	f000 fc3f 	bl	8010030 <USBD_StdEPReq>
 800f7b2:	4603      	mov	r3, r0
 800f7b4:	73fb      	strb	r3, [r7, #15]
      break;
 800f7b6:	e00c      	b.n	800f7d2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f7be:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800f7c2:	b2db      	uxtb	r3, r3
 800f7c4:	4619      	mov	r1, r3
 800f7c6:	6878      	ldr	r0, [r7, #4]
 800f7c8:	f001 fe22 	bl	8011410 <USBD_LL_StallEP>
 800f7cc:	4603      	mov	r3, r0
 800f7ce:	73fb      	strb	r3, [r7, #15]
      break;
 800f7d0:	bf00      	nop
  }

  return ret;
 800f7d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	3710      	adds	r7, #16
 800f7d8:	46bd      	mov	sp, r7
 800f7da:	bd80      	pop	{r7, pc}

0800f7dc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b086      	sub	sp, #24
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	60f8      	str	r0, [r7, #12]
 800f7e4:	460b      	mov	r3, r1
 800f7e6:	607a      	str	r2, [r7, #4]
 800f7e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800f7ee:	7afb      	ldrb	r3, [r7, #11]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d177      	bne.n	800f8e4 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800f7fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f802:	2b03      	cmp	r3, #3
 800f804:	f040 80a1 	bne.w	800f94a <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800f808:	693b      	ldr	r3, [r7, #16]
 800f80a:	685b      	ldr	r3, [r3, #4]
 800f80c:	693a      	ldr	r2, [r7, #16]
 800f80e:	8992      	ldrh	r2, [r2, #12]
 800f810:	4293      	cmp	r3, r2
 800f812:	d91c      	bls.n	800f84e <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800f814:	693b      	ldr	r3, [r7, #16]
 800f816:	685b      	ldr	r3, [r3, #4]
 800f818:	693a      	ldr	r2, [r7, #16]
 800f81a:	8992      	ldrh	r2, [r2, #12]
 800f81c:	1a9a      	subs	r2, r3, r2
 800f81e:	693b      	ldr	r3, [r7, #16]
 800f820:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800f822:	693b      	ldr	r3, [r7, #16]
 800f824:	691b      	ldr	r3, [r3, #16]
 800f826:	693a      	ldr	r2, [r7, #16]
 800f828:	8992      	ldrh	r2, [r2, #12]
 800f82a:	441a      	add	r2, r3
 800f82c:	693b      	ldr	r3, [r7, #16]
 800f82e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800f830:	693b      	ldr	r3, [r7, #16]
 800f832:	6919      	ldr	r1, [r3, #16]
 800f834:	693b      	ldr	r3, [r7, #16]
 800f836:	899b      	ldrh	r3, [r3, #12]
 800f838:	461a      	mov	r2, r3
 800f83a:	693b      	ldr	r3, [r7, #16]
 800f83c:	685b      	ldr	r3, [r3, #4]
 800f83e:	4293      	cmp	r3, r2
 800f840:	bf38      	it	cc
 800f842:	4613      	movcc	r3, r2
 800f844:	461a      	mov	r2, r3
 800f846:	68f8      	ldr	r0, [r7, #12]
 800f848:	f001 f9a6 	bl	8010b98 <USBD_CtlContinueRx>
 800f84c:	e07d      	b.n	800f94a <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f854:	f003 031f 	and.w	r3, r3, #31
 800f858:	2b02      	cmp	r3, #2
 800f85a:	d014      	beq.n	800f886 <USBD_LL_DataOutStage+0xaa>
 800f85c:	2b02      	cmp	r3, #2
 800f85e:	d81d      	bhi.n	800f89c <USBD_LL_DataOutStage+0xc0>
 800f860:	2b00      	cmp	r3, #0
 800f862:	d002      	beq.n	800f86a <USBD_LL_DataOutStage+0x8e>
 800f864:	2b01      	cmp	r3, #1
 800f866:	d003      	beq.n	800f870 <USBD_LL_DataOutStage+0x94>
 800f868:	e018      	b.n	800f89c <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800f86a:	2300      	movs	r3, #0
 800f86c:	75bb      	strb	r3, [r7, #22]
            break;
 800f86e:	e018      	b.n	800f8a2 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800f876:	b2db      	uxtb	r3, r3
 800f878:	4619      	mov	r1, r3
 800f87a:	68f8      	ldr	r0, [r7, #12]
 800f87c:	f000 fa6e 	bl	800fd5c <USBD_CoreFindIF>
 800f880:	4603      	mov	r3, r0
 800f882:	75bb      	strb	r3, [r7, #22]
            break;
 800f884:	e00d      	b.n	800f8a2 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800f88c:	b2db      	uxtb	r3, r3
 800f88e:	4619      	mov	r1, r3
 800f890:	68f8      	ldr	r0, [r7, #12]
 800f892:	f000 fa70 	bl	800fd76 <USBD_CoreFindEP>
 800f896:	4603      	mov	r3, r0
 800f898:	75bb      	strb	r3, [r7, #22]
            break;
 800f89a:	e002      	b.n	800f8a2 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800f89c:	2300      	movs	r3, #0
 800f89e:	75bb      	strb	r3, [r7, #22]
            break;
 800f8a0:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800f8a2:	7dbb      	ldrb	r3, [r7, #22]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d119      	bne.n	800f8dc <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f8ae:	b2db      	uxtb	r3, r3
 800f8b0:	2b03      	cmp	r3, #3
 800f8b2:	d113      	bne.n	800f8dc <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800f8b4:	7dba      	ldrb	r2, [r7, #22]
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	32ae      	adds	r2, #174	@ 0xae
 800f8ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8be:	691b      	ldr	r3, [r3, #16]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d00b      	beq.n	800f8dc <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800f8c4:	7dba      	ldrb	r2, [r7, #22]
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800f8cc:	7dba      	ldrb	r2, [r7, #22]
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	32ae      	adds	r2, #174	@ 0xae
 800f8d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8d6:	691b      	ldr	r3, [r3, #16]
 800f8d8:	68f8      	ldr	r0, [r7, #12]
 800f8da:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f8dc:	68f8      	ldr	r0, [r7, #12]
 800f8de:	f001 f96c 	bl	8010bba <USBD_CtlSendStatus>
 800f8e2:	e032      	b.n	800f94a <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800f8e4:	7afb      	ldrb	r3, [r7, #11]
 800f8e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f8ea:	b2db      	uxtb	r3, r3
 800f8ec:	4619      	mov	r1, r3
 800f8ee:	68f8      	ldr	r0, [r7, #12]
 800f8f0:	f000 fa41 	bl	800fd76 <USBD_CoreFindEP>
 800f8f4:	4603      	mov	r3, r0
 800f8f6:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f8f8:	7dbb      	ldrb	r3, [r7, #22]
 800f8fa:	2bff      	cmp	r3, #255	@ 0xff
 800f8fc:	d025      	beq.n	800f94a <USBD_LL_DataOutStage+0x16e>
 800f8fe:	7dbb      	ldrb	r3, [r7, #22]
 800f900:	2b00      	cmp	r3, #0
 800f902:	d122      	bne.n	800f94a <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f90a:	b2db      	uxtb	r3, r3
 800f90c:	2b03      	cmp	r3, #3
 800f90e:	d117      	bne.n	800f940 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800f910:	7dba      	ldrb	r2, [r7, #22]
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	32ae      	adds	r2, #174	@ 0xae
 800f916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f91a:	699b      	ldr	r3, [r3, #24]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d00f      	beq.n	800f940 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800f920:	7dba      	ldrb	r2, [r7, #22]
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800f928:	7dba      	ldrb	r2, [r7, #22]
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	32ae      	adds	r2, #174	@ 0xae
 800f92e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f932:	699b      	ldr	r3, [r3, #24]
 800f934:	7afa      	ldrb	r2, [r7, #11]
 800f936:	4611      	mov	r1, r2
 800f938:	68f8      	ldr	r0, [r7, #12]
 800f93a:	4798      	blx	r3
 800f93c:	4603      	mov	r3, r0
 800f93e:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800f940:	7dfb      	ldrb	r3, [r7, #23]
 800f942:	2b00      	cmp	r3, #0
 800f944:	d001      	beq.n	800f94a <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800f946:	7dfb      	ldrb	r3, [r7, #23]
 800f948:	e000      	b.n	800f94c <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800f94a:	2300      	movs	r3, #0
}
 800f94c:	4618      	mov	r0, r3
 800f94e:	3718      	adds	r7, #24
 800f950:	46bd      	mov	sp, r7
 800f952:	bd80      	pop	{r7, pc}

0800f954 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f954:	b580      	push	{r7, lr}
 800f956:	b086      	sub	sp, #24
 800f958:	af00      	add	r7, sp, #0
 800f95a:	60f8      	str	r0, [r7, #12]
 800f95c:	460b      	mov	r3, r1
 800f95e:	607a      	str	r2, [r7, #4]
 800f960:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800f962:	7afb      	ldrb	r3, [r7, #11]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d178      	bne.n	800fa5a <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	3314      	adds	r3, #20
 800f96c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f974:	2b02      	cmp	r3, #2
 800f976:	d163      	bne.n	800fa40 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800f978:	693b      	ldr	r3, [r7, #16]
 800f97a:	685b      	ldr	r3, [r3, #4]
 800f97c:	693a      	ldr	r2, [r7, #16]
 800f97e:	8992      	ldrh	r2, [r2, #12]
 800f980:	4293      	cmp	r3, r2
 800f982:	d91c      	bls.n	800f9be <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800f984:	693b      	ldr	r3, [r7, #16]
 800f986:	685b      	ldr	r3, [r3, #4]
 800f988:	693a      	ldr	r2, [r7, #16]
 800f98a:	8992      	ldrh	r2, [r2, #12]
 800f98c:	1a9a      	subs	r2, r3, r2
 800f98e:	693b      	ldr	r3, [r7, #16]
 800f990:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800f992:	693b      	ldr	r3, [r7, #16]
 800f994:	691b      	ldr	r3, [r3, #16]
 800f996:	693a      	ldr	r2, [r7, #16]
 800f998:	8992      	ldrh	r2, [r2, #12]
 800f99a:	441a      	add	r2, r3
 800f99c:	693b      	ldr	r3, [r7, #16]
 800f99e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800f9a0:	693b      	ldr	r3, [r7, #16]
 800f9a2:	6919      	ldr	r1, [r3, #16]
 800f9a4:	693b      	ldr	r3, [r7, #16]
 800f9a6:	685b      	ldr	r3, [r3, #4]
 800f9a8:	461a      	mov	r2, r3
 800f9aa:	68f8      	ldr	r0, [r7, #12]
 800f9ac:	f001 f8c2 	bl	8010b34 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	2100      	movs	r1, #0
 800f9b6:	68f8      	ldr	r0, [r7, #12]
 800f9b8:	f001 fdd4 	bl	8011564 <USBD_LL_PrepareReceive>
 800f9bc:	e040      	b.n	800fa40 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f9be:	693b      	ldr	r3, [r7, #16]
 800f9c0:	899b      	ldrh	r3, [r3, #12]
 800f9c2:	461a      	mov	r2, r3
 800f9c4:	693b      	ldr	r3, [r7, #16]
 800f9c6:	685b      	ldr	r3, [r3, #4]
 800f9c8:	429a      	cmp	r2, r3
 800f9ca:	d11c      	bne.n	800fa06 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800f9cc:	693b      	ldr	r3, [r7, #16]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	693a      	ldr	r2, [r7, #16]
 800f9d2:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f9d4:	4293      	cmp	r3, r2
 800f9d6:	d316      	bcc.n	800fa06 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800f9d8:	693b      	ldr	r3, [r7, #16]
 800f9da:	681a      	ldr	r2, [r3, #0]
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f9e2:	429a      	cmp	r2, r3
 800f9e4:	d20f      	bcs.n	800fa06 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	2100      	movs	r1, #0
 800f9ea:	68f8      	ldr	r0, [r7, #12]
 800f9ec:	f001 f8a2 	bl	8010b34 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	2200      	movs	r2, #0
 800f9f4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	2200      	movs	r2, #0
 800f9fc:	2100      	movs	r1, #0
 800f9fe:	68f8      	ldr	r0, [r7, #12]
 800fa00:	f001 fdb0 	bl	8011564 <USBD_LL_PrepareReceive>
 800fa04:	e01c      	b.n	800fa40 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fa0c:	b2db      	uxtb	r3, r3
 800fa0e:	2b03      	cmp	r3, #3
 800fa10:	d10f      	bne.n	800fa32 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fa18:	68db      	ldr	r3, [r3, #12]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d009      	beq.n	800fa32 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	2200      	movs	r2, #0
 800fa22:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fa2c:	68db      	ldr	r3, [r3, #12]
 800fa2e:	68f8      	ldr	r0, [r7, #12]
 800fa30:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800fa32:	2180      	movs	r1, #128	@ 0x80
 800fa34:	68f8      	ldr	r0, [r7, #12]
 800fa36:	f001 fceb 	bl	8011410 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800fa3a:	68f8      	ldr	r0, [r7, #12]
 800fa3c:	f001 f8d0 	bl	8010be0 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d03a      	beq.n	800fac0 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800fa4a:	68f8      	ldr	r0, [r7, #12]
 800fa4c:	f7ff fe30 	bl	800f6b0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	2200      	movs	r2, #0
 800fa54:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800fa58:	e032      	b.n	800fac0 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800fa5a:	7afb      	ldrb	r3, [r7, #11]
 800fa5c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800fa60:	b2db      	uxtb	r3, r3
 800fa62:	4619      	mov	r1, r3
 800fa64:	68f8      	ldr	r0, [r7, #12]
 800fa66:	f000 f986 	bl	800fd76 <USBD_CoreFindEP>
 800fa6a:	4603      	mov	r3, r0
 800fa6c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fa6e:	7dfb      	ldrb	r3, [r7, #23]
 800fa70:	2bff      	cmp	r3, #255	@ 0xff
 800fa72:	d025      	beq.n	800fac0 <USBD_LL_DataInStage+0x16c>
 800fa74:	7dfb      	ldrb	r3, [r7, #23]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d122      	bne.n	800fac0 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fa80:	b2db      	uxtb	r3, r3
 800fa82:	2b03      	cmp	r3, #3
 800fa84:	d11c      	bne.n	800fac0 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800fa86:	7dfa      	ldrb	r2, [r7, #23]
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	32ae      	adds	r2, #174	@ 0xae
 800fa8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa90:	695b      	ldr	r3, [r3, #20]
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d014      	beq.n	800fac0 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800fa96:	7dfa      	ldrb	r2, [r7, #23]
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800fa9e:	7dfa      	ldrb	r2, [r7, #23]
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	32ae      	adds	r2, #174	@ 0xae
 800faa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800faa8:	695b      	ldr	r3, [r3, #20]
 800faaa:	7afa      	ldrb	r2, [r7, #11]
 800faac:	4611      	mov	r1, r2
 800faae:	68f8      	ldr	r0, [r7, #12]
 800fab0:	4798      	blx	r3
 800fab2:	4603      	mov	r3, r0
 800fab4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800fab6:	7dbb      	ldrb	r3, [r7, #22]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d001      	beq.n	800fac0 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800fabc:	7dbb      	ldrb	r3, [r7, #22]
 800fabe:	e000      	b.n	800fac2 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800fac0:	2300      	movs	r3, #0
}
 800fac2:	4618      	mov	r0, r3
 800fac4:	3718      	adds	r7, #24
 800fac6:	46bd      	mov	sp, r7
 800fac8:	bd80      	pop	{r7, pc}

0800faca <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800faca:	b580      	push	{r7, lr}
 800facc:	b084      	sub	sp, #16
 800face:	af00      	add	r7, sp, #0
 800fad0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800fad2:	2300      	movs	r3, #0
 800fad4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	2201      	movs	r2, #1
 800fada:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	2200      	movs	r2, #0
 800fae2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	2200      	movs	r2, #0
 800faea:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	2200      	movs	r2, #0
 800faf0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	2200      	movs	r2, #0
 800faf8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d014      	beq.n	800fb30 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fb0c:	685b      	ldr	r3, [r3, #4]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d00e      	beq.n	800fb30 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fb18:	685b      	ldr	r3, [r3, #4]
 800fb1a:	687a      	ldr	r2, [r7, #4]
 800fb1c:	6852      	ldr	r2, [r2, #4]
 800fb1e:	b2d2      	uxtb	r2, r2
 800fb20:	4611      	mov	r1, r2
 800fb22:	6878      	ldr	r0, [r7, #4]
 800fb24:	4798      	blx	r3
 800fb26:	4603      	mov	r3, r0
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d001      	beq.n	800fb30 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800fb2c:	2303      	movs	r3, #3
 800fb2e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fb30:	2340      	movs	r3, #64	@ 0x40
 800fb32:	2200      	movs	r2, #0
 800fb34:	2100      	movs	r1, #0
 800fb36:	6878      	ldr	r0, [r7, #4]
 800fb38:	f001 fc25 	bl	8011386 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	2201      	movs	r2, #1
 800fb40:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	2240      	movs	r2, #64	@ 0x40
 800fb48:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fb4c:	2340      	movs	r3, #64	@ 0x40
 800fb4e:	2200      	movs	r2, #0
 800fb50:	2180      	movs	r1, #128	@ 0x80
 800fb52:	6878      	ldr	r0, [r7, #4]
 800fb54:	f001 fc17 	bl	8011386 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	2201      	movs	r2, #1
 800fb5c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	2240      	movs	r2, #64	@ 0x40
 800fb64:	841a      	strh	r2, [r3, #32]

  return ret;
 800fb66:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb68:	4618      	mov	r0, r3
 800fb6a:	3710      	adds	r7, #16
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	bd80      	pop	{r7, pc}

0800fb70 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800fb70:	b480      	push	{r7}
 800fb72:	b083      	sub	sp, #12
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
 800fb78:	460b      	mov	r3, r1
 800fb7a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	78fa      	ldrb	r2, [r7, #3]
 800fb80:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800fb82:	2300      	movs	r3, #0
}
 800fb84:	4618      	mov	r0, r3
 800fb86:	370c      	adds	r7, #12
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb8e:	4770      	bx	lr

0800fb90 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800fb90:	b480      	push	{r7}
 800fb92:	b083      	sub	sp, #12
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fb9e:	b2db      	uxtb	r3, r3
 800fba0:	2b04      	cmp	r3, #4
 800fba2:	d006      	beq.n	800fbb2 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fbaa:	b2da      	uxtb	r2, r3
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	2204      	movs	r2, #4
 800fbb6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800fbba:	2300      	movs	r3, #0
}
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	370c      	adds	r7, #12
 800fbc0:	46bd      	mov	sp, r7
 800fbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc6:	4770      	bx	lr

0800fbc8 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800fbc8:	b480      	push	{r7}
 800fbca:	b083      	sub	sp, #12
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fbd6:	b2db      	uxtb	r3, r3
 800fbd8:	2b04      	cmp	r3, #4
 800fbda:	d106      	bne.n	800fbea <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800fbe2:	b2da      	uxtb	r2, r3
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800fbea:	2300      	movs	r3, #0
}
 800fbec:	4618      	mov	r0, r3
 800fbee:	370c      	adds	r7, #12
 800fbf0:	46bd      	mov	sp, r7
 800fbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf6:	4770      	bx	lr

0800fbf8 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b082      	sub	sp, #8
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fc06:	b2db      	uxtb	r3, r3
 800fc08:	2b03      	cmp	r3, #3
 800fc0a:	d110      	bne.n	800fc2e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d00b      	beq.n	800fc2e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fc1c:	69db      	ldr	r3, [r3, #28]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d005      	beq.n	800fc2e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fc28:	69db      	ldr	r3, [r3, #28]
 800fc2a:	6878      	ldr	r0, [r7, #4]
 800fc2c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800fc2e:	2300      	movs	r3, #0
}
 800fc30:	4618      	mov	r0, r3
 800fc32:	3708      	adds	r7, #8
 800fc34:	46bd      	mov	sp, r7
 800fc36:	bd80      	pop	{r7, pc}

0800fc38 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b082      	sub	sp, #8
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	6078      	str	r0, [r7, #4]
 800fc40:	460b      	mov	r3, r1
 800fc42:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	32ae      	adds	r2, #174	@ 0xae
 800fc4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d101      	bne.n	800fc5a <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800fc56:	2303      	movs	r3, #3
 800fc58:	e01c      	b.n	800fc94 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fc60:	b2db      	uxtb	r3, r3
 800fc62:	2b03      	cmp	r3, #3
 800fc64:	d115      	bne.n	800fc92 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	32ae      	adds	r2, #174	@ 0xae
 800fc70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc74:	6a1b      	ldr	r3, [r3, #32]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d00b      	beq.n	800fc92 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	32ae      	adds	r2, #174	@ 0xae
 800fc84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc88:	6a1b      	ldr	r3, [r3, #32]
 800fc8a:	78fa      	ldrb	r2, [r7, #3]
 800fc8c:	4611      	mov	r1, r2
 800fc8e:	6878      	ldr	r0, [r7, #4]
 800fc90:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800fc92:	2300      	movs	r3, #0
}
 800fc94:	4618      	mov	r0, r3
 800fc96:	3708      	adds	r7, #8
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	bd80      	pop	{r7, pc}

0800fc9c <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	b082      	sub	sp, #8
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	6078      	str	r0, [r7, #4]
 800fca4:	460b      	mov	r3, r1
 800fca6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	32ae      	adds	r2, #174	@ 0xae
 800fcb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d101      	bne.n	800fcbe <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800fcba:	2303      	movs	r3, #3
 800fcbc:	e01c      	b.n	800fcf8 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fcc4:	b2db      	uxtb	r3, r3
 800fcc6:	2b03      	cmp	r3, #3
 800fcc8:	d115      	bne.n	800fcf6 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	32ae      	adds	r2, #174	@ 0xae
 800fcd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fcd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d00b      	beq.n	800fcf6 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	32ae      	adds	r2, #174	@ 0xae
 800fce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fcec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fcee:	78fa      	ldrb	r2, [r7, #3]
 800fcf0:	4611      	mov	r1, r2
 800fcf2:	6878      	ldr	r0, [r7, #4]
 800fcf4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800fcf6:	2300      	movs	r3, #0
}
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	3708      	adds	r7, #8
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	bd80      	pop	{r7, pc}

0800fd00 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800fd00:	b480      	push	{r7}
 800fd02:	b083      	sub	sp, #12
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fd08:	2300      	movs	r3, #0
}
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	370c      	adds	r7, #12
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd14:	4770      	bx	lr

0800fd16 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800fd16:	b580      	push	{r7, lr}
 800fd18:	b084      	sub	sp, #16
 800fd1a:	af00      	add	r7, sp, #0
 800fd1c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800fd1e:	2300      	movs	r3, #0
 800fd20:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	2201      	movs	r2, #1
 800fd26:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d00e      	beq.n	800fd52 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fd3a:	685b      	ldr	r3, [r3, #4]
 800fd3c:	687a      	ldr	r2, [r7, #4]
 800fd3e:	6852      	ldr	r2, [r2, #4]
 800fd40:	b2d2      	uxtb	r2, r2
 800fd42:	4611      	mov	r1, r2
 800fd44:	6878      	ldr	r0, [r7, #4]
 800fd46:	4798      	blx	r3
 800fd48:	4603      	mov	r3, r0
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d001      	beq.n	800fd52 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800fd4e:	2303      	movs	r3, #3
 800fd50:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800fd52:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd54:	4618      	mov	r0, r3
 800fd56:	3710      	adds	r7, #16
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	bd80      	pop	{r7, pc}

0800fd5c <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800fd5c:	b480      	push	{r7}
 800fd5e:	b083      	sub	sp, #12
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	6078      	str	r0, [r7, #4]
 800fd64:	460b      	mov	r3, r1
 800fd66:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800fd68:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	370c      	adds	r7, #12
 800fd6e:	46bd      	mov	sp, r7
 800fd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd74:	4770      	bx	lr

0800fd76 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800fd76:	b480      	push	{r7}
 800fd78:	b083      	sub	sp, #12
 800fd7a:	af00      	add	r7, sp, #0
 800fd7c:	6078      	str	r0, [r7, #4]
 800fd7e:	460b      	mov	r3, r1
 800fd80:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800fd82:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800fd84:	4618      	mov	r0, r3
 800fd86:	370c      	adds	r7, #12
 800fd88:	46bd      	mov	sp, r7
 800fd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd8e:	4770      	bx	lr

0800fd90 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800fd90:	b580      	push	{r7, lr}
 800fd92:	b086      	sub	sp, #24
 800fd94:	af00      	add	r7, sp, #0
 800fd96:	6078      	str	r0, [r7, #4]
 800fd98:	460b      	mov	r3, r1
 800fd9a:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800fda4:	2300      	movs	r3, #0
 800fda6:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	885b      	ldrh	r3, [r3, #2]
 800fdac:	b29b      	uxth	r3, r3
 800fdae:	68fa      	ldr	r2, [r7, #12]
 800fdb0:	7812      	ldrb	r2, [r2, #0]
 800fdb2:	4293      	cmp	r3, r2
 800fdb4:	d91f      	bls.n	800fdf6 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	781b      	ldrb	r3, [r3, #0]
 800fdba:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800fdbc:	e013      	b.n	800fde6 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800fdbe:	f107 030a 	add.w	r3, r7, #10
 800fdc2:	4619      	mov	r1, r3
 800fdc4:	6978      	ldr	r0, [r7, #20]
 800fdc6:	f000 f81b 	bl	800fe00 <USBD_GetNextDesc>
 800fdca:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800fdcc:	697b      	ldr	r3, [r7, #20]
 800fdce:	785b      	ldrb	r3, [r3, #1]
 800fdd0:	2b05      	cmp	r3, #5
 800fdd2:	d108      	bne.n	800fde6 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800fdd4:	697b      	ldr	r3, [r7, #20]
 800fdd6:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800fdd8:	693b      	ldr	r3, [r7, #16]
 800fdda:	789b      	ldrb	r3, [r3, #2]
 800fddc:	78fa      	ldrb	r2, [r7, #3]
 800fdde:	429a      	cmp	r2, r3
 800fde0:	d008      	beq.n	800fdf4 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800fde2:	2300      	movs	r3, #0
 800fde4:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	885b      	ldrh	r3, [r3, #2]
 800fdea:	b29a      	uxth	r2, r3
 800fdec:	897b      	ldrh	r3, [r7, #10]
 800fdee:	429a      	cmp	r2, r3
 800fdf0:	d8e5      	bhi.n	800fdbe <USBD_GetEpDesc+0x2e>
 800fdf2:	e000      	b.n	800fdf6 <USBD_GetEpDesc+0x66>
          break;
 800fdf4:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800fdf6:	693b      	ldr	r3, [r7, #16]
}
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	3718      	adds	r7, #24
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	bd80      	pop	{r7, pc}

0800fe00 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800fe00:	b480      	push	{r7}
 800fe02:	b085      	sub	sp, #20
 800fe04:	af00      	add	r7, sp, #0
 800fe06:	6078      	str	r0, [r7, #4]
 800fe08:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800fe0e:	683b      	ldr	r3, [r7, #0]
 800fe10:	881b      	ldrh	r3, [r3, #0]
 800fe12:	68fa      	ldr	r2, [r7, #12]
 800fe14:	7812      	ldrb	r2, [r2, #0]
 800fe16:	4413      	add	r3, r2
 800fe18:	b29a      	uxth	r2, r3
 800fe1a:	683b      	ldr	r3, [r7, #0]
 800fe1c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	781b      	ldrb	r3, [r3, #0]
 800fe22:	461a      	mov	r2, r3
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	4413      	add	r3, r2
 800fe28:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800fe2a:	68fb      	ldr	r3, [r7, #12]
}
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	3714      	adds	r7, #20
 800fe30:	46bd      	mov	sp, r7
 800fe32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe36:	4770      	bx	lr

0800fe38 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800fe38:	b480      	push	{r7}
 800fe3a:	b087      	sub	sp, #28
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800fe44:	697b      	ldr	r3, [r7, #20]
 800fe46:	781b      	ldrb	r3, [r3, #0]
 800fe48:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800fe4a:	697b      	ldr	r3, [r7, #20]
 800fe4c:	3301      	adds	r3, #1
 800fe4e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800fe50:	697b      	ldr	r3, [r7, #20]
 800fe52:	781b      	ldrb	r3, [r3, #0]
 800fe54:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800fe56:	8a3b      	ldrh	r3, [r7, #16]
 800fe58:	021b      	lsls	r3, r3, #8
 800fe5a:	b21a      	sxth	r2, r3
 800fe5c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fe60:	4313      	orrs	r3, r2
 800fe62:	b21b      	sxth	r3, r3
 800fe64:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800fe66:	89fb      	ldrh	r3, [r7, #14]
}
 800fe68:	4618      	mov	r0, r3
 800fe6a:	371c      	adds	r7, #28
 800fe6c:	46bd      	mov	sp, r7
 800fe6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe72:	4770      	bx	lr

0800fe74 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b084      	sub	sp, #16
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
 800fe7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fe7e:	2300      	movs	r3, #0
 800fe80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fe82:	683b      	ldr	r3, [r7, #0]
 800fe84:	781b      	ldrb	r3, [r3, #0]
 800fe86:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800fe8a:	2b40      	cmp	r3, #64	@ 0x40
 800fe8c:	d005      	beq.n	800fe9a <USBD_StdDevReq+0x26>
 800fe8e:	2b40      	cmp	r3, #64	@ 0x40
 800fe90:	d857      	bhi.n	800ff42 <USBD_StdDevReq+0xce>
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d00f      	beq.n	800feb6 <USBD_StdDevReq+0x42>
 800fe96:	2b20      	cmp	r3, #32
 800fe98:	d153      	bne.n	800ff42 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	32ae      	adds	r2, #174	@ 0xae
 800fea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fea8:	689b      	ldr	r3, [r3, #8]
 800feaa:	6839      	ldr	r1, [r7, #0]
 800feac:	6878      	ldr	r0, [r7, #4]
 800feae:	4798      	blx	r3
 800feb0:	4603      	mov	r3, r0
 800feb2:	73fb      	strb	r3, [r7, #15]
      break;
 800feb4:	e04a      	b.n	800ff4c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800feb6:	683b      	ldr	r3, [r7, #0]
 800feb8:	785b      	ldrb	r3, [r3, #1]
 800feba:	2b09      	cmp	r3, #9
 800febc:	d83b      	bhi.n	800ff36 <USBD_StdDevReq+0xc2>
 800febe:	a201      	add	r2, pc, #4	@ (adr r2, 800fec4 <USBD_StdDevReq+0x50>)
 800fec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fec4:	0800ff19 	.word	0x0800ff19
 800fec8:	0800ff2d 	.word	0x0800ff2d
 800fecc:	0800ff37 	.word	0x0800ff37
 800fed0:	0800ff23 	.word	0x0800ff23
 800fed4:	0800ff37 	.word	0x0800ff37
 800fed8:	0800fef7 	.word	0x0800fef7
 800fedc:	0800feed 	.word	0x0800feed
 800fee0:	0800ff37 	.word	0x0800ff37
 800fee4:	0800ff0f 	.word	0x0800ff0f
 800fee8:	0800ff01 	.word	0x0800ff01
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800feec:	6839      	ldr	r1, [r7, #0]
 800feee:	6878      	ldr	r0, [r7, #4]
 800fef0:	f000 fa3e 	bl	8010370 <USBD_GetDescriptor>
          break;
 800fef4:	e024      	b.n	800ff40 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800fef6:	6839      	ldr	r1, [r7, #0]
 800fef8:	6878      	ldr	r0, [r7, #4]
 800fefa:	f000 fba3 	bl	8010644 <USBD_SetAddress>
          break;
 800fefe:	e01f      	b.n	800ff40 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ff00:	6839      	ldr	r1, [r7, #0]
 800ff02:	6878      	ldr	r0, [r7, #4]
 800ff04:	f000 fbe2 	bl	80106cc <USBD_SetConfig>
 800ff08:	4603      	mov	r3, r0
 800ff0a:	73fb      	strb	r3, [r7, #15]
          break;
 800ff0c:	e018      	b.n	800ff40 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ff0e:	6839      	ldr	r1, [r7, #0]
 800ff10:	6878      	ldr	r0, [r7, #4]
 800ff12:	f000 fc85 	bl	8010820 <USBD_GetConfig>
          break;
 800ff16:	e013      	b.n	800ff40 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ff18:	6839      	ldr	r1, [r7, #0]
 800ff1a:	6878      	ldr	r0, [r7, #4]
 800ff1c:	f000 fcb6 	bl	801088c <USBD_GetStatus>
          break;
 800ff20:	e00e      	b.n	800ff40 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ff22:	6839      	ldr	r1, [r7, #0]
 800ff24:	6878      	ldr	r0, [r7, #4]
 800ff26:	f000 fce5 	bl	80108f4 <USBD_SetFeature>
          break;
 800ff2a:	e009      	b.n	800ff40 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ff2c:	6839      	ldr	r1, [r7, #0]
 800ff2e:	6878      	ldr	r0, [r7, #4]
 800ff30:	f000 fd09 	bl	8010946 <USBD_ClrFeature>
          break;
 800ff34:	e004      	b.n	800ff40 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ff36:	6839      	ldr	r1, [r7, #0]
 800ff38:	6878      	ldr	r0, [r7, #4]
 800ff3a:	f000 fd60 	bl	80109fe <USBD_CtlError>
          break;
 800ff3e:	bf00      	nop
      }
      break;
 800ff40:	e004      	b.n	800ff4c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ff42:	6839      	ldr	r1, [r7, #0]
 800ff44:	6878      	ldr	r0, [r7, #4]
 800ff46:	f000 fd5a 	bl	80109fe <USBD_CtlError>
      break;
 800ff4a:	bf00      	nop
  }

  return ret;
 800ff4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff4e:	4618      	mov	r0, r3
 800ff50:	3710      	adds	r7, #16
 800ff52:	46bd      	mov	sp, r7
 800ff54:	bd80      	pop	{r7, pc}
 800ff56:	bf00      	nop

0800ff58 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b084      	sub	sp, #16
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	6078      	str	r0, [r7, #4]
 800ff60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ff62:	2300      	movs	r3, #0
 800ff64:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ff66:	683b      	ldr	r3, [r7, #0]
 800ff68:	781b      	ldrb	r3, [r3, #0]
 800ff6a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ff6e:	2b40      	cmp	r3, #64	@ 0x40
 800ff70:	d005      	beq.n	800ff7e <USBD_StdItfReq+0x26>
 800ff72:	2b40      	cmp	r3, #64	@ 0x40
 800ff74:	d852      	bhi.n	801001c <USBD_StdItfReq+0xc4>
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d001      	beq.n	800ff7e <USBD_StdItfReq+0x26>
 800ff7a:	2b20      	cmp	r3, #32
 800ff7c:	d14e      	bne.n	801001c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ff84:	b2db      	uxtb	r3, r3
 800ff86:	3b01      	subs	r3, #1
 800ff88:	2b02      	cmp	r3, #2
 800ff8a:	d840      	bhi.n	801000e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ff8c:	683b      	ldr	r3, [r7, #0]
 800ff8e:	889b      	ldrh	r3, [r3, #4]
 800ff90:	b2db      	uxtb	r3, r3
 800ff92:	2b01      	cmp	r3, #1
 800ff94:	d836      	bhi.n	8010004 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ff96:	683b      	ldr	r3, [r7, #0]
 800ff98:	889b      	ldrh	r3, [r3, #4]
 800ff9a:	b2db      	uxtb	r3, r3
 800ff9c:	4619      	mov	r1, r3
 800ff9e:	6878      	ldr	r0, [r7, #4]
 800ffa0:	f7ff fedc 	bl	800fd5c <USBD_CoreFindIF>
 800ffa4:	4603      	mov	r3, r0
 800ffa6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ffa8:	7bbb      	ldrb	r3, [r7, #14]
 800ffaa:	2bff      	cmp	r3, #255	@ 0xff
 800ffac:	d01d      	beq.n	800ffea <USBD_StdItfReq+0x92>
 800ffae:	7bbb      	ldrb	r3, [r7, #14]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d11a      	bne.n	800ffea <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ffb4:	7bba      	ldrb	r2, [r7, #14]
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	32ae      	adds	r2, #174	@ 0xae
 800ffba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ffbe:	689b      	ldr	r3, [r3, #8]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d00f      	beq.n	800ffe4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ffc4:	7bba      	ldrb	r2, [r7, #14]
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ffcc:	7bba      	ldrb	r2, [r7, #14]
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	32ae      	adds	r2, #174	@ 0xae
 800ffd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ffd6:	689b      	ldr	r3, [r3, #8]
 800ffd8:	6839      	ldr	r1, [r7, #0]
 800ffda:	6878      	ldr	r0, [r7, #4]
 800ffdc:	4798      	blx	r3
 800ffde:	4603      	mov	r3, r0
 800ffe0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ffe2:	e004      	b.n	800ffee <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ffe4:	2303      	movs	r3, #3
 800ffe6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ffe8:	e001      	b.n	800ffee <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ffea:	2303      	movs	r3, #3
 800ffec:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ffee:	683b      	ldr	r3, [r7, #0]
 800fff0:	88db      	ldrh	r3, [r3, #6]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d110      	bne.n	8010018 <USBD_StdItfReq+0xc0>
 800fff6:	7bfb      	ldrb	r3, [r7, #15]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d10d      	bne.n	8010018 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800fffc:	6878      	ldr	r0, [r7, #4]
 800fffe:	f000 fddc 	bl	8010bba <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8010002:	e009      	b.n	8010018 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8010004:	6839      	ldr	r1, [r7, #0]
 8010006:	6878      	ldr	r0, [r7, #4]
 8010008:	f000 fcf9 	bl	80109fe <USBD_CtlError>
          break;
 801000c:	e004      	b.n	8010018 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801000e:	6839      	ldr	r1, [r7, #0]
 8010010:	6878      	ldr	r0, [r7, #4]
 8010012:	f000 fcf4 	bl	80109fe <USBD_CtlError>
          break;
 8010016:	e000      	b.n	801001a <USBD_StdItfReq+0xc2>
          break;
 8010018:	bf00      	nop
      }
      break;
 801001a:	e004      	b.n	8010026 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 801001c:	6839      	ldr	r1, [r7, #0]
 801001e:	6878      	ldr	r0, [r7, #4]
 8010020:	f000 fced 	bl	80109fe <USBD_CtlError>
      break;
 8010024:	bf00      	nop
  }

  return ret;
 8010026:	7bfb      	ldrb	r3, [r7, #15]
}
 8010028:	4618      	mov	r0, r3
 801002a:	3710      	adds	r7, #16
 801002c:	46bd      	mov	sp, r7
 801002e:	bd80      	pop	{r7, pc}

08010030 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010030:	b580      	push	{r7, lr}
 8010032:	b084      	sub	sp, #16
 8010034:	af00      	add	r7, sp, #0
 8010036:	6078      	str	r0, [r7, #4]
 8010038:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801003a:	2300      	movs	r3, #0
 801003c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801003e:	683b      	ldr	r3, [r7, #0]
 8010040:	889b      	ldrh	r3, [r3, #4]
 8010042:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010044:	683b      	ldr	r3, [r7, #0]
 8010046:	781b      	ldrb	r3, [r3, #0]
 8010048:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801004c:	2b40      	cmp	r3, #64	@ 0x40
 801004e:	d007      	beq.n	8010060 <USBD_StdEPReq+0x30>
 8010050:	2b40      	cmp	r3, #64	@ 0x40
 8010052:	f200 8181 	bhi.w	8010358 <USBD_StdEPReq+0x328>
 8010056:	2b00      	cmp	r3, #0
 8010058:	d02a      	beq.n	80100b0 <USBD_StdEPReq+0x80>
 801005a:	2b20      	cmp	r3, #32
 801005c:	f040 817c 	bne.w	8010358 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8010060:	7bbb      	ldrb	r3, [r7, #14]
 8010062:	4619      	mov	r1, r3
 8010064:	6878      	ldr	r0, [r7, #4]
 8010066:	f7ff fe86 	bl	800fd76 <USBD_CoreFindEP>
 801006a:	4603      	mov	r3, r0
 801006c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801006e:	7b7b      	ldrb	r3, [r7, #13]
 8010070:	2bff      	cmp	r3, #255	@ 0xff
 8010072:	f000 8176 	beq.w	8010362 <USBD_StdEPReq+0x332>
 8010076:	7b7b      	ldrb	r3, [r7, #13]
 8010078:	2b00      	cmp	r3, #0
 801007a:	f040 8172 	bne.w	8010362 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 801007e:	7b7a      	ldrb	r2, [r7, #13]
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8010086:	7b7a      	ldrb	r2, [r7, #13]
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	32ae      	adds	r2, #174	@ 0xae
 801008c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010090:	689b      	ldr	r3, [r3, #8]
 8010092:	2b00      	cmp	r3, #0
 8010094:	f000 8165 	beq.w	8010362 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8010098:	7b7a      	ldrb	r2, [r7, #13]
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	32ae      	adds	r2, #174	@ 0xae
 801009e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100a2:	689b      	ldr	r3, [r3, #8]
 80100a4:	6839      	ldr	r1, [r7, #0]
 80100a6:	6878      	ldr	r0, [r7, #4]
 80100a8:	4798      	blx	r3
 80100aa:	4603      	mov	r3, r0
 80100ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80100ae:	e158      	b.n	8010362 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80100b0:	683b      	ldr	r3, [r7, #0]
 80100b2:	785b      	ldrb	r3, [r3, #1]
 80100b4:	2b03      	cmp	r3, #3
 80100b6:	d008      	beq.n	80100ca <USBD_StdEPReq+0x9a>
 80100b8:	2b03      	cmp	r3, #3
 80100ba:	f300 8147 	bgt.w	801034c <USBD_StdEPReq+0x31c>
 80100be:	2b00      	cmp	r3, #0
 80100c0:	f000 809b 	beq.w	80101fa <USBD_StdEPReq+0x1ca>
 80100c4:	2b01      	cmp	r3, #1
 80100c6:	d03c      	beq.n	8010142 <USBD_StdEPReq+0x112>
 80100c8:	e140      	b.n	801034c <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80100d0:	b2db      	uxtb	r3, r3
 80100d2:	2b02      	cmp	r3, #2
 80100d4:	d002      	beq.n	80100dc <USBD_StdEPReq+0xac>
 80100d6:	2b03      	cmp	r3, #3
 80100d8:	d016      	beq.n	8010108 <USBD_StdEPReq+0xd8>
 80100da:	e02c      	b.n	8010136 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80100dc:	7bbb      	ldrb	r3, [r7, #14]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d00d      	beq.n	80100fe <USBD_StdEPReq+0xce>
 80100e2:	7bbb      	ldrb	r3, [r7, #14]
 80100e4:	2b80      	cmp	r3, #128	@ 0x80
 80100e6:	d00a      	beq.n	80100fe <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80100e8:	7bbb      	ldrb	r3, [r7, #14]
 80100ea:	4619      	mov	r1, r3
 80100ec:	6878      	ldr	r0, [r7, #4]
 80100ee:	f001 f98f 	bl	8011410 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80100f2:	2180      	movs	r1, #128	@ 0x80
 80100f4:	6878      	ldr	r0, [r7, #4]
 80100f6:	f001 f98b 	bl	8011410 <USBD_LL_StallEP>
 80100fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80100fc:	e020      	b.n	8010140 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80100fe:	6839      	ldr	r1, [r7, #0]
 8010100:	6878      	ldr	r0, [r7, #4]
 8010102:	f000 fc7c 	bl	80109fe <USBD_CtlError>
              break;
 8010106:	e01b      	b.n	8010140 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010108:	683b      	ldr	r3, [r7, #0]
 801010a:	885b      	ldrh	r3, [r3, #2]
 801010c:	2b00      	cmp	r3, #0
 801010e:	d10e      	bne.n	801012e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010110:	7bbb      	ldrb	r3, [r7, #14]
 8010112:	2b00      	cmp	r3, #0
 8010114:	d00b      	beq.n	801012e <USBD_StdEPReq+0xfe>
 8010116:	7bbb      	ldrb	r3, [r7, #14]
 8010118:	2b80      	cmp	r3, #128	@ 0x80
 801011a:	d008      	beq.n	801012e <USBD_StdEPReq+0xfe>
 801011c:	683b      	ldr	r3, [r7, #0]
 801011e:	88db      	ldrh	r3, [r3, #6]
 8010120:	2b00      	cmp	r3, #0
 8010122:	d104      	bne.n	801012e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8010124:	7bbb      	ldrb	r3, [r7, #14]
 8010126:	4619      	mov	r1, r3
 8010128:	6878      	ldr	r0, [r7, #4]
 801012a:	f001 f971 	bl	8011410 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801012e:	6878      	ldr	r0, [r7, #4]
 8010130:	f000 fd43 	bl	8010bba <USBD_CtlSendStatus>

              break;
 8010134:	e004      	b.n	8010140 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8010136:	6839      	ldr	r1, [r7, #0]
 8010138:	6878      	ldr	r0, [r7, #4]
 801013a:	f000 fc60 	bl	80109fe <USBD_CtlError>
              break;
 801013e:	bf00      	nop
          }
          break;
 8010140:	e109      	b.n	8010356 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010148:	b2db      	uxtb	r3, r3
 801014a:	2b02      	cmp	r3, #2
 801014c:	d002      	beq.n	8010154 <USBD_StdEPReq+0x124>
 801014e:	2b03      	cmp	r3, #3
 8010150:	d016      	beq.n	8010180 <USBD_StdEPReq+0x150>
 8010152:	e04b      	b.n	80101ec <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010154:	7bbb      	ldrb	r3, [r7, #14]
 8010156:	2b00      	cmp	r3, #0
 8010158:	d00d      	beq.n	8010176 <USBD_StdEPReq+0x146>
 801015a:	7bbb      	ldrb	r3, [r7, #14]
 801015c:	2b80      	cmp	r3, #128	@ 0x80
 801015e:	d00a      	beq.n	8010176 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010160:	7bbb      	ldrb	r3, [r7, #14]
 8010162:	4619      	mov	r1, r3
 8010164:	6878      	ldr	r0, [r7, #4]
 8010166:	f001 f953 	bl	8011410 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801016a:	2180      	movs	r1, #128	@ 0x80
 801016c:	6878      	ldr	r0, [r7, #4]
 801016e:	f001 f94f 	bl	8011410 <USBD_LL_StallEP>
 8010172:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010174:	e040      	b.n	80101f8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8010176:	6839      	ldr	r1, [r7, #0]
 8010178:	6878      	ldr	r0, [r7, #4]
 801017a:	f000 fc40 	bl	80109fe <USBD_CtlError>
              break;
 801017e:	e03b      	b.n	80101f8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010180:	683b      	ldr	r3, [r7, #0]
 8010182:	885b      	ldrh	r3, [r3, #2]
 8010184:	2b00      	cmp	r3, #0
 8010186:	d136      	bne.n	80101f6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8010188:	7bbb      	ldrb	r3, [r7, #14]
 801018a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801018e:	2b00      	cmp	r3, #0
 8010190:	d004      	beq.n	801019c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8010192:	7bbb      	ldrb	r3, [r7, #14]
 8010194:	4619      	mov	r1, r3
 8010196:	6878      	ldr	r0, [r7, #4]
 8010198:	f001 f959 	bl	801144e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801019c:	6878      	ldr	r0, [r7, #4]
 801019e:	f000 fd0c 	bl	8010bba <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80101a2:	7bbb      	ldrb	r3, [r7, #14]
 80101a4:	4619      	mov	r1, r3
 80101a6:	6878      	ldr	r0, [r7, #4]
 80101a8:	f7ff fde5 	bl	800fd76 <USBD_CoreFindEP>
 80101ac:	4603      	mov	r3, r0
 80101ae:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80101b0:	7b7b      	ldrb	r3, [r7, #13]
 80101b2:	2bff      	cmp	r3, #255	@ 0xff
 80101b4:	d01f      	beq.n	80101f6 <USBD_StdEPReq+0x1c6>
 80101b6:	7b7b      	ldrb	r3, [r7, #13]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d11c      	bne.n	80101f6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80101bc:	7b7a      	ldrb	r2, [r7, #13]
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80101c4:	7b7a      	ldrb	r2, [r7, #13]
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	32ae      	adds	r2, #174	@ 0xae
 80101ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101ce:	689b      	ldr	r3, [r3, #8]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d010      	beq.n	80101f6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80101d4:	7b7a      	ldrb	r2, [r7, #13]
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	32ae      	adds	r2, #174	@ 0xae
 80101da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101de:	689b      	ldr	r3, [r3, #8]
 80101e0:	6839      	ldr	r1, [r7, #0]
 80101e2:	6878      	ldr	r0, [r7, #4]
 80101e4:	4798      	blx	r3
 80101e6:	4603      	mov	r3, r0
 80101e8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80101ea:	e004      	b.n	80101f6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80101ec:	6839      	ldr	r1, [r7, #0]
 80101ee:	6878      	ldr	r0, [r7, #4]
 80101f0:	f000 fc05 	bl	80109fe <USBD_CtlError>
              break;
 80101f4:	e000      	b.n	80101f8 <USBD_StdEPReq+0x1c8>
              break;
 80101f6:	bf00      	nop
          }
          break;
 80101f8:	e0ad      	b.n	8010356 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010200:	b2db      	uxtb	r3, r3
 8010202:	2b02      	cmp	r3, #2
 8010204:	d002      	beq.n	801020c <USBD_StdEPReq+0x1dc>
 8010206:	2b03      	cmp	r3, #3
 8010208:	d033      	beq.n	8010272 <USBD_StdEPReq+0x242>
 801020a:	e099      	b.n	8010340 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801020c:	7bbb      	ldrb	r3, [r7, #14]
 801020e:	2b00      	cmp	r3, #0
 8010210:	d007      	beq.n	8010222 <USBD_StdEPReq+0x1f2>
 8010212:	7bbb      	ldrb	r3, [r7, #14]
 8010214:	2b80      	cmp	r3, #128	@ 0x80
 8010216:	d004      	beq.n	8010222 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8010218:	6839      	ldr	r1, [r7, #0]
 801021a:	6878      	ldr	r0, [r7, #4]
 801021c:	f000 fbef 	bl	80109fe <USBD_CtlError>
                break;
 8010220:	e093      	b.n	801034a <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010222:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010226:	2b00      	cmp	r3, #0
 8010228:	da0b      	bge.n	8010242 <USBD_StdEPReq+0x212>
 801022a:	7bbb      	ldrb	r3, [r7, #14]
 801022c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010230:	4613      	mov	r3, r2
 8010232:	009b      	lsls	r3, r3, #2
 8010234:	4413      	add	r3, r2
 8010236:	009b      	lsls	r3, r3, #2
 8010238:	3310      	adds	r3, #16
 801023a:	687a      	ldr	r2, [r7, #4]
 801023c:	4413      	add	r3, r2
 801023e:	3304      	adds	r3, #4
 8010240:	e00b      	b.n	801025a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010242:	7bbb      	ldrb	r3, [r7, #14]
 8010244:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010248:	4613      	mov	r3, r2
 801024a:	009b      	lsls	r3, r3, #2
 801024c:	4413      	add	r3, r2
 801024e:	009b      	lsls	r3, r3, #2
 8010250:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010254:	687a      	ldr	r2, [r7, #4]
 8010256:	4413      	add	r3, r2
 8010258:	3304      	adds	r3, #4
 801025a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801025c:	68bb      	ldr	r3, [r7, #8]
 801025e:	2200      	movs	r2, #0
 8010260:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010262:	68bb      	ldr	r3, [r7, #8]
 8010264:	330e      	adds	r3, #14
 8010266:	2202      	movs	r2, #2
 8010268:	4619      	mov	r1, r3
 801026a:	6878      	ldr	r0, [r7, #4]
 801026c:	f000 fc44 	bl	8010af8 <USBD_CtlSendData>
              break;
 8010270:	e06b      	b.n	801034a <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8010272:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010276:	2b00      	cmp	r3, #0
 8010278:	da11      	bge.n	801029e <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801027a:	7bbb      	ldrb	r3, [r7, #14]
 801027c:	f003 020f 	and.w	r2, r3, #15
 8010280:	6879      	ldr	r1, [r7, #4]
 8010282:	4613      	mov	r3, r2
 8010284:	009b      	lsls	r3, r3, #2
 8010286:	4413      	add	r3, r2
 8010288:	009b      	lsls	r3, r3, #2
 801028a:	440b      	add	r3, r1
 801028c:	3323      	adds	r3, #35	@ 0x23
 801028e:	781b      	ldrb	r3, [r3, #0]
 8010290:	2b00      	cmp	r3, #0
 8010292:	d117      	bne.n	80102c4 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8010294:	6839      	ldr	r1, [r7, #0]
 8010296:	6878      	ldr	r0, [r7, #4]
 8010298:	f000 fbb1 	bl	80109fe <USBD_CtlError>
                  break;
 801029c:	e055      	b.n	801034a <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801029e:	7bbb      	ldrb	r3, [r7, #14]
 80102a0:	f003 020f 	and.w	r2, r3, #15
 80102a4:	6879      	ldr	r1, [r7, #4]
 80102a6:	4613      	mov	r3, r2
 80102a8:	009b      	lsls	r3, r3, #2
 80102aa:	4413      	add	r3, r2
 80102ac:	009b      	lsls	r3, r3, #2
 80102ae:	440b      	add	r3, r1
 80102b0:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80102b4:	781b      	ldrb	r3, [r3, #0]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d104      	bne.n	80102c4 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80102ba:	6839      	ldr	r1, [r7, #0]
 80102bc:	6878      	ldr	r0, [r7, #4]
 80102be:	f000 fb9e 	bl	80109fe <USBD_CtlError>
                  break;
 80102c2:	e042      	b.n	801034a <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80102c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	da0b      	bge.n	80102e4 <USBD_StdEPReq+0x2b4>
 80102cc:	7bbb      	ldrb	r3, [r7, #14]
 80102ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80102d2:	4613      	mov	r3, r2
 80102d4:	009b      	lsls	r3, r3, #2
 80102d6:	4413      	add	r3, r2
 80102d8:	009b      	lsls	r3, r3, #2
 80102da:	3310      	adds	r3, #16
 80102dc:	687a      	ldr	r2, [r7, #4]
 80102de:	4413      	add	r3, r2
 80102e0:	3304      	adds	r3, #4
 80102e2:	e00b      	b.n	80102fc <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80102e4:	7bbb      	ldrb	r3, [r7, #14]
 80102e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80102ea:	4613      	mov	r3, r2
 80102ec:	009b      	lsls	r3, r3, #2
 80102ee:	4413      	add	r3, r2
 80102f0:	009b      	lsls	r3, r3, #2
 80102f2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80102f6:	687a      	ldr	r2, [r7, #4]
 80102f8:	4413      	add	r3, r2
 80102fa:	3304      	adds	r3, #4
 80102fc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80102fe:	7bbb      	ldrb	r3, [r7, #14]
 8010300:	2b00      	cmp	r3, #0
 8010302:	d002      	beq.n	801030a <USBD_StdEPReq+0x2da>
 8010304:	7bbb      	ldrb	r3, [r7, #14]
 8010306:	2b80      	cmp	r3, #128	@ 0x80
 8010308:	d103      	bne.n	8010312 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 801030a:	68bb      	ldr	r3, [r7, #8]
 801030c:	2200      	movs	r2, #0
 801030e:	739a      	strb	r2, [r3, #14]
 8010310:	e00e      	b.n	8010330 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010312:	7bbb      	ldrb	r3, [r7, #14]
 8010314:	4619      	mov	r1, r3
 8010316:	6878      	ldr	r0, [r7, #4]
 8010318:	f001 f8b8 	bl	801148c <USBD_LL_IsStallEP>
 801031c:	4603      	mov	r3, r0
 801031e:	2b00      	cmp	r3, #0
 8010320:	d003      	beq.n	801032a <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8010322:	68bb      	ldr	r3, [r7, #8]
 8010324:	2201      	movs	r2, #1
 8010326:	739a      	strb	r2, [r3, #14]
 8010328:	e002      	b.n	8010330 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 801032a:	68bb      	ldr	r3, [r7, #8]
 801032c:	2200      	movs	r2, #0
 801032e:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010330:	68bb      	ldr	r3, [r7, #8]
 8010332:	330e      	adds	r3, #14
 8010334:	2202      	movs	r2, #2
 8010336:	4619      	mov	r1, r3
 8010338:	6878      	ldr	r0, [r7, #4]
 801033a:	f000 fbdd 	bl	8010af8 <USBD_CtlSendData>
              break;
 801033e:	e004      	b.n	801034a <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8010340:	6839      	ldr	r1, [r7, #0]
 8010342:	6878      	ldr	r0, [r7, #4]
 8010344:	f000 fb5b 	bl	80109fe <USBD_CtlError>
              break;
 8010348:	bf00      	nop
          }
          break;
 801034a:	e004      	b.n	8010356 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 801034c:	6839      	ldr	r1, [r7, #0]
 801034e:	6878      	ldr	r0, [r7, #4]
 8010350:	f000 fb55 	bl	80109fe <USBD_CtlError>
          break;
 8010354:	bf00      	nop
      }
      break;
 8010356:	e005      	b.n	8010364 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8010358:	6839      	ldr	r1, [r7, #0]
 801035a:	6878      	ldr	r0, [r7, #4]
 801035c:	f000 fb4f 	bl	80109fe <USBD_CtlError>
      break;
 8010360:	e000      	b.n	8010364 <USBD_StdEPReq+0x334>
      break;
 8010362:	bf00      	nop
  }

  return ret;
 8010364:	7bfb      	ldrb	r3, [r7, #15]
}
 8010366:	4618      	mov	r0, r3
 8010368:	3710      	adds	r7, #16
 801036a:	46bd      	mov	sp, r7
 801036c:	bd80      	pop	{r7, pc}
	...

08010370 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010370:	b580      	push	{r7, lr}
 8010372:	b084      	sub	sp, #16
 8010374:	af00      	add	r7, sp, #0
 8010376:	6078      	str	r0, [r7, #4]
 8010378:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801037a:	2300      	movs	r3, #0
 801037c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801037e:	2300      	movs	r3, #0
 8010380:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8010382:	2300      	movs	r3, #0
 8010384:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8010386:	683b      	ldr	r3, [r7, #0]
 8010388:	885b      	ldrh	r3, [r3, #2]
 801038a:	0a1b      	lsrs	r3, r3, #8
 801038c:	b29b      	uxth	r3, r3
 801038e:	3b01      	subs	r3, #1
 8010390:	2b06      	cmp	r3, #6
 8010392:	f200 8128 	bhi.w	80105e6 <USBD_GetDescriptor+0x276>
 8010396:	a201      	add	r2, pc, #4	@ (adr r2, 801039c <USBD_GetDescriptor+0x2c>)
 8010398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801039c:	080103b9 	.word	0x080103b9
 80103a0:	080103d1 	.word	0x080103d1
 80103a4:	08010411 	.word	0x08010411
 80103a8:	080105e7 	.word	0x080105e7
 80103ac:	080105e7 	.word	0x080105e7
 80103b0:	08010587 	.word	0x08010587
 80103b4:	080105b3 	.word	0x080105b3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	687a      	ldr	r2, [r7, #4]
 80103c2:	7c12      	ldrb	r2, [r2, #16]
 80103c4:	f107 0108 	add.w	r1, r7, #8
 80103c8:	4610      	mov	r0, r2
 80103ca:	4798      	blx	r3
 80103cc:	60f8      	str	r0, [r7, #12]
      break;
 80103ce:	e112      	b.n	80105f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	7c1b      	ldrb	r3, [r3, #16]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d10d      	bne.n	80103f4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80103de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80103e0:	f107 0208 	add.w	r2, r7, #8
 80103e4:	4610      	mov	r0, r2
 80103e6:	4798      	blx	r3
 80103e8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	3301      	adds	r3, #1
 80103ee:	2202      	movs	r2, #2
 80103f0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80103f2:	e100      	b.n	80105f6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80103fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80103fc:	f107 0208 	add.w	r2, r7, #8
 8010400:	4610      	mov	r0, r2
 8010402:	4798      	blx	r3
 8010404:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	3301      	adds	r3, #1
 801040a:	2202      	movs	r2, #2
 801040c:	701a      	strb	r2, [r3, #0]
      break;
 801040e:	e0f2      	b.n	80105f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8010410:	683b      	ldr	r3, [r7, #0]
 8010412:	885b      	ldrh	r3, [r3, #2]
 8010414:	b2db      	uxtb	r3, r3
 8010416:	2b05      	cmp	r3, #5
 8010418:	f200 80ac 	bhi.w	8010574 <USBD_GetDescriptor+0x204>
 801041c:	a201      	add	r2, pc, #4	@ (adr r2, 8010424 <USBD_GetDescriptor+0xb4>)
 801041e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010422:	bf00      	nop
 8010424:	0801043d 	.word	0x0801043d
 8010428:	08010471 	.word	0x08010471
 801042c:	080104a5 	.word	0x080104a5
 8010430:	080104d9 	.word	0x080104d9
 8010434:	0801050d 	.word	0x0801050d
 8010438:	08010541 	.word	0x08010541
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010442:	685b      	ldr	r3, [r3, #4]
 8010444:	2b00      	cmp	r3, #0
 8010446:	d00b      	beq.n	8010460 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801044e:	685b      	ldr	r3, [r3, #4]
 8010450:	687a      	ldr	r2, [r7, #4]
 8010452:	7c12      	ldrb	r2, [r2, #16]
 8010454:	f107 0108 	add.w	r1, r7, #8
 8010458:	4610      	mov	r0, r2
 801045a:	4798      	blx	r3
 801045c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801045e:	e091      	b.n	8010584 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010460:	6839      	ldr	r1, [r7, #0]
 8010462:	6878      	ldr	r0, [r7, #4]
 8010464:	f000 facb 	bl	80109fe <USBD_CtlError>
            err++;
 8010468:	7afb      	ldrb	r3, [r7, #11]
 801046a:	3301      	adds	r3, #1
 801046c:	72fb      	strb	r3, [r7, #11]
          break;
 801046e:	e089      	b.n	8010584 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010476:	689b      	ldr	r3, [r3, #8]
 8010478:	2b00      	cmp	r3, #0
 801047a:	d00b      	beq.n	8010494 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010482:	689b      	ldr	r3, [r3, #8]
 8010484:	687a      	ldr	r2, [r7, #4]
 8010486:	7c12      	ldrb	r2, [r2, #16]
 8010488:	f107 0108 	add.w	r1, r7, #8
 801048c:	4610      	mov	r0, r2
 801048e:	4798      	blx	r3
 8010490:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010492:	e077      	b.n	8010584 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010494:	6839      	ldr	r1, [r7, #0]
 8010496:	6878      	ldr	r0, [r7, #4]
 8010498:	f000 fab1 	bl	80109fe <USBD_CtlError>
            err++;
 801049c:	7afb      	ldrb	r3, [r7, #11]
 801049e:	3301      	adds	r3, #1
 80104a0:	72fb      	strb	r3, [r7, #11]
          break;
 80104a2:	e06f      	b.n	8010584 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80104aa:	68db      	ldr	r3, [r3, #12]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d00b      	beq.n	80104c8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80104b6:	68db      	ldr	r3, [r3, #12]
 80104b8:	687a      	ldr	r2, [r7, #4]
 80104ba:	7c12      	ldrb	r2, [r2, #16]
 80104bc:	f107 0108 	add.w	r1, r7, #8
 80104c0:	4610      	mov	r0, r2
 80104c2:	4798      	blx	r3
 80104c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80104c6:	e05d      	b.n	8010584 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80104c8:	6839      	ldr	r1, [r7, #0]
 80104ca:	6878      	ldr	r0, [r7, #4]
 80104cc:	f000 fa97 	bl	80109fe <USBD_CtlError>
            err++;
 80104d0:	7afb      	ldrb	r3, [r7, #11]
 80104d2:	3301      	adds	r3, #1
 80104d4:	72fb      	strb	r3, [r7, #11]
          break;
 80104d6:	e055      	b.n	8010584 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80104de:	691b      	ldr	r3, [r3, #16]
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d00b      	beq.n	80104fc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80104ea:	691b      	ldr	r3, [r3, #16]
 80104ec:	687a      	ldr	r2, [r7, #4]
 80104ee:	7c12      	ldrb	r2, [r2, #16]
 80104f0:	f107 0108 	add.w	r1, r7, #8
 80104f4:	4610      	mov	r0, r2
 80104f6:	4798      	blx	r3
 80104f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80104fa:	e043      	b.n	8010584 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80104fc:	6839      	ldr	r1, [r7, #0]
 80104fe:	6878      	ldr	r0, [r7, #4]
 8010500:	f000 fa7d 	bl	80109fe <USBD_CtlError>
            err++;
 8010504:	7afb      	ldrb	r3, [r7, #11]
 8010506:	3301      	adds	r3, #1
 8010508:	72fb      	strb	r3, [r7, #11]
          break;
 801050a:	e03b      	b.n	8010584 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010512:	695b      	ldr	r3, [r3, #20]
 8010514:	2b00      	cmp	r3, #0
 8010516:	d00b      	beq.n	8010530 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801051e:	695b      	ldr	r3, [r3, #20]
 8010520:	687a      	ldr	r2, [r7, #4]
 8010522:	7c12      	ldrb	r2, [r2, #16]
 8010524:	f107 0108 	add.w	r1, r7, #8
 8010528:	4610      	mov	r0, r2
 801052a:	4798      	blx	r3
 801052c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801052e:	e029      	b.n	8010584 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010530:	6839      	ldr	r1, [r7, #0]
 8010532:	6878      	ldr	r0, [r7, #4]
 8010534:	f000 fa63 	bl	80109fe <USBD_CtlError>
            err++;
 8010538:	7afb      	ldrb	r3, [r7, #11]
 801053a:	3301      	adds	r3, #1
 801053c:	72fb      	strb	r3, [r7, #11]
          break;
 801053e:	e021      	b.n	8010584 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010546:	699b      	ldr	r3, [r3, #24]
 8010548:	2b00      	cmp	r3, #0
 801054a:	d00b      	beq.n	8010564 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010552:	699b      	ldr	r3, [r3, #24]
 8010554:	687a      	ldr	r2, [r7, #4]
 8010556:	7c12      	ldrb	r2, [r2, #16]
 8010558:	f107 0108 	add.w	r1, r7, #8
 801055c:	4610      	mov	r0, r2
 801055e:	4798      	blx	r3
 8010560:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010562:	e00f      	b.n	8010584 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010564:	6839      	ldr	r1, [r7, #0]
 8010566:	6878      	ldr	r0, [r7, #4]
 8010568:	f000 fa49 	bl	80109fe <USBD_CtlError>
            err++;
 801056c:	7afb      	ldrb	r3, [r7, #11]
 801056e:	3301      	adds	r3, #1
 8010570:	72fb      	strb	r3, [r7, #11]
          break;
 8010572:	e007      	b.n	8010584 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8010574:	6839      	ldr	r1, [r7, #0]
 8010576:	6878      	ldr	r0, [r7, #4]
 8010578:	f000 fa41 	bl	80109fe <USBD_CtlError>
          err++;
 801057c:	7afb      	ldrb	r3, [r7, #11]
 801057e:	3301      	adds	r3, #1
 8010580:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8010582:	bf00      	nop
      }
      break;
 8010584:	e037      	b.n	80105f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	7c1b      	ldrb	r3, [r3, #16]
 801058a:	2b00      	cmp	r3, #0
 801058c:	d109      	bne.n	80105a2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010594:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010596:	f107 0208 	add.w	r2, r7, #8
 801059a:	4610      	mov	r0, r2
 801059c:	4798      	blx	r3
 801059e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80105a0:	e029      	b.n	80105f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80105a2:	6839      	ldr	r1, [r7, #0]
 80105a4:	6878      	ldr	r0, [r7, #4]
 80105a6:	f000 fa2a 	bl	80109fe <USBD_CtlError>
        err++;
 80105aa:	7afb      	ldrb	r3, [r7, #11]
 80105ac:	3301      	adds	r3, #1
 80105ae:	72fb      	strb	r3, [r7, #11]
      break;
 80105b0:	e021      	b.n	80105f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	7c1b      	ldrb	r3, [r3, #16]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d10d      	bne.n	80105d6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80105c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80105c2:	f107 0208 	add.w	r2, r7, #8
 80105c6:	4610      	mov	r0, r2
 80105c8:	4798      	blx	r3
 80105ca:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	3301      	adds	r3, #1
 80105d0:	2207      	movs	r2, #7
 80105d2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80105d4:	e00f      	b.n	80105f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80105d6:	6839      	ldr	r1, [r7, #0]
 80105d8:	6878      	ldr	r0, [r7, #4]
 80105da:	f000 fa10 	bl	80109fe <USBD_CtlError>
        err++;
 80105de:	7afb      	ldrb	r3, [r7, #11]
 80105e0:	3301      	adds	r3, #1
 80105e2:	72fb      	strb	r3, [r7, #11]
      break;
 80105e4:	e007      	b.n	80105f6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80105e6:	6839      	ldr	r1, [r7, #0]
 80105e8:	6878      	ldr	r0, [r7, #4]
 80105ea:	f000 fa08 	bl	80109fe <USBD_CtlError>
      err++;
 80105ee:	7afb      	ldrb	r3, [r7, #11]
 80105f0:	3301      	adds	r3, #1
 80105f2:	72fb      	strb	r3, [r7, #11]
      break;
 80105f4:	bf00      	nop
  }

  if (err != 0U)
 80105f6:	7afb      	ldrb	r3, [r7, #11]
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d11e      	bne.n	801063a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80105fc:	683b      	ldr	r3, [r7, #0]
 80105fe:	88db      	ldrh	r3, [r3, #6]
 8010600:	2b00      	cmp	r3, #0
 8010602:	d016      	beq.n	8010632 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8010604:	893b      	ldrh	r3, [r7, #8]
 8010606:	2b00      	cmp	r3, #0
 8010608:	d00e      	beq.n	8010628 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 801060a:	683b      	ldr	r3, [r7, #0]
 801060c:	88da      	ldrh	r2, [r3, #6]
 801060e:	893b      	ldrh	r3, [r7, #8]
 8010610:	4293      	cmp	r3, r2
 8010612:	bf28      	it	cs
 8010614:	4613      	movcs	r3, r2
 8010616:	b29b      	uxth	r3, r3
 8010618:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801061a:	893b      	ldrh	r3, [r7, #8]
 801061c:	461a      	mov	r2, r3
 801061e:	68f9      	ldr	r1, [r7, #12]
 8010620:	6878      	ldr	r0, [r7, #4]
 8010622:	f000 fa69 	bl	8010af8 <USBD_CtlSendData>
 8010626:	e009      	b.n	801063c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8010628:	6839      	ldr	r1, [r7, #0]
 801062a:	6878      	ldr	r0, [r7, #4]
 801062c:	f000 f9e7 	bl	80109fe <USBD_CtlError>
 8010630:	e004      	b.n	801063c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8010632:	6878      	ldr	r0, [r7, #4]
 8010634:	f000 fac1 	bl	8010bba <USBD_CtlSendStatus>
 8010638:	e000      	b.n	801063c <USBD_GetDescriptor+0x2cc>
    return;
 801063a:	bf00      	nop
  }
}
 801063c:	3710      	adds	r7, #16
 801063e:	46bd      	mov	sp, r7
 8010640:	bd80      	pop	{r7, pc}
 8010642:	bf00      	nop

08010644 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010644:	b580      	push	{r7, lr}
 8010646:	b084      	sub	sp, #16
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
 801064c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801064e:	683b      	ldr	r3, [r7, #0]
 8010650:	889b      	ldrh	r3, [r3, #4]
 8010652:	2b00      	cmp	r3, #0
 8010654:	d131      	bne.n	80106ba <USBD_SetAddress+0x76>
 8010656:	683b      	ldr	r3, [r7, #0]
 8010658:	88db      	ldrh	r3, [r3, #6]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d12d      	bne.n	80106ba <USBD_SetAddress+0x76>
 801065e:	683b      	ldr	r3, [r7, #0]
 8010660:	885b      	ldrh	r3, [r3, #2]
 8010662:	2b7f      	cmp	r3, #127	@ 0x7f
 8010664:	d829      	bhi.n	80106ba <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010666:	683b      	ldr	r3, [r7, #0]
 8010668:	885b      	ldrh	r3, [r3, #2]
 801066a:	b2db      	uxtb	r3, r3
 801066c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010670:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010678:	b2db      	uxtb	r3, r3
 801067a:	2b03      	cmp	r3, #3
 801067c:	d104      	bne.n	8010688 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801067e:	6839      	ldr	r1, [r7, #0]
 8010680:	6878      	ldr	r0, [r7, #4]
 8010682:	f000 f9bc 	bl	80109fe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010686:	e01d      	b.n	80106c4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	7bfa      	ldrb	r2, [r7, #15]
 801068c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010690:	7bfb      	ldrb	r3, [r7, #15]
 8010692:	4619      	mov	r1, r3
 8010694:	6878      	ldr	r0, [r7, #4]
 8010696:	f000 ff25 	bl	80114e4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801069a:	6878      	ldr	r0, [r7, #4]
 801069c:	f000 fa8d 	bl	8010bba <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80106a0:	7bfb      	ldrb	r3, [r7, #15]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d004      	beq.n	80106b0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	2202      	movs	r2, #2
 80106aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80106ae:	e009      	b.n	80106c4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	2201      	movs	r2, #1
 80106b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80106b8:	e004      	b.n	80106c4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80106ba:	6839      	ldr	r1, [r7, #0]
 80106bc:	6878      	ldr	r0, [r7, #4]
 80106be:	f000 f99e 	bl	80109fe <USBD_CtlError>
  }
}
 80106c2:	bf00      	nop
 80106c4:	bf00      	nop
 80106c6:	3710      	adds	r7, #16
 80106c8:	46bd      	mov	sp, r7
 80106ca:	bd80      	pop	{r7, pc}

080106cc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80106cc:	b580      	push	{r7, lr}
 80106ce:	b084      	sub	sp, #16
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
 80106d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80106d6:	2300      	movs	r3, #0
 80106d8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80106da:	683b      	ldr	r3, [r7, #0]
 80106dc:	885b      	ldrh	r3, [r3, #2]
 80106de:	b2da      	uxtb	r2, r3
 80106e0:	4b4e      	ldr	r3, [pc, #312]	@ (801081c <USBD_SetConfig+0x150>)
 80106e2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80106e4:	4b4d      	ldr	r3, [pc, #308]	@ (801081c <USBD_SetConfig+0x150>)
 80106e6:	781b      	ldrb	r3, [r3, #0]
 80106e8:	2b01      	cmp	r3, #1
 80106ea:	d905      	bls.n	80106f8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80106ec:	6839      	ldr	r1, [r7, #0]
 80106ee:	6878      	ldr	r0, [r7, #4]
 80106f0:	f000 f985 	bl	80109fe <USBD_CtlError>
    return USBD_FAIL;
 80106f4:	2303      	movs	r3, #3
 80106f6:	e08c      	b.n	8010812 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80106fe:	b2db      	uxtb	r3, r3
 8010700:	2b02      	cmp	r3, #2
 8010702:	d002      	beq.n	801070a <USBD_SetConfig+0x3e>
 8010704:	2b03      	cmp	r3, #3
 8010706:	d029      	beq.n	801075c <USBD_SetConfig+0x90>
 8010708:	e075      	b.n	80107f6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801070a:	4b44      	ldr	r3, [pc, #272]	@ (801081c <USBD_SetConfig+0x150>)
 801070c:	781b      	ldrb	r3, [r3, #0]
 801070e:	2b00      	cmp	r3, #0
 8010710:	d020      	beq.n	8010754 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8010712:	4b42      	ldr	r3, [pc, #264]	@ (801081c <USBD_SetConfig+0x150>)
 8010714:	781b      	ldrb	r3, [r3, #0]
 8010716:	461a      	mov	r2, r3
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801071c:	4b3f      	ldr	r3, [pc, #252]	@ (801081c <USBD_SetConfig+0x150>)
 801071e:	781b      	ldrb	r3, [r3, #0]
 8010720:	4619      	mov	r1, r3
 8010722:	6878      	ldr	r0, [r7, #4]
 8010724:	f7fe ffcf 	bl	800f6c6 <USBD_SetClassConfig>
 8010728:	4603      	mov	r3, r0
 801072a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801072c:	7bfb      	ldrb	r3, [r7, #15]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d008      	beq.n	8010744 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8010732:	6839      	ldr	r1, [r7, #0]
 8010734:	6878      	ldr	r0, [r7, #4]
 8010736:	f000 f962 	bl	80109fe <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	2202      	movs	r2, #2
 801073e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010742:	e065      	b.n	8010810 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010744:	6878      	ldr	r0, [r7, #4]
 8010746:	f000 fa38 	bl	8010bba <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	2203      	movs	r2, #3
 801074e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8010752:	e05d      	b.n	8010810 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010754:	6878      	ldr	r0, [r7, #4]
 8010756:	f000 fa30 	bl	8010bba <USBD_CtlSendStatus>
      break;
 801075a:	e059      	b.n	8010810 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801075c:	4b2f      	ldr	r3, [pc, #188]	@ (801081c <USBD_SetConfig+0x150>)
 801075e:	781b      	ldrb	r3, [r3, #0]
 8010760:	2b00      	cmp	r3, #0
 8010762:	d112      	bne.n	801078a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	2202      	movs	r2, #2
 8010768:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 801076c:	4b2b      	ldr	r3, [pc, #172]	@ (801081c <USBD_SetConfig+0x150>)
 801076e:	781b      	ldrb	r3, [r3, #0]
 8010770:	461a      	mov	r2, r3
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010776:	4b29      	ldr	r3, [pc, #164]	@ (801081c <USBD_SetConfig+0x150>)
 8010778:	781b      	ldrb	r3, [r3, #0]
 801077a:	4619      	mov	r1, r3
 801077c:	6878      	ldr	r0, [r7, #4]
 801077e:	f7fe ffbe 	bl	800f6fe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8010782:	6878      	ldr	r0, [r7, #4]
 8010784:	f000 fa19 	bl	8010bba <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010788:	e042      	b.n	8010810 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801078a:	4b24      	ldr	r3, [pc, #144]	@ (801081c <USBD_SetConfig+0x150>)
 801078c:	781b      	ldrb	r3, [r3, #0]
 801078e:	461a      	mov	r2, r3
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	685b      	ldr	r3, [r3, #4]
 8010794:	429a      	cmp	r2, r3
 8010796:	d02a      	beq.n	80107ee <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	685b      	ldr	r3, [r3, #4]
 801079c:	b2db      	uxtb	r3, r3
 801079e:	4619      	mov	r1, r3
 80107a0:	6878      	ldr	r0, [r7, #4]
 80107a2:	f7fe ffac 	bl	800f6fe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80107a6:	4b1d      	ldr	r3, [pc, #116]	@ (801081c <USBD_SetConfig+0x150>)
 80107a8:	781b      	ldrb	r3, [r3, #0]
 80107aa:	461a      	mov	r2, r3
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80107b0:	4b1a      	ldr	r3, [pc, #104]	@ (801081c <USBD_SetConfig+0x150>)
 80107b2:	781b      	ldrb	r3, [r3, #0]
 80107b4:	4619      	mov	r1, r3
 80107b6:	6878      	ldr	r0, [r7, #4]
 80107b8:	f7fe ff85 	bl	800f6c6 <USBD_SetClassConfig>
 80107bc:	4603      	mov	r3, r0
 80107be:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80107c0:	7bfb      	ldrb	r3, [r7, #15]
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d00f      	beq.n	80107e6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80107c6:	6839      	ldr	r1, [r7, #0]
 80107c8:	6878      	ldr	r0, [r7, #4]
 80107ca:	f000 f918 	bl	80109fe <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	685b      	ldr	r3, [r3, #4]
 80107d2:	b2db      	uxtb	r3, r3
 80107d4:	4619      	mov	r1, r3
 80107d6:	6878      	ldr	r0, [r7, #4]
 80107d8:	f7fe ff91 	bl	800f6fe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	2202      	movs	r2, #2
 80107e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80107e4:	e014      	b.n	8010810 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80107e6:	6878      	ldr	r0, [r7, #4]
 80107e8:	f000 f9e7 	bl	8010bba <USBD_CtlSendStatus>
      break;
 80107ec:	e010      	b.n	8010810 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80107ee:	6878      	ldr	r0, [r7, #4]
 80107f0:	f000 f9e3 	bl	8010bba <USBD_CtlSendStatus>
      break;
 80107f4:	e00c      	b.n	8010810 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80107f6:	6839      	ldr	r1, [r7, #0]
 80107f8:	6878      	ldr	r0, [r7, #4]
 80107fa:	f000 f900 	bl	80109fe <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80107fe:	4b07      	ldr	r3, [pc, #28]	@ (801081c <USBD_SetConfig+0x150>)
 8010800:	781b      	ldrb	r3, [r3, #0]
 8010802:	4619      	mov	r1, r3
 8010804:	6878      	ldr	r0, [r7, #4]
 8010806:	f7fe ff7a 	bl	800f6fe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801080a:	2303      	movs	r3, #3
 801080c:	73fb      	strb	r3, [r7, #15]
      break;
 801080e:	bf00      	nop
  }

  return ret;
 8010810:	7bfb      	ldrb	r3, [r7, #15]
}
 8010812:	4618      	mov	r0, r3
 8010814:	3710      	adds	r7, #16
 8010816:	46bd      	mov	sp, r7
 8010818:	bd80      	pop	{r7, pc}
 801081a:	bf00      	nop
 801081c:	20003a70 	.word	0x20003a70

08010820 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010820:	b580      	push	{r7, lr}
 8010822:	b082      	sub	sp, #8
 8010824:	af00      	add	r7, sp, #0
 8010826:	6078      	str	r0, [r7, #4]
 8010828:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801082a:	683b      	ldr	r3, [r7, #0]
 801082c:	88db      	ldrh	r3, [r3, #6]
 801082e:	2b01      	cmp	r3, #1
 8010830:	d004      	beq.n	801083c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8010832:	6839      	ldr	r1, [r7, #0]
 8010834:	6878      	ldr	r0, [r7, #4]
 8010836:	f000 f8e2 	bl	80109fe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801083a:	e023      	b.n	8010884 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010842:	b2db      	uxtb	r3, r3
 8010844:	2b02      	cmp	r3, #2
 8010846:	dc02      	bgt.n	801084e <USBD_GetConfig+0x2e>
 8010848:	2b00      	cmp	r3, #0
 801084a:	dc03      	bgt.n	8010854 <USBD_GetConfig+0x34>
 801084c:	e015      	b.n	801087a <USBD_GetConfig+0x5a>
 801084e:	2b03      	cmp	r3, #3
 8010850:	d00b      	beq.n	801086a <USBD_GetConfig+0x4a>
 8010852:	e012      	b.n	801087a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	2200      	movs	r2, #0
 8010858:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	3308      	adds	r3, #8
 801085e:	2201      	movs	r2, #1
 8010860:	4619      	mov	r1, r3
 8010862:	6878      	ldr	r0, [r7, #4]
 8010864:	f000 f948 	bl	8010af8 <USBD_CtlSendData>
        break;
 8010868:	e00c      	b.n	8010884 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	3304      	adds	r3, #4
 801086e:	2201      	movs	r2, #1
 8010870:	4619      	mov	r1, r3
 8010872:	6878      	ldr	r0, [r7, #4]
 8010874:	f000 f940 	bl	8010af8 <USBD_CtlSendData>
        break;
 8010878:	e004      	b.n	8010884 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801087a:	6839      	ldr	r1, [r7, #0]
 801087c:	6878      	ldr	r0, [r7, #4]
 801087e:	f000 f8be 	bl	80109fe <USBD_CtlError>
        break;
 8010882:	bf00      	nop
}
 8010884:	bf00      	nop
 8010886:	3708      	adds	r7, #8
 8010888:	46bd      	mov	sp, r7
 801088a:	bd80      	pop	{r7, pc}

0801088c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801088c:	b580      	push	{r7, lr}
 801088e:	b082      	sub	sp, #8
 8010890:	af00      	add	r7, sp, #0
 8010892:	6078      	str	r0, [r7, #4]
 8010894:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801089c:	b2db      	uxtb	r3, r3
 801089e:	3b01      	subs	r3, #1
 80108a0:	2b02      	cmp	r3, #2
 80108a2:	d81e      	bhi.n	80108e2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80108a4:	683b      	ldr	r3, [r7, #0]
 80108a6:	88db      	ldrh	r3, [r3, #6]
 80108a8:	2b02      	cmp	r3, #2
 80108aa:	d004      	beq.n	80108b6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80108ac:	6839      	ldr	r1, [r7, #0]
 80108ae:	6878      	ldr	r0, [r7, #4]
 80108b0:	f000 f8a5 	bl	80109fe <USBD_CtlError>
        break;
 80108b4:	e01a      	b.n	80108ec <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	2201      	movs	r2, #1
 80108ba:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d005      	beq.n	80108d2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	68db      	ldr	r3, [r3, #12]
 80108ca:	f043 0202 	orr.w	r2, r3, #2
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	330c      	adds	r3, #12
 80108d6:	2202      	movs	r2, #2
 80108d8:	4619      	mov	r1, r3
 80108da:	6878      	ldr	r0, [r7, #4]
 80108dc:	f000 f90c 	bl	8010af8 <USBD_CtlSendData>
      break;
 80108e0:	e004      	b.n	80108ec <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80108e2:	6839      	ldr	r1, [r7, #0]
 80108e4:	6878      	ldr	r0, [r7, #4]
 80108e6:	f000 f88a 	bl	80109fe <USBD_CtlError>
      break;
 80108ea:	bf00      	nop
  }
}
 80108ec:	bf00      	nop
 80108ee:	3708      	adds	r7, #8
 80108f0:	46bd      	mov	sp, r7
 80108f2:	bd80      	pop	{r7, pc}

080108f4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80108f4:	b580      	push	{r7, lr}
 80108f6:	b082      	sub	sp, #8
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	6078      	str	r0, [r7, #4]
 80108fc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80108fe:	683b      	ldr	r3, [r7, #0]
 8010900:	885b      	ldrh	r3, [r3, #2]
 8010902:	2b01      	cmp	r3, #1
 8010904:	d107      	bne.n	8010916 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	2201      	movs	r2, #1
 801090a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801090e:	6878      	ldr	r0, [r7, #4]
 8010910:	f000 f953 	bl	8010bba <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8010914:	e013      	b.n	801093e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8010916:	683b      	ldr	r3, [r7, #0]
 8010918:	885b      	ldrh	r3, [r3, #2]
 801091a:	2b02      	cmp	r3, #2
 801091c:	d10b      	bne.n	8010936 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 801091e:	683b      	ldr	r3, [r7, #0]
 8010920:	889b      	ldrh	r3, [r3, #4]
 8010922:	0a1b      	lsrs	r3, r3, #8
 8010924:	b29b      	uxth	r3, r3
 8010926:	b2da      	uxtb	r2, r3
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801092e:	6878      	ldr	r0, [r7, #4]
 8010930:	f000 f943 	bl	8010bba <USBD_CtlSendStatus>
}
 8010934:	e003      	b.n	801093e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8010936:	6839      	ldr	r1, [r7, #0]
 8010938:	6878      	ldr	r0, [r7, #4]
 801093a:	f000 f860 	bl	80109fe <USBD_CtlError>
}
 801093e:	bf00      	nop
 8010940:	3708      	adds	r7, #8
 8010942:	46bd      	mov	sp, r7
 8010944:	bd80      	pop	{r7, pc}

08010946 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010946:	b580      	push	{r7, lr}
 8010948:	b082      	sub	sp, #8
 801094a:	af00      	add	r7, sp, #0
 801094c:	6078      	str	r0, [r7, #4]
 801094e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010956:	b2db      	uxtb	r3, r3
 8010958:	3b01      	subs	r3, #1
 801095a:	2b02      	cmp	r3, #2
 801095c:	d80b      	bhi.n	8010976 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801095e:	683b      	ldr	r3, [r7, #0]
 8010960:	885b      	ldrh	r3, [r3, #2]
 8010962:	2b01      	cmp	r3, #1
 8010964:	d10c      	bne.n	8010980 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	2200      	movs	r2, #0
 801096a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801096e:	6878      	ldr	r0, [r7, #4]
 8010970:	f000 f923 	bl	8010bba <USBD_CtlSendStatus>
      }
      break;
 8010974:	e004      	b.n	8010980 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010976:	6839      	ldr	r1, [r7, #0]
 8010978:	6878      	ldr	r0, [r7, #4]
 801097a:	f000 f840 	bl	80109fe <USBD_CtlError>
      break;
 801097e:	e000      	b.n	8010982 <USBD_ClrFeature+0x3c>
      break;
 8010980:	bf00      	nop
  }
}
 8010982:	bf00      	nop
 8010984:	3708      	adds	r7, #8
 8010986:	46bd      	mov	sp, r7
 8010988:	bd80      	pop	{r7, pc}

0801098a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801098a:	b580      	push	{r7, lr}
 801098c:	b084      	sub	sp, #16
 801098e:	af00      	add	r7, sp, #0
 8010990:	6078      	str	r0, [r7, #4]
 8010992:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8010994:	683b      	ldr	r3, [r7, #0]
 8010996:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	781a      	ldrb	r2, [r3, #0]
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	3301      	adds	r3, #1
 80109a4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	781a      	ldrb	r2, [r3, #0]
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	3301      	adds	r3, #1
 80109b2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80109b4:	68f8      	ldr	r0, [r7, #12]
 80109b6:	f7ff fa3f 	bl	800fe38 <SWAPBYTE>
 80109ba:	4603      	mov	r3, r0
 80109bc:	461a      	mov	r2, r3
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	3301      	adds	r3, #1
 80109c6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	3301      	adds	r3, #1
 80109cc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80109ce:	68f8      	ldr	r0, [r7, #12]
 80109d0:	f7ff fa32 	bl	800fe38 <SWAPBYTE>
 80109d4:	4603      	mov	r3, r0
 80109d6:	461a      	mov	r2, r3
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	3301      	adds	r3, #1
 80109e0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	3301      	adds	r3, #1
 80109e6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80109e8:	68f8      	ldr	r0, [r7, #12]
 80109ea:	f7ff fa25 	bl	800fe38 <SWAPBYTE>
 80109ee:	4603      	mov	r3, r0
 80109f0:	461a      	mov	r2, r3
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	80da      	strh	r2, [r3, #6]
}
 80109f6:	bf00      	nop
 80109f8:	3710      	adds	r7, #16
 80109fa:	46bd      	mov	sp, r7
 80109fc:	bd80      	pop	{r7, pc}

080109fe <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80109fe:	b580      	push	{r7, lr}
 8010a00:	b082      	sub	sp, #8
 8010a02:	af00      	add	r7, sp, #0
 8010a04:	6078      	str	r0, [r7, #4]
 8010a06:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010a08:	2180      	movs	r1, #128	@ 0x80
 8010a0a:	6878      	ldr	r0, [r7, #4]
 8010a0c:	f000 fd00 	bl	8011410 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010a10:	2100      	movs	r1, #0
 8010a12:	6878      	ldr	r0, [r7, #4]
 8010a14:	f000 fcfc 	bl	8011410 <USBD_LL_StallEP>
}
 8010a18:	bf00      	nop
 8010a1a:	3708      	adds	r7, #8
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	bd80      	pop	{r7, pc}

08010a20 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b086      	sub	sp, #24
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	60f8      	str	r0, [r7, #12]
 8010a28:	60b9      	str	r1, [r7, #8]
 8010a2a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d042      	beq.n	8010abc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8010a3a:	6938      	ldr	r0, [r7, #16]
 8010a3c:	f000 f842 	bl	8010ac4 <USBD_GetLen>
 8010a40:	4603      	mov	r3, r0
 8010a42:	3301      	adds	r3, #1
 8010a44:	005b      	lsls	r3, r3, #1
 8010a46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010a4a:	d808      	bhi.n	8010a5e <USBD_GetString+0x3e>
 8010a4c:	6938      	ldr	r0, [r7, #16]
 8010a4e:	f000 f839 	bl	8010ac4 <USBD_GetLen>
 8010a52:	4603      	mov	r3, r0
 8010a54:	3301      	adds	r3, #1
 8010a56:	b29b      	uxth	r3, r3
 8010a58:	005b      	lsls	r3, r3, #1
 8010a5a:	b29a      	uxth	r2, r3
 8010a5c:	e001      	b.n	8010a62 <USBD_GetString+0x42>
 8010a5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8010a66:	7dfb      	ldrb	r3, [r7, #23]
 8010a68:	68ba      	ldr	r2, [r7, #8]
 8010a6a:	4413      	add	r3, r2
 8010a6c:	687a      	ldr	r2, [r7, #4]
 8010a6e:	7812      	ldrb	r2, [r2, #0]
 8010a70:	701a      	strb	r2, [r3, #0]
  idx++;
 8010a72:	7dfb      	ldrb	r3, [r7, #23]
 8010a74:	3301      	adds	r3, #1
 8010a76:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010a78:	7dfb      	ldrb	r3, [r7, #23]
 8010a7a:	68ba      	ldr	r2, [r7, #8]
 8010a7c:	4413      	add	r3, r2
 8010a7e:	2203      	movs	r2, #3
 8010a80:	701a      	strb	r2, [r3, #0]
  idx++;
 8010a82:	7dfb      	ldrb	r3, [r7, #23]
 8010a84:	3301      	adds	r3, #1
 8010a86:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8010a88:	e013      	b.n	8010ab2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8010a8a:	7dfb      	ldrb	r3, [r7, #23]
 8010a8c:	68ba      	ldr	r2, [r7, #8]
 8010a8e:	4413      	add	r3, r2
 8010a90:	693a      	ldr	r2, [r7, #16]
 8010a92:	7812      	ldrb	r2, [r2, #0]
 8010a94:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8010a96:	693b      	ldr	r3, [r7, #16]
 8010a98:	3301      	adds	r3, #1
 8010a9a:	613b      	str	r3, [r7, #16]
    idx++;
 8010a9c:	7dfb      	ldrb	r3, [r7, #23]
 8010a9e:	3301      	adds	r3, #1
 8010aa0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8010aa2:	7dfb      	ldrb	r3, [r7, #23]
 8010aa4:	68ba      	ldr	r2, [r7, #8]
 8010aa6:	4413      	add	r3, r2
 8010aa8:	2200      	movs	r2, #0
 8010aaa:	701a      	strb	r2, [r3, #0]
    idx++;
 8010aac:	7dfb      	ldrb	r3, [r7, #23]
 8010aae:	3301      	adds	r3, #1
 8010ab0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8010ab2:	693b      	ldr	r3, [r7, #16]
 8010ab4:	781b      	ldrb	r3, [r3, #0]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d1e7      	bne.n	8010a8a <USBD_GetString+0x6a>
 8010aba:	e000      	b.n	8010abe <USBD_GetString+0x9e>
    return;
 8010abc:	bf00      	nop
  }
}
 8010abe:	3718      	adds	r7, #24
 8010ac0:	46bd      	mov	sp, r7
 8010ac2:	bd80      	pop	{r7, pc}

08010ac4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010ac4:	b480      	push	{r7}
 8010ac6:	b085      	sub	sp, #20
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8010acc:	2300      	movs	r3, #0
 8010ace:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010ad4:	e005      	b.n	8010ae2 <USBD_GetLen+0x1e>
  {
    len++;
 8010ad6:	7bfb      	ldrb	r3, [r7, #15]
 8010ad8:	3301      	adds	r3, #1
 8010ada:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8010adc:	68bb      	ldr	r3, [r7, #8]
 8010ade:	3301      	adds	r3, #1
 8010ae0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010ae2:	68bb      	ldr	r3, [r7, #8]
 8010ae4:	781b      	ldrb	r3, [r3, #0]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d1f5      	bne.n	8010ad6 <USBD_GetLen+0x12>
  }

  return len;
 8010aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8010aec:	4618      	mov	r0, r3
 8010aee:	3714      	adds	r7, #20
 8010af0:	46bd      	mov	sp, r7
 8010af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af6:	4770      	bx	lr

08010af8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010af8:	b580      	push	{r7, lr}
 8010afa:	b084      	sub	sp, #16
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	60f8      	str	r0, [r7, #12]
 8010b00:	60b9      	str	r1, [r7, #8]
 8010b02:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	2202      	movs	r2, #2
 8010b08:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	687a      	ldr	r2, [r7, #4]
 8010b10:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	68ba      	ldr	r2, [r7, #8]
 8010b16:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	687a      	ldr	r2, [r7, #4]
 8010b1c:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	68ba      	ldr	r2, [r7, #8]
 8010b22:	2100      	movs	r1, #0
 8010b24:	68f8      	ldr	r0, [r7, #12]
 8010b26:	f000 fcfc 	bl	8011522 <USBD_LL_Transmit>

  return USBD_OK;
 8010b2a:	2300      	movs	r3, #0
}
 8010b2c:	4618      	mov	r0, r3
 8010b2e:	3710      	adds	r7, #16
 8010b30:	46bd      	mov	sp, r7
 8010b32:	bd80      	pop	{r7, pc}

08010b34 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010b34:	b580      	push	{r7, lr}
 8010b36:	b084      	sub	sp, #16
 8010b38:	af00      	add	r7, sp, #0
 8010b3a:	60f8      	str	r0, [r7, #12]
 8010b3c:	60b9      	str	r1, [r7, #8]
 8010b3e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	68ba      	ldr	r2, [r7, #8]
 8010b44:	2100      	movs	r1, #0
 8010b46:	68f8      	ldr	r0, [r7, #12]
 8010b48:	f000 fceb 	bl	8011522 <USBD_LL_Transmit>

  return USBD_OK;
 8010b4c:	2300      	movs	r3, #0
}
 8010b4e:	4618      	mov	r0, r3
 8010b50:	3710      	adds	r7, #16
 8010b52:	46bd      	mov	sp, r7
 8010b54:	bd80      	pop	{r7, pc}

08010b56 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8010b56:	b580      	push	{r7, lr}
 8010b58:	b084      	sub	sp, #16
 8010b5a:	af00      	add	r7, sp, #0
 8010b5c:	60f8      	str	r0, [r7, #12]
 8010b5e:	60b9      	str	r1, [r7, #8]
 8010b60:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	2203      	movs	r2, #3
 8010b66:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	687a      	ldr	r2, [r7, #4]
 8010b6e:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	68ba      	ldr	r2, [r7, #8]
 8010b76:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	687a      	ldr	r2, [r7, #4]
 8010b7e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	68ba      	ldr	r2, [r7, #8]
 8010b86:	2100      	movs	r1, #0
 8010b88:	68f8      	ldr	r0, [r7, #12]
 8010b8a:	f000 fceb 	bl	8011564 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010b8e:	2300      	movs	r3, #0
}
 8010b90:	4618      	mov	r0, r3
 8010b92:	3710      	adds	r7, #16
 8010b94:	46bd      	mov	sp, r7
 8010b96:	bd80      	pop	{r7, pc}

08010b98 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010b98:	b580      	push	{r7, lr}
 8010b9a:	b084      	sub	sp, #16
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	60f8      	str	r0, [r7, #12]
 8010ba0:	60b9      	str	r1, [r7, #8]
 8010ba2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	68ba      	ldr	r2, [r7, #8]
 8010ba8:	2100      	movs	r1, #0
 8010baa:	68f8      	ldr	r0, [r7, #12]
 8010bac:	f000 fcda 	bl	8011564 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010bb0:	2300      	movs	r3, #0
}
 8010bb2:	4618      	mov	r0, r3
 8010bb4:	3710      	adds	r7, #16
 8010bb6:	46bd      	mov	sp, r7
 8010bb8:	bd80      	pop	{r7, pc}

08010bba <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010bba:	b580      	push	{r7, lr}
 8010bbc:	b082      	sub	sp, #8
 8010bbe:	af00      	add	r7, sp, #0
 8010bc0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	2204      	movs	r2, #4
 8010bc6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010bca:	2300      	movs	r3, #0
 8010bcc:	2200      	movs	r2, #0
 8010bce:	2100      	movs	r1, #0
 8010bd0:	6878      	ldr	r0, [r7, #4]
 8010bd2:	f000 fca6 	bl	8011522 <USBD_LL_Transmit>

  return USBD_OK;
 8010bd6:	2300      	movs	r3, #0
}
 8010bd8:	4618      	mov	r0, r3
 8010bda:	3708      	adds	r7, #8
 8010bdc:	46bd      	mov	sp, r7
 8010bde:	bd80      	pop	{r7, pc}

08010be0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010be0:	b580      	push	{r7, lr}
 8010be2:	b082      	sub	sp, #8
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	2205      	movs	r2, #5
 8010bec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010bf0:	2300      	movs	r3, #0
 8010bf2:	2200      	movs	r2, #0
 8010bf4:	2100      	movs	r1, #0
 8010bf6:	6878      	ldr	r0, [r7, #4]
 8010bf8:	f000 fcb4 	bl	8011564 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010bfc:	2300      	movs	r3, #0
}
 8010bfe:	4618      	mov	r0, r3
 8010c00:	3708      	adds	r7, #8
 8010c02:	46bd      	mov	sp, r7
 8010c04:	bd80      	pop	{r7, pc}
	...

08010c08 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010c08:	b580      	push	{r7, lr}
 8010c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010c0c:	2200      	movs	r2, #0
 8010c0e:	4912      	ldr	r1, [pc, #72]	@ (8010c58 <MX_USB_DEVICE_Init+0x50>)
 8010c10:	4812      	ldr	r0, [pc, #72]	@ (8010c5c <MX_USB_DEVICE_Init+0x54>)
 8010c12:	f7fe fcdb 	bl	800f5cc <USBD_Init>
 8010c16:	4603      	mov	r3, r0
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d001      	beq.n	8010c20 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010c1c:	f7f6 fae8 	bl	80071f0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010c20:	490f      	ldr	r1, [pc, #60]	@ (8010c60 <MX_USB_DEVICE_Init+0x58>)
 8010c22:	480e      	ldr	r0, [pc, #56]	@ (8010c5c <MX_USB_DEVICE_Init+0x54>)
 8010c24:	f7fe fd02 	bl	800f62c <USBD_RegisterClass>
 8010c28:	4603      	mov	r3, r0
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d001      	beq.n	8010c32 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010c2e:	f7f6 fadf 	bl	80071f0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010c32:	490c      	ldr	r1, [pc, #48]	@ (8010c64 <MX_USB_DEVICE_Init+0x5c>)
 8010c34:	4809      	ldr	r0, [pc, #36]	@ (8010c5c <MX_USB_DEVICE_Init+0x54>)
 8010c36:	f7fe fbf9 	bl	800f42c <USBD_CDC_RegisterInterface>
 8010c3a:	4603      	mov	r3, r0
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d001      	beq.n	8010c44 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010c40:	f7f6 fad6 	bl	80071f0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010c44:	4805      	ldr	r0, [pc, #20]	@ (8010c5c <MX_USB_DEVICE_Init+0x54>)
 8010c46:	f7fe fd27 	bl	800f698 <USBD_Start>
 8010c4a:	4603      	mov	r3, r0
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d001      	beq.n	8010c54 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010c50:	f7f6 face 	bl	80071f0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010c54:	bf00      	nop
 8010c56:	bd80      	pop	{r7, pc}
 8010c58:	20000378 	.word	0x20000378
 8010c5c:	20003a74 	.word	0x20003a74
 8010c60:	200002e4 	.word	0x200002e4
 8010c64:	20000364 	.word	0x20000364

08010c68 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010c6c:	2200      	movs	r2, #0
 8010c6e:	4905      	ldr	r1, [pc, #20]	@ (8010c84 <CDC_Init_FS+0x1c>)
 8010c70:	4805      	ldr	r0, [pc, #20]	@ (8010c88 <CDC_Init_FS+0x20>)
 8010c72:	f7fe fbf5 	bl	800f460 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010c76:	4905      	ldr	r1, [pc, #20]	@ (8010c8c <CDC_Init_FS+0x24>)
 8010c78:	4803      	ldr	r0, [pc, #12]	@ (8010c88 <CDC_Init_FS+0x20>)
 8010c7a:	f7fe fc13 	bl	800f4a4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010c7e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010c80:	4618      	mov	r0, r3
 8010c82:	bd80      	pop	{r7, pc}
 8010c84:	20004550 	.word	0x20004550
 8010c88:	20003a74 	.word	0x20003a74
 8010c8c:	20003d50 	.word	0x20003d50

08010c90 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010c90:	b480      	push	{r7}
 8010c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010c94:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010c96:	4618      	mov	r0, r3
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c9e:	4770      	bx	lr

08010ca0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010ca0:	b480      	push	{r7}
 8010ca2:	b083      	sub	sp, #12
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	4603      	mov	r3, r0
 8010ca8:	6039      	str	r1, [r7, #0]
 8010caa:	71fb      	strb	r3, [r7, #7]
 8010cac:	4613      	mov	r3, r2
 8010cae:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010cb0:	79fb      	ldrb	r3, [r7, #7]
 8010cb2:	2b23      	cmp	r3, #35	@ 0x23
 8010cb4:	d84a      	bhi.n	8010d4c <CDC_Control_FS+0xac>
 8010cb6:	a201      	add	r2, pc, #4	@ (adr r2, 8010cbc <CDC_Control_FS+0x1c>)
 8010cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cbc:	08010d4d 	.word	0x08010d4d
 8010cc0:	08010d4d 	.word	0x08010d4d
 8010cc4:	08010d4d 	.word	0x08010d4d
 8010cc8:	08010d4d 	.word	0x08010d4d
 8010ccc:	08010d4d 	.word	0x08010d4d
 8010cd0:	08010d4d 	.word	0x08010d4d
 8010cd4:	08010d4d 	.word	0x08010d4d
 8010cd8:	08010d4d 	.word	0x08010d4d
 8010cdc:	08010d4d 	.word	0x08010d4d
 8010ce0:	08010d4d 	.word	0x08010d4d
 8010ce4:	08010d4d 	.word	0x08010d4d
 8010ce8:	08010d4d 	.word	0x08010d4d
 8010cec:	08010d4d 	.word	0x08010d4d
 8010cf0:	08010d4d 	.word	0x08010d4d
 8010cf4:	08010d4d 	.word	0x08010d4d
 8010cf8:	08010d4d 	.word	0x08010d4d
 8010cfc:	08010d4d 	.word	0x08010d4d
 8010d00:	08010d4d 	.word	0x08010d4d
 8010d04:	08010d4d 	.word	0x08010d4d
 8010d08:	08010d4d 	.word	0x08010d4d
 8010d0c:	08010d4d 	.word	0x08010d4d
 8010d10:	08010d4d 	.word	0x08010d4d
 8010d14:	08010d4d 	.word	0x08010d4d
 8010d18:	08010d4d 	.word	0x08010d4d
 8010d1c:	08010d4d 	.word	0x08010d4d
 8010d20:	08010d4d 	.word	0x08010d4d
 8010d24:	08010d4d 	.word	0x08010d4d
 8010d28:	08010d4d 	.word	0x08010d4d
 8010d2c:	08010d4d 	.word	0x08010d4d
 8010d30:	08010d4d 	.word	0x08010d4d
 8010d34:	08010d4d 	.word	0x08010d4d
 8010d38:	08010d4d 	.word	0x08010d4d
 8010d3c:	08010d4d 	.word	0x08010d4d
 8010d40:	08010d4d 	.word	0x08010d4d
 8010d44:	08010d4d 	.word	0x08010d4d
 8010d48:	08010d4d 	.word	0x08010d4d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010d4c:	bf00      	nop
  }

  return (USBD_OK);
 8010d4e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010d50:	4618      	mov	r0, r3
 8010d52:	370c      	adds	r7, #12
 8010d54:	46bd      	mov	sp, r7
 8010d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d5a:	4770      	bx	lr

08010d5c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010d5c:	b580      	push	{r7, lr}
 8010d5e:	b082      	sub	sp, #8
 8010d60:	af00      	add	r7, sp, #0
 8010d62:	6078      	str	r0, [r7, #4]
 8010d64:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  extern uint8_t usb_term_buffer[512];
  extern uint32_t usb_received_len;
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, usb_term_buffer);
 8010d66:	4908      	ldr	r1, [pc, #32]	@ (8010d88 <CDC_Receive_FS+0x2c>)
 8010d68:	4808      	ldr	r0, [pc, #32]	@ (8010d8c <CDC_Receive_FS+0x30>)
 8010d6a:	f7fe fb9b 	bl	800f4a4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010d6e:	4807      	ldr	r0, [pc, #28]	@ (8010d8c <CDC_Receive_FS+0x30>)
 8010d70:	f7fe fbf6 	bl	800f560 <USBD_CDC_ReceivePacket>

  usb_received_len = *Len;
 8010d74:	683b      	ldr	r3, [r7, #0]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	4a05      	ldr	r2, [pc, #20]	@ (8010d90 <CDC_Receive_FS+0x34>)
 8010d7a:	6013      	str	r3, [r2, #0]
  return (USBD_OK);
 8010d7c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010d7e:	4618      	mov	r0, r3
 8010d80:	3708      	adds	r7, #8
 8010d82:	46bd      	mov	sp, r7
 8010d84:	bd80      	pop	{r7, pc}
 8010d86:	bf00      	nop
 8010d88:	20000474 	.word	0x20000474
 8010d8c:	20003a74 	.word	0x20003a74
 8010d90:	20000674 	.word	0x20000674

08010d94 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8010d94:	b580      	push	{r7, lr}
 8010d96:	b084      	sub	sp, #16
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	6078      	str	r0, [r7, #4]
 8010d9c:	460b      	mov	r3, r1
 8010d9e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8010da0:	2300      	movs	r3, #0
 8010da2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8010da4:	4b0d      	ldr	r3, [pc, #52]	@ (8010ddc <CDC_Transmit_FS+0x48>)
 8010da6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8010daa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8010dac:	68bb      	ldr	r3, [r7, #8]
 8010dae:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d001      	beq.n	8010dba <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8010db6:	2301      	movs	r3, #1
 8010db8:	e00b      	b.n	8010dd2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8010dba:	887b      	ldrh	r3, [r7, #2]
 8010dbc:	461a      	mov	r2, r3
 8010dbe:	6879      	ldr	r1, [r7, #4]
 8010dc0:	4806      	ldr	r0, [pc, #24]	@ (8010ddc <CDC_Transmit_FS+0x48>)
 8010dc2:	f7fe fb4d 	bl	800f460 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8010dc6:	4805      	ldr	r0, [pc, #20]	@ (8010ddc <CDC_Transmit_FS+0x48>)
 8010dc8:	f7fe fb8a 	bl	800f4e0 <USBD_CDC_TransmitPacket>
 8010dcc:	4603      	mov	r3, r0
 8010dce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8010dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	3710      	adds	r7, #16
 8010dd6:	46bd      	mov	sp, r7
 8010dd8:	bd80      	pop	{r7, pc}
 8010dda:	bf00      	nop
 8010ddc:	20003a74 	.word	0x20003a74

08010de0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010de0:	b480      	push	{r7}
 8010de2:	b087      	sub	sp, #28
 8010de4:	af00      	add	r7, sp, #0
 8010de6:	60f8      	str	r0, [r7, #12]
 8010de8:	60b9      	str	r1, [r7, #8]
 8010dea:	4613      	mov	r3, r2
 8010dec:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010dee:	2300      	movs	r3, #0
 8010df0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010df2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010df6:	4618      	mov	r0, r3
 8010df8:	371c      	adds	r7, #28
 8010dfa:	46bd      	mov	sp, r7
 8010dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e00:	4770      	bx	lr
	...

08010e04 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010e04:	b480      	push	{r7}
 8010e06:	b083      	sub	sp, #12
 8010e08:	af00      	add	r7, sp, #0
 8010e0a:	4603      	mov	r3, r0
 8010e0c:	6039      	str	r1, [r7, #0]
 8010e0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010e10:	683b      	ldr	r3, [r7, #0]
 8010e12:	2212      	movs	r2, #18
 8010e14:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010e16:	4b03      	ldr	r3, [pc, #12]	@ (8010e24 <USBD_FS_DeviceDescriptor+0x20>)
}
 8010e18:	4618      	mov	r0, r3
 8010e1a:	370c      	adds	r7, #12
 8010e1c:	46bd      	mov	sp, r7
 8010e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e22:	4770      	bx	lr
 8010e24:	20000394 	.word	0x20000394

08010e28 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010e28:	b480      	push	{r7}
 8010e2a:	b083      	sub	sp, #12
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	4603      	mov	r3, r0
 8010e30:	6039      	str	r1, [r7, #0]
 8010e32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010e34:	683b      	ldr	r3, [r7, #0]
 8010e36:	2204      	movs	r2, #4
 8010e38:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010e3a:	4b03      	ldr	r3, [pc, #12]	@ (8010e48 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	370c      	adds	r7, #12
 8010e40:	46bd      	mov	sp, r7
 8010e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e46:	4770      	bx	lr
 8010e48:	200003a8 	.word	0x200003a8

08010e4c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	b082      	sub	sp, #8
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	4603      	mov	r3, r0
 8010e54:	6039      	str	r1, [r7, #0]
 8010e56:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010e58:	79fb      	ldrb	r3, [r7, #7]
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d105      	bne.n	8010e6a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010e5e:	683a      	ldr	r2, [r7, #0]
 8010e60:	4907      	ldr	r1, [pc, #28]	@ (8010e80 <USBD_FS_ProductStrDescriptor+0x34>)
 8010e62:	4808      	ldr	r0, [pc, #32]	@ (8010e84 <USBD_FS_ProductStrDescriptor+0x38>)
 8010e64:	f7ff fddc 	bl	8010a20 <USBD_GetString>
 8010e68:	e004      	b.n	8010e74 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010e6a:	683a      	ldr	r2, [r7, #0]
 8010e6c:	4904      	ldr	r1, [pc, #16]	@ (8010e80 <USBD_FS_ProductStrDescriptor+0x34>)
 8010e6e:	4805      	ldr	r0, [pc, #20]	@ (8010e84 <USBD_FS_ProductStrDescriptor+0x38>)
 8010e70:	f7ff fdd6 	bl	8010a20 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010e74:	4b02      	ldr	r3, [pc, #8]	@ (8010e80 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010e76:	4618      	mov	r0, r3
 8010e78:	3708      	adds	r7, #8
 8010e7a:	46bd      	mov	sp, r7
 8010e7c:	bd80      	pop	{r7, pc}
 8010e7e:	bf00      	nop
 8010e80:	20004d50 	.word	0x20004d50
 8010e84:	080122a0 	.word	0x080122a0

08010e88 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010e88:	b580      	push	{r7, lr}
 8010e8a:	b082      	sub	sp, #8
 8010e8c:	af00      	add	r7, sp, #0
 8010e8e:	4603      	mov	r3, r0
 8010e90:	6039      	str	r1, [r7, #0]
 8010e92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010e94:	683a      	ldr	r2, [r7, #0]
 8010e96:	4904      	ldr	r1, [pc, #16]	@ (8010ea8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010e98:	4804      	ldr	r0, [pc, #16]	@ (8010eac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010e9a:	f7ff fdc1 	bl	8010a20 <USBD_GetString>
  return USBD_StrDesc;
 8010e9e:	4b02      	ldr	r3, [pc, #8]	@ (8010ea8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	3708      	adds	r7, #8
 8010ea4:	46bd      	mov	sp, r7
 8010ea6:	bd80      	pop	{r7, pc}
 8010ea8:	20004d50 	.word	0x20004d50
 8010eac:	080122b8 	.word	0x080122b8

08010eb0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010eb0:	b580      	push	{r7, lr}
 8010eb2:	b082      	sub	sp, #8
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	4603      	mov	r3, r0
 8010eb8:	6039      	str	r1, [r7, #0]
 8010eba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010ebc:	683b      	ldr	r3, [r7, #0]
 8010ebe:	221a      	movs	r2, #26
 8010ec0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010ec2:	f000 f843 	bl	8010f4c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010ec6:	4b02      	ldr	r3, [pc, #8]	@ (8010ed0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010ec8:	4618      	mov	r0, r3
 8010eca:	3708      	adds	r7, #8
 8010ecc:	46bd      	mov	sp, r7
 8010ece:	bd80      	pop	{r7, pc}
 8010ed0:	200003ac 	.word	0x200003ac

08010ed4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010ed4:	b580      	push	{r7, lr}
 8010ed6:	b082      	sub	sp, #8
 8010ed8:	af00      	add	r7, sp, #0
 8010eda:	4603      	mov	r3, r0
 8010edc:	6039      	str	r1, [r7, #0]
 8010ede:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010ee0:	79fb      	ldrb	r3, [r7, #7]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d105      	bne.n	8010ef2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010ee6:	683a      	ldr	r2, [r7, #0]
 8010ee8:	4907      	ldr	r1, [pc, #28]	@ (8010f08 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010eea:	4808      	ldr	r0, [pc, #32]	@ (8010f0c <USBD_FS_ConfigStrDescriptor+0x38>)
 8010eec:	f7ff fd98 	bl	8010a20 <USBD_GetString>
 8010ef0:	e004      	b.n	8010efc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010ef2:	683a      	ldr	r2, [r7, #0]
 8010ef4:	4904      	ldr	r1, [pc, #16]	@ (8010f08 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010ef6:	4805      	ldr	r0, [pc, #20]	@ (8010f0c <USBD_FS_ConfigStrDescriptor+0x38>)
 8010ef8:	f7ff fd92 	bl	8010a20 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010efc:	4b02      	ldr	r3, [pc, #8]	@ (8010f08 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010efe:	4618      	mov	r0, r3
 8010f00:	3708      	adds	r7, #8
 8010f02:	46bd      	mov	sp, r7
 8010f04:	bd80      	pop	{r7, pc}
 8010f06:	bf00      	nop
 8010f08:	20004d50 	.word	0x20004d50
 8010f0c:	080122cc 	.word	0x080122cc

08010f10 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010f10:	b580      	push	{r7, lr}
 8010f12:	b082      	sub	sp, #8
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	4603      	mov	r3, r0
 8010f18:	6039      	str	r1, [r7, #0]
 8010f1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010f1c:	79fb      	ldrb	r3, [r7, #7]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d105      	bne.n	8010f2e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010f22:	683a      	ldr	r2, [r7, #0]
 8010f24:	4907      	ldr	r1, [pc, #28]	@ (8010f44 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010f26:	4808      	ldr	r0, [pc, #32]	@ (8010f48 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010f28:	f7ff fd7a 	bl	8010a20 <USBD_GetString>
 8010f2c:	e004      	b.n	8010f38 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010f2e:	683a      	ldr	r2, [r7, #0]
 8010f30:	4904      	ldr	r1, [pc, #16]	@ (8010f44 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010f32:	4805      	ldr	r0, [pc, #20]	@ (8010f48 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010f34:	f7ff fd74 	bl	8010a20 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010f38:	4b02      	ldr	r3, [pc, #8]	@ (8010f44 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010f3a:	4618      	mov	r0, r3
 8010f3c:	3708      	adds	r7, #8
 8010f3e:	46bd      	mov	sp, r7
 8010f40:	bd80      	pop	{r7, pc}
 8010f42:	bf00      	nop
 8010f44:	20004d50 	.word	0x20004d50
 8010f48:	080122d8 	.word	0x080122d8

08010f4c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010f4c:	b580      	push	{r7, lr}
 8010f4e:	b084      	sub	sp, #16
 8010f50:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010f52:	4b0f      	ldr	r3, [pc, #60]	@ (8010f90 <Get_SerialNum+0x44>)
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010f58:	4b0e      	ldr	r3, [pc, #56]	@ (8010f94 <Get_SerialNum+0x48>)
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010f5e:	4b0e      	ldr	r3, [pc, #56]	@ (8010f98 <Get_SerialNum+0x4c>)
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010f64:	68fa      	ldr	r2, [r7, #12]
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	4413      	add	r3, r2
 8010f6a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d009      	beq.n	8010f86 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010f72:	2208      	movs	r2, #8
 8010f74:	4909      	ldr	r1, [pc, #36]	@ (8010f9c <Get_SerialNum+0x50>)
 8010f76:	68f8      	ldr	r0, [r7, #12]
 8010f78:	f000 f814 	bl	8010fa4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010f7c:	2204      	movs	r2, #4
 8010f7e:	4908      	ldr	r1, [pc, #32]	@ (8010fa0 <Get_SerialNum+0x54>)
 8010f80:	68b8      	ldr	r0, [r7, #8]
 8010f82:	f000 f80f 	bl	8010fa4 <IntToUnicode>
  }
}
 8010f86:	bf00      	nop
 8010f88:	3710      	adds	r7, #16
 8010f8a:	46bd      	mov	sp, r7
 8010f8c:	bd80      	pop	{r7, pc}
 8010f8e:	bf00      	nop
 8010f90:	1fff7a10 	.word	0x1fff7a10
 8010f94:	1fff7a14 	.word	0x1fff7a14
 8010f98:	1fff7a18 	.word	0x1fff7a18
 8010f9c:	200003ae 	.word	0x200003ae
 8010fa0:	200003be 	.word	0x200003be

08010fa4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010fa4:	b480      	push	{r7}
 8010fa6:	b087      	sub	sp, #28
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	60f8      	str	r0, [r7, #12]
 8010fac:	60b9      	str	r1, [r7, #8]
 8010fae:	4613      	mov	r3, r2
 8010fb0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010fb2:	2300      	movs	r3, #0
 8010fb4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010fb6:	2300      	movs	r3, #0
 8010fb8:	75fb      	strb	r3, [r7, #23]
 8010fba:	e027      	b.n	801100c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	0f1b      	lsrs	r3, r3, #28
 8010fc0:	2b09      	cmp	r3, #9
 8010fc2:	d80b      	bhi.n	8010fdc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	0f1b      	lsrs	r3, r3, #28
 8010fc8:	b2da      	uxtb	r2, r3
 8010fca:	7dfb      	ldrb	r3, [r7, #23]
 8010fcc:	005b      	lsls	r3, r3, #1
 8010fce:	4619      	mov	r1, r3
 8010fd0:	68bb      	ldr	r3, [r7, #8]
 8010fd2:	440b      	add	r3, r1
 8010fd4:	3230      	adds	r2, #48	@ 0x30
 8010fd6:	b2d2      	uxtb	r2, r2
 8010fd8:	701a      	strb	r2, [r3, #0]
 8010fda:	e00a      	b.n	8010ff2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	0f1b      	lsrs	r3, r3, #28
 8010fe0:	b2da      	uxtb	r2, r3
 8010fe2:	7dfb      	ldrb	r3, [r7, #23]
 8010fe4:	005b      	lsls	r3, r3, #1
 8010fe6:	4619      	mov	r1, r3
 8010fe8:	68bb      	ldr	r3, [r7, #8]
 8010fea:	440b      	add	r3, r1
 8010fec:	3237      	adds	r2, #55	@ 0x37
 8010fee:	b2d2      	uxtb	r2, r2
 8010ff0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	011b      	lsls	r3, r3, #4
 8010ff6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010ff8:	7dfb      	ldrb	r3, [r7, #23]
 8010ffa:	005b      	lsls	r3, r3, #1
 8010ffc:	3301      	adds	r3, #1
 8010ffe:	68ba      	ldr	r2, [r7, #8]
 8011000:	4413      	add	r3, r2
 8011002:	2200      	movs	r2, #0
 8011004:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011006:	7dfb      	ldrb	r3, [r7, #23]
 8011008:	3301      	adds	r3, #1
 801100a:	75fb      	strb	r3, [r7, #23]
 801100c:	7dfa      	ldrb	r2, [r7, #23]
 801100e:	79fb      	ldrb	r3, [r7, #7]
 8011010:	429a      	cmp	r2, r3
 8011012:	d3d3      	bcc.n	8010fbc <IntToUnicode+0x18>
  }
}
 8011014:	bf00      	nop
 8011016:	bf00      	nop
 8011018:	371c      	adds	r7, #28
 801101a:	46bd      	mov	sp, r7
 801101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011020:	4770      	bx	lr
	...

08011024 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011024:	b580      	push	{r7, lr}
 8011026:	b08a      	sub	sp, #40	@ 0x28
 8011028:	af00      	add	r7, sp, #0
 801102a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801102c:	f107 0314 	add.w	r3, r7, #20
 8011030:	2200      	movs	r2, #0
 8011032:	601a      	str	r2, [r3, #0]
 8011034:	605a      	str	r2, [r3, #4]
 8011036:	609a      	str	r2, [r3, #8]
 8011038:	60da      	str	r2, [r3, #12]
 801103a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8011044:	d147      	bne.n	80110d6 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011046:	2300      	movs	r3, #0
 8011048:	613b      	str	r3, [r7, #16]
 801104a:	4b25      	ldr	r3, [pc, #148]	@ (80110e0 <HAL_PCD_MspInit+0xbc>)
 801104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801104e:	4a24      	ldr	r2, [pc, #144]	@ (80110e0 <HAL_PCD_MspInit+0xbc>)
 8011050:	f043 0301 	orr.w	r3, r3, #1
 8011054:	6313      	str	r3, [r2, #48]	@ 0x30
 8011056:	4b22      	ldr	r3, [pc, #136]	@ (80110e0 <HAL_PCD_MspInit+0xbc>)
 8011058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801105a:	f003 0301 	and.w	r3, r3, #1
 801105e:	613b      	str	r3, [r7, #16]
 8011060:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8011062:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8011066:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011068:	2302      	movs	r3, #2
 801106a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801106c:	2300      	movs	r3, #0
 801106e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011070:	2303      	movs	r3, #3
 8011072:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8011074:	230a      	movs	r3, #10
 8011076:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011078:	f107 0314 	add.w	r3, r7, #20
 801107c:	4619      	mov	r1, r3
 801107e:	4819      	ldr	r0, [pc, #100]	@ (80110e4 <HAL_PCD_MspInit+0xc0>)
 8011080:	f7f7 f8b4 	bl	80081ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8011084:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011088:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801108a:	2300      	movs	r3, #0
 801108c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801108e:	2300      	movs	r3, #0
 8011090:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8011092:	f107 0314 	add.w	r3, r7, #20
 8011096:	4619      	mov	r1, r3
 8011098:	4812      	ldr	r0, [pc, #72]	@ (80110e4 <HAL_PCD_MspInit+0xc0>)
 801109a:	f7f7 f8a7 	bl	80081ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801109e:	4b10      	ldr	r3, [pc, #64]	@ (80110e0 <HAL_PCD_MspInit+0xbc>)
 80110a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80110a2:	4a0f      	ldr	r2, [pc, #60]	@ (80110e0 <HAL_PCD_MspInit+0xbc>)
 80110a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80110a8:	6353      	str	r3, [r2, #52]	@ 0x34
 80110aa:	2300      	movs	r3, #0
 80110ac:	60fb      	str	r3, [r7, #12]
 80110ae:	4b0c      	ldr	r3, [pc, #48]	@ (80110e0 <HAL_PCD_MspInit+0xbc>)
 80110b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80110b2:	4a0b      	ldr	r2, [pc, #44]	@ (80110e0 <HAL_PCD_MspInit+0xbc>)
 80110b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80110b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80110ba:	4b09      	ldr	r3, [pc, #36]	@ (80110e0 <HAL_PCD_MspInit+0xbc>)
 80110bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80110be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80110c2:	60fb      	str	r3, [r7, #12]
 80110c4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80110c6:	2200      	movs	r2, #0
 80110c8:	2100      	movs	r1, #0
 80110ca:	2043      	movs	r0, #67	@ 0x43
 80110cc:	f7f6 fc55 	bl	800797a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80110d0:	2043      	movs	r0, #67	@ 0x43
 80110d2:	f7f6 fc6e 	bl	80079b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80110d6:	bf00      	nop
 80110d8:	3728      	adds	r7, #40	@ 0x28
 80110da:	46bd      	mov	sp, r7
 80110dc:	bd80      	pop	{r7, pc}
 80110de:	bf00      	nop
 80110e0:	40023800 	.word	0x40023800
 80110e4:	40020000 	.word	0x40020000

080110e8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80110e8:	b580      	push	{r7, lr}
 80110ea:	b082      	sub	sp, #8
 80110ec:	af00      	add	r7, sp, #0
 80110ee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80110fc:	4619      	mov	r1, r3
 80110fe:	4610      	mov	r0, r2
 8011100:	f7fe fb17 	bl	800f732 <USBD_LL_SetupStage>
}
 8011104:	bf00      	nop
 8011106:	3708      	adds	r7, #8
 8011108:	46bd      	mov	sp, r7
 801110a:	bd80      	pop	{r7, pc}

0801110c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801110c:	b580      	push	{r7, lr}
 801110e:	b082      	sub	sp, #8
 8011110:	af00      	add	r7, sp, #0
 8011112:	6078      	str	r0, [r7, #4]
 8011114:	460b      	mov	r3, r1
 8011116:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801111e:	78fa      	ldrb	r2, [r7, #3]
 8011120:	6879      	ldr	r1, [r7, #4]
 8011122:	4613      	mov	r3, r2
 8011124:	00db      	lsls	r3, r3, #3
 8011126:	4413      	add	r3, r2
 8011128:	009b      	lsls	r3, r3, #2
 801112a:	440b      	add	r3, r1
 801112c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8011130:	681a      	ldr	r2, [r3, #0]
 8011132:	78fb      	ldrb	r3, [r7, #3]
 8011134:	4619      	mov	r1, r3
 8011136:	f7fe fb51 	bl	800f7dc <USBD_LL_DataOutStage>
}
 801113a:	bf00      	nop
 801113c:	3708      	adds	r7, #8
 801113e:	46bd      	mov	sp, r7
 8011140:	bd80      	pop	{r7, pc}

08011142 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011142:	b580      	push	{r7, lr}
 8011144:	b082      	sub	sp, #8
 8011146:	af00      	add	r7, sp, #0
 8011148:	6078      	str	r0, [r7, #4]
 801114a:	460b      	mov	r3, r1
 801114c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8011154:	78fa      	ldrb	r2, [r7, #3]
 8011156:	6879      	ldr	r1, [r7, #4]
 8011158:	4613      	mov	r3, r2
 801115a:	00db      	lsls	r3, r3, #3
 801115c:	4413      	add	r3, r2
 801115e:	009b      	lsls	r3, r3, #2
 8011160:	440b      	add	r3, r1
 8011162:	3320      	adds	r3, #32
 8011164:	681a      	ldr	r2, [r3, #0]
 8011166:	78fb      	ldrb	r3, [r7, #3]
 8011168:	4619      	mov	r1, r3
 801116a:	f7fe fbf3 	bl	800f954 <USBD_LL_DataInStage>
}
 801116e:	bf00      	nop
 8011170:	3708      	adds	r7, #8
 8011172:	46bd      	mov	sp, r7
 8011174:	bd80      	pop	{r7, pc}

08011176 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011176:	b580      	push	{r7, lr}
 8011178:	b082      	sub	sp, #8
 801117a:	af00      	add	r7, sp, #0
 801117c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011184:	4618      	mov	r0, r3
 8011186:	f7fe fd37 	bl	800fbf8 <USBD_LL_SOF>
}
 801118a:	bf00      	nop
 801118c:	3708      	adds	r7, #8
 801118e:	46bd      	mov	sp, r7
 8011190:	bd80      	pop	{r7, pc}

08011192 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011192:	b580      	push	{r7, lr}
 8011194:	b084      	sub	sp, #16
 8011196:	af00      	add	r7, sp, #0
 8011198:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801119a:	2301      	movs	r3, #1
 801119c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	79db      	ldrb	r3, [r3, #7]
 80111a2:	2b02      	cmp	r3, #2
 80111a4:	d001      	beq.n	80111aa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80111a6:	f7f6 f823 	bl	80071f0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80111b0:	7bfa      	ldrb	r2, [r7, #15]
 80111b2:	4611      	mov	r1, r2
 80111b4:	4618      	mov	r0, r3
 80111b6:	f7fe fcdb 	bl	800fb70 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80111c0:	4618      	mov	r0, r3
 80111c2:	f7fe fc82 	bl	800faca <USBD_LL_Reset>
}
 80111c6:	bf00      	nop
 80111c8:	3710      	adds	r7, #16
 80111ca:	46bd      	mov	sp, r7
 80111cc:	bd80      	pop	{r7, pc}
	...

080111d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80111d0:	b580      	push	{r7, lr}
 80111d2:	b082      	sub	sp, #8
 80111d4:	af00      	add	r7, sp, #0
 80111d6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80111de:	4618      	mov	r0, r3
 80111e0:	f7fe fcd6 	bl	800fb90 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	687a      	ldr	r2, [r7, #4]
 80111f0:	6812      	ldr	r2, [r2, #0]
 80111f2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80111f6:	f043 0301 	orr.w	r3, r3, #1
 80111fa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	7adb      	ldrb	r3, [r3, #11]
 8011200:	2b00      	cmp	r3, #0
 8011202:	d005      	beq.n	8011210 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011204:	4b04      	ldr	r3, [pc, #16]	@ (8011218 <HAL_PCD_SuspendCallback+0x48>)
 8011206:	691b      	ldr	r3, [r3, #16]
 8011208:	4a03      	ldr	r2, [pc, #12]	@ (8011218 <HAL_PCD_SuspendCallback+0x48>)
 801120a:	f043 0306 	orr.w	r3, r3, #6
 801120e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011210:	bf00      	nop
 8011212:	3708      	adds	r7, #8
 8011214:	46bd      	mov	sp, r7
 8011216:	bd80      	pop	{r7, pc}
 8011218:	e000ed00 	.word	0xe000ed00

0801121c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801121c:	b580      	push	{r7, lr}
 801121e:	b082      	sub	sp, #8
 8011220:	af00      	add	r7, sp, #0
 8011222:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801122a:	4618      	mov	r0, r3
 801122c:	f7fe fccc 	bl	800fbc8 <USBD_LL_Resume>
}
 8011230:	bf00      	nop
 8011232:	3708      	adds	r7, #8
 8011234:	46bd      	mov	sp, r7
 8011236:	bd80      	pop	{r7, pc}

08011238 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011238:	b580      	push	{r7, lr}
 801123a:	b082      	sub	sp, #8
 801123c:	af00      	add	r7, sp, #0
 801123e:	6078      	str	r0, [r7, #4]
 8011240:	460b      	mov	r3, r1
 8011242:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801124a:	78fa      	ldrb	r2, [r7, #3]
 801124c:	4611      	mov	r1, r2
 801124e:	4618      	mov	r0, r3
 8011250:	f7fe fd24 	bl	800fc9c <USBD_LL_IsoOUTIncomplete>
}
 8011254:	bf00      	nop
 8011256:	3708      	adds	r7, #8
 8011258:	46bd      	mov	sp, r7
 801125a:	bd80      	pop	{r7, pc}

0801125c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801125c:	b580      	push	{r7, lr}
 801125e:	b082      	sub	sp, #8
 8011260:	af00      	add	r7, sp, #0
 8011262:	6078      	str	r0, [r7, #4]
 8011264:	460b      	mov	r3, r1
 8011266:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801126e:	78fa      	ldrb	r2, [r7, #3]
 8011270:	4611      	mov	r1, r2
 8011272:	4618      	mov	r0, r3
 8011274:	f7fe fce0 	bl	800fc38 <USBD_LL_IsoINIncomplete>
}
 8011278:	bf00      	nop
 801127a:	3708      	adds	r7, #8
 801127c:	46bd      	mov	sp, r7
 801127e:	bd80      	pop	{r7, pc}

08011280 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011280:	b580      	push	{r7, lr}
 8011282:	b082      	sub	sp, #8
 8011284:	af00      	add	r7, sp, #0
 8011286:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801128e:	4618      	mov	r0, r3
 8011290:	f7fe fd36 	bl	800fd00 <USBD_LL_DevConnected>
}
 8011294:	bf00      	nop
 8011296:	3708      	adds	r7, #8
 8011298:	46bd      	mov	sp, r7
 801129a:	bd80      	pop	{r7, pc}

0801129c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801129c:	b580      	push	{r7, lr}
 801129e:	b082      	sub	sp, #8
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80112aa:	4618      	mov	r0, r3
 80112ac:	f7fe fd33 	bl	800fd16 <USBD_LL_DevDisconnected>
}
 80112b0:	bf00      	nop
 80112b2:	3708      	adds	r7, #8
 80112b4:	46bd      	mov	sp, r7
 80112b6:	bd80      	pop	{r7, pc}

080112b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80112b8:	b580      	push	{r7, lr}
 80112ba:	b082      	sub	sp, #8
 80112bc:	af00      	add	r7, sp, #0
 80112be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	781b      	ldrb	r3, [r3, #0]
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d13c      	bne.n	8011342 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80112c8:	4a20      	ldr	r2, [pc, #128]	@ (801134c <USBD_LL_Init+0x94>)
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	4a1e      	ldr	r2, [pc, #120]	@ (801134c <USBD_LL_Init+0x94>)
 80112d4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80112d8:	4b1c      	ldr	r3, [pc, #112]	@ (801134c <USBD_LL_Init+0x94>)
 80112da:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80112de:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80112e0:	4b1a      	ldr	r3, [pc, #104]	@ (801134c <USBD_LL_Init+0x94>)
 80112e2:	2204      	movs	r2, #4
 80112e4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80112e6:	4b19      	ldr	r3, [pc, #100]	@ (801134c <USBD_LL_Init+0x94>)
 80112e8:	2202      	movs	r2, #2
 80112ea:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80112ec:	4b17      	ldr	r3, [pc, #92]	@ (801134c <USBD_LL_Init+0x94>)
 80112ee:	2200      	movs	r2, #0
 80112f0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80112f2:	4b16      	ldr	r3, [pc, #88]	@ (801134c <USBD_LL_Init+0x94>)
 80112f4:	2202      	movs	r2, #2
 80112f6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80112f8:	4b14      	ldr	r3, [pc, #80]	@ (801134c <USBD_LL_Init+0x94>)
 80112fa:	2201      	movs	r2, #1
 80112fc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80112fe:	4b13      	ldr	r3, [pc, #76]	@ (801134c <USBD_LL_Init+0x94>)
 8011300:	2200      	movs	r2, #0
 8011302:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8011304:	4b11      	ldr	r3, [pc, #68]	@ (801134c <USBD_LL_Init+0x94>)
 8011306:	2200      	movs	r2, #0
 8011308:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 801130a:	4b10      	ldr	r3, [pc, #64]	@ (801134c <USBD_LL_Init+0x94>)
 801130c:	2201      	movs	r2, #1
 801130e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011310:	4b0e      	ldr	r3, [pc, #56]	@ (801134c <USBD_LL_Init+0x94>)
 8011312:	2200      	movs	r2, #0
 8011314:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8011316:	480d      	ldr	r0, [pc, #52]	@ (801134c <USBD_LL_Init+0x94>)
 8011318:	f7f8 fd48 	bl	8009dac <HAL_PCD_Init>
 801131c:	4603      	mov	r3, r0
 801131e:	2b00      	cmp	r3, #0
 8011320:	d001      	beq.n	8011326 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8011322:	f7f5 ff65 	bl	80071f0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8011326:	2180      	movs	r1, #128	@ 0x80
 8011328:	4808      	ldr	r0, [pc, #32]	@ (801134c <USBD_LL_Init+0x94>)
 801132a:	f7f9 ff74 	bl	800b216 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801132e:	2240      	movs	r2, #64	@ 0x40
 8011330:	2100      	movs	r1, #0
 8011332:	4806      	ldr	r0, [pc, #24]	@ (801134c <USBD_LL_Init+0x94>)
 8011334:	f7f9 ff28 	bl	800b188 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011338:	2280      	movs	r2, #128	@ 0x80
 801133a:	2101      	movs	r1, #1
 801133c:	4803      	ldr	r0, [pc, #12]	@ (801134c <USBD_LL_Init+0x94>)
 801133e:	f7f9 ff23 	bl	800b188 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8011342:	2300      	movs	r3, #0
}
 8011344:	4618      	mov	r0, r3
 8011346:	3708      	adds	r7, #8
 8011348:	46bd      	mov	sp, r7
 801134a:	bd80      	pop	{r7, pc}
 801134c:	20004f50 	.word	0x20004f50

08011350 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011350:	b580      	push	{r7, lr}
 8011352:	b084      	sub	sp, #16
 8011354:	af00      	add	r7, sp, #0
 8011356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011358:	2300      	movs	r3, #0
 801135a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801135c:	2300      	movs	r3, #0
 801135e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011366:	4618      	mov	r0, r3
 8011368:	f7f8 fe2f 	bl	8009fca <HAL_PCD_Start>
 801136c:	4603      	mov	r3, r0
 801136e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011370:	7bfb      	ldrb	r3, [r7, #15]
 8011372:	4618      	mov	r0, r3
 8011374:	f000 f942 	bl	80115fc <USBD_Get_USB_Status>
 8011378:	4603      	mov	r3, r0
 801137a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801137c:	7bbb      	ldrb	r3, [r7, #14]
}
 801137e:	4618      	mov	r0, r3
 8011380:	3710      	adds	r7, #16
 8011382:	46bd      	mov	sp, r7
 8011384:	bd80      	pop	{r7, pc}

08011386 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011386:	b580      	push	{r7, lr}
 8011388:	b084      	sub	sp, #16
 801138a:	af00      	add	r7, sp, #0
 801138c:	6078      	str	r0, [r7, #4]
 801138e:	4608      	mov	r0, r1
 8011390:	4611      	mov	r1, r2
 8011392:	461a      	mov	r2, r3
 8011394:	4603      	mov	r3, r0
 8011396:	70fb      	strb	r3, [r7, #3]
 8011398:	460b      	mov	r3, r1
 801139a:	70bb      	strb	r3, [r7, #2]
 801139c:	4613      	mov	r3, r2
 801139e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80113a0:	2300      	movs	r3, #0
 80113a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80113a4:	2300      	movs	r3, #0
 80113a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80113ae:	78bb      	ldrb	r3, [r7, #2]
 80113b0:	883a      	ldrh	r2, [r7, #0]
 80113b2:	78f9      	ldrb	r1, [r7, #3]
 80113b4:	f7f9 fb03 	bl	800a9be <HAL_PCD_EP_Open>
 80113b8:	4603      	mov	r3, r0
 80113ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80113bc:	7bfb      	ldrb	r3, [r7, #15]
 80113be:	4618      	mov	r0, r3
 80113c0:	f000 f91c 	bl	80115fc <USBD_Get_USB_Status>
 80113c4:	4603      	mov	r3, r0
 80113c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80113c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80113ca:	4618      	mov	r0, r3
 80113cc:	3710      	adds	r7, #16
 80113ce:	46bd      	mov	sp, r7
 80113d0:	bd80      	pop	{r7, pc}

080113d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80113d2:	b580      	push	{r7, lr}
 80113d4:	b084      	sub	sp, #16
 80113d6:	af00      	add	r7, sp, #0
 80113d8:	6078      	str	r0, [r7, #4]
 80113da:	460b      	mov	r3, r1
 80113dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80113de:	2300      	movs	r3, #0
 80113e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80113e2:	2300      	movs	r3, #0
 80113e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80113ec:	78fa      	ldrb	r2, [r7, #3]
 80113ee:	4611      	mov	r1, r2
 80113f0:	4618      	mov	r0, r3
 80113f2:	f7f9 fb4e 	bl	800aa92 <HAL_PCD_EP_Close>
 80113f6:	4603      	mov	r3, r0
 80113f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80113fa:	7bfb      	ldrb	r3, [r7, #15]
 80113fc:	4618      	mov	r0, r3
 80113fe:	f000 f8fd 	bl	80115fc <USBD_Get_USB_Status>
 8011402:	4603      	mov	r3, r0
 8011404:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011406:	7bbb      	ldrb	r3, [r7, #14]
}
 8011408:	4618      	mov	r0, r3
 801140a:	3710      	adds	r7, #16
 801140c:	46bd      	mov	sp, r7
 801140e:	bd80      	pop	{r7, pc}

08011410 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011410:	b580      	push	{r7, lr}
 8011412:	b084      	sub	sp, #16
 8011414:	af00      	add	r7, sp, #0
 8011416:	6078      	str	r0, [r7, #4]
 8011418:	460b      	mov	r3, r1
 801141a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801141c:	2300      	movs	r3, #0
 801141e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011420:	2300      	movs	r3, #0
 8011422:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801142a:	78fa      	ldrb	r2, [r7, #3]
 801142c:	4611      	mov	r1, r2
 801142e:	4618      	mov	r0, r3
 8011430:	f7f9 fc06 	bl	800ac40 <HAL_PCD_EP_SetStall>
 8011434:	4603      	mov	r3, r0
 8011436:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011438:	7bfb      	ldrb	r3, [r7, #15]
 801143a:	4618      	mov	r0, r3
 801143c:	f000 f8de 	bl	80115fc <USBD_Get_USB_Status>
 8011440:	4603      	mov	r3, r0
 8011442:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011444:	7bbb      	ldrb	r3, [r7, #14]
}
 8011446:	4618      	mov	r0, r3
 8011448:	3710      	adds	r7, #16
 801144a:	46bd      	mov	sp, r7
 801144c:	bd80      	pop	{r7, pc}

0801144e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801144e:	b580      	push	{r7, lr}
 8011450:	b084      	sub	sp, #16
 8011452:	af00      	add	r7, sp, #0
 8011454:	6078      	str	r0, [r7, #4]
 8011456:	460b      	mov	r3, r1
 8011458:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801145a:	2300      	movs	r3, #0
 801145c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801145e:	2300      	movs	r3, #0
 8011460:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011468:	78fa      	ldrb	r2, [r7, #3]
 801146a:	4611      	mov	r1, r2
 801146c:	4618      	mov	r0, r3
 801146e:	f7f9 fc4a 	bl	800ad06 <HAL_PCD_EP_ClrStall>
 8011472:	4603      	mov	r3, r0
 8011474:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011476:	7bfb      	ldrb	r3, [r7, #15]
 8011478:	4618      	mov	r0, r3
 801147a:	f000 f8bf 	bl	80115fc <USBD_Get_USB_Status>
 801147e:	4603      	mov	r3, r0
 8011480:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011482:	7bbb      	ldrb	r3, [r7, #14]
}
 8011484:	4618      	mov	r0, r3
 8011486:	3710      	adds	r7, #16
 8011488:	46bd      	mov	sp, r7
 801148a:	bd80      	pop	{r7, pc}

0801148c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801148c:	b480      	push	{r7}
 801148e:	b085      	sub	sp, #20
 8011490:	af00      	add	r7, sp, #0
 8011492:	6078      	str	r0, [r7, #4]
 8011494:	460b      	mov	r3, r1
 8011496:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801149e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80114a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	da0b      	bge.n	80114c0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80114a8:	78fb      	ldrb	r3, [r7, #3]
 80114aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80114ae:	68f9      	ldr	r1, [r7, #12]
 80114b0:	4613      	mov	r3, r2
 80114b2:	00db      	lsls	r3, r3, #3
 80114b4:	4413      	add	r3, r2
 80114b6:	009b      	lsls	r3, r3, #2
 80114b8:	440b      	add	r3, r1
 80114ba:	3316      	adds	r3, #22
 80114bc:	781b      	ldrb	r3, [r3, #0]
 80114be:	e00b      	b.n	80114d8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80114c0:	78fb      	ldrb	r3, [r7, #3]
 80114c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80114c6:	68f9      	ldr	r1, [r7, #12]
 80114c8:	4613      	mov	r3, r2
 80114ca:	00db      	lsls	r3, r3, #3
 80114cc:	4413      	add	r3, r2
 80114ce:	009b      	lsls	r3, r3, #2
 80114d0:	440b      	add	r3, r1
 80114d2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80114d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80114d8:	4618      	mov	r0, r3
 80114da:	3714      	adds	r7, #20
 80114dc:	46bd      	mov	sp, r7
 80114de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e2:	4770      	bx	lr

080114e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80114e4:	b580      	push	{r7, lr}
 80114e6:	b084      	sub	sp, #16
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	6078      	str	r0, [r7, #4]
 80114ec:	460b      	mov	r3, r1
 80114ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80114f0:	2300      	movs	r3, #0
 80114f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80114f4:	2300      	movs	r3, #0
 80114f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80114fe:	78fa      	ldrb	r2, [r7, #3]
 8011500:	4611      	mov	r1, r2
 8011502:	4618      	mov	r0, r3
 8011504:	f7f9 fa37 	bl	800a976 <HAL_PCD_SetAddress>
 8011508:	4603      	mov	r3, r0
 801150a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801150c:	7bfb      	ldrb	r3, [r7, #15]
 801150e:	4618      	mov	r0, r3
 8011510:	f000 f874 	bl	80115fc <USBD_Get_USB_Status>
 8011514:	4603      	mov	r3, r0
 8011516:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011518:	7bbb      	ldrb	r3, [r7, #14]
}
 801151a:	4618      	mov	r0, r3
 801151c:	3710      	adds	r7, #16
 801151e:	46bd      	mov	sp, r7
 8011520:	bd80      	pop	{r7, pc}

08011522 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011522:	b580      	push	{r7, lr}
 8011524:	b086      	sub	sp, #24
 8011526:	af00      	add	r7, sp, #0
 8011528:	60f8      	str	r0, [r7, #12]
 801152a:	607a      	str	r2, [r7, #4]
 801152c:	603b      	str	r3, [r7, #0]
 801152e:	460b      	mov	r3, r1
 8011530:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011532:	2300      	movs	r3, #0
 8011534:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011536:	2300      	movs	r3, #0
 8011538:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011540:	7af9      	ldrb	r1, [r7, #11]
 8011542:	683b      	ldr	r3, [r7, #0]
 8011544:	687a      	ldr	r2, [r7, #4]
 8011546:	f7f9 fb41 	bl	800abcc <HAL_PCD_EP_Transmit>
 801154a:	4603      	mov	r3, r0
 801154c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801154e:	7dfb      	ldrb	r3, [r7, #23]
 8011550:	4618      	mov	r0, r3
 8011552:	f000 f853 	bl	80115fc <USBD_Get_USB_Status>
 8011556:	4603      	mov	r3, r0
 8011558:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801155a:	7dbb      	ldrb	r3, [r7, #22]
}
 801155c:	4618      	mov	r0, r3
 801155e:	3718      	adds	r7, #24
 8011560:	46bd      	mov	sp, r7
 8011562:	bd80      	pop	{r7, pc}

08011564 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011564:	b580      	push	{r7, lr}
 8011566:	b086      	sub	sp, #24
 8011568:	af00      	add	r7, sp, #0
 801156a:	60f8      	str	r0, [r7, #12]
 801156c:	607a      	str	r2, [r7, #4]
 801156e:	603b      	str	r3, [r7, #0]
 8011570:	460b      	mov	r3, r1
 8011572:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011574:	2300      	movs	r3, #0
 8011576:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011578:	2300      	movs	r3, #0
 801157a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011582:	7af9      	ldrb	r1, [r7, #11]
 8011584:	683b      	ldr	r3, [r7, #0]
 8011586:	687a      	ldr	r2, [r7, #4]
 8011588:	f7f9 facd 	bl	800ab26 <HAL_PCD_EP_Receive>
 801158c:	4603      	mov	r3, r0
 801158e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011590:	7dfb      	ldrb	r3, [r7, #23]
 8011592:	4618      	mov	r0, r3
 8011594:	f000 f832 	bl	80115fc <USBD_Get_USB_Status>
 8011598:	4603      	mov	r3, r0
 801159a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801159c:	7dbb      	ldrb	r3, [r7, #22]
}
 801159e:	4618      	mov	r0, r3
 80115a0:	3718      	adds	r7, #24
 80115a2:	46bd      	mov	sp, r7
 80115a4:	bd80      	pop	{r7, pc}

080115a6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80115a6:	b580      	push	{r7, lr}
 80115a8:	b082      	sub	sp, #8
 80115aa:	af00      	add	r7, sp, #0
 80115ac:	6078      	str	r0, [r7, #4]
 80115ae:	460b      	mov	r3, r1
 80115b0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80115b8:	78fa      	ldrb	r2, [r7, #3]
 80115ba:	4611      	mov	r1, r2
 80115bc:	4618      	mov	r0, r3
 80115be:	f7f9 faed 	bl	800ab9c <HAL_PCD_EP_GetRxCount>
 80115c2:	4603      	mov	r3, r0
}
 80115c4:	4618      	mov	r0, r3
 80115c6:	3708      	adds	r7, #8
 80115c8:	46bd      	mov	sp, r7
 80115ca:	bd80      	pop	{r7, pc}

080115cc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80115cc:	b480      	push	{r7}
 80115ce:	b083      	sub	sp, #12
 80115d0:	af00      	add	r7, sp, #0
 80115d2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80115d4:	4b03      	ldr	r3, [pc, #12]	@ (80115e4 <USBD_static_malloc+0x18>)
}
 80115d6:	4618      	mov	r0, r3
 80115d8:	370c      	adds	r7, #12
 80115da:	46bd      	mov	sp, r7
 80115dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e0:	4770      	bx	lr
 80115e2:	bf00      	nop
 80115e4:	20005434 	.word	0x20005434

080115e8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80115e8:	b480      	push	{r7}
 80115ea:	b083      	sub	sp, #12
 80115ec:	af00      	add	r7, sp, #0
 80115ee:	6078      	str	r0, [r7, #4]

}
 80115f0:	bf00      	nop
 80115f2:	370c      	adds	r7, #12
 80115f4:	46bd      	mov	sp, r7
 80115f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115fa:	4770      	bx	lr

080115fc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80115fc:	b480      	push	{r7}
 80115fe:	b085      	sub	sp, #20
 8011600:	af00      	add	r7, sp, #0
 8011602:	4603      	mov	r3, r0
 8011604:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011606:	2300      	movs	r3, #0
 8011608:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801160a:	79fb      	ldrb	r3, [r7, #7]
 801160c:	2b03      	cmp	r3, #3
 801160e:	d817      	bhi.n	8011640 <USBD_Get_USB_Status+0x44>
 8011610:	a201      	add	r2, pc, #4	@ (adr r2, 8011618 <USBD_Get_USB_Status+0x1c>)
 8011612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011616:	bf00      	nop
 8011618:	08011629 	.word	0x08011629
 801161c:	0801162f 	.word	0x0801162f
 8011620:	08011635 	.word	0x08011635
 8011624:	0801163b 	.word	0x0801163b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011628:	2300      	movs	r3, #0
 801162a:	73fb      	strb	r3, [r7, #15]
    break;
 801162c:	e00b      	b.n	8011646 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801162e:	2303      	movs	r3, #3
 8011630:	73fb      	strb	r3, [r7, #15]
    break;
 8011632:	e008      	b.n	8011646 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011634:	2301      	movs	r3, #1
 8011636:	73fb      	strb	r3, [r7, #15]
    break;
 8011638:	e005      	b.n	8011646 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801163a:	2303      	movs	r3, #3
 801163c:	73fb      	strb	r3, [r7, #15]
    break;
 801163e:	e002      	b.n	8011646 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011640:	2303      	movs	r3, #3
 8011642:	73fb      	strb	r3, [r7, #15]
    break;
 8011644:	bf00      	nop
  }
  return usb_status;
 8011646:	7bfb      	ldrb	r3, [r7, #15]
}
 8011648:	4618      	mov	r0, r3
 801164a:	3714      	adds	r7, #20
 801164c:	46bd      	mov	sp, r7
 801164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011652:	4770      	bx	lr

08011654 <_strtol_l.constprop.0>:
 8011654:	2b24      	cmp	r3, #36	@ 0x24
 8011656:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801165a:	4686      	mov	lr, r0
 801165c:	4690      	mov	r8, r2
 801165e:	d801      	bhi.n	8011664 <_strtol_l.constprop.0+0x10>
 8011660:	2b01      	cmp	r3, #1
 8011662:	d106      	bne.n	8011672 <_strtol_l.constprop.0+0x1e>
 8011664:	f000 f8da 	bl	801181c <__errno>
 8011668:	2316      	movs	r3, #22
 801166a:	6003      	str	r3, [r0, #0]
 801166c:	2000      	movs	r0, #0
 801166e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011672:	4834      	ldr	r0, [pc, #208]	@ (8011744 <_strtol_l.constprop.0+0xf0>)
 8011674:	460d      	mov	r5, r1
 8011676:	462a      	mov	r2, r5
 8011678:	f815 4b01 	ldrb.w	r4, [r5], #1
 801167c:	5d06      	ldrb	r6, [r0, r4]
 801167e:	f016 0608 	ands.w	r6, r6, #8
 8011682:	d1f8      	bne.n	8011676 <_strtol_l.constprop.0+0x22>
 8011684:	2c2d      	cmp	r4, #45	@ 0x2d
 8011686:	d12d      	bne.n	80116e4 <_strtol_l.constprop.0+0x90>
 8011688:	782c      	ldrb	r4, [r5, #0]
 801168a:	2601      	movs	r6, #1
 801168c:	1c95      	adds	r5, r2, #2
 801168e:	f033 0210 	bics.w	r2, r3, #16
 8011692:	d109      	bne.n	80116a8 <_strtol_l.constprop.0+0x54>
 8011694:	2c30      	cmp	r4, #48	@ 0x30
 8011696:	d12a      	bne.n	80116ee <_strtol_l.constprop.0+0x9a>
 8011698:	782a      	ldrb	r2, [r5, #0]
 801169a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801169e:	2a58      	cmp	r2, #88	@ 0x58
 80116a0:	d125      	bne.n	80116ee <_strtol_l.constprop.0+0x9a>
 80116a2:	786c      	ldrb	r4, [r5, #1]
 80116a4:	2310      	movs	r3, #16
 80116a6:	3502      	adds	r5, #2
 80116a8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80116ac:	f10c 3cff 	add.w	ip, ip, #4294967295
 80116b0:	2200      	movs	r2, #0
 80116b2:	fbbc f9f3 	udiv	r9, ip, r3
 80116b6:	4610      	mov	r0, r2
 80116b8:	fb03 ca19 	mls	sl, r3, r9, ip
 80116bc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80116c0:	2f09      	cmp	r7, #9
 80116c2:	d81b      	bhi.n	80116fc <_strtol_l.constprop.0+0xa8>
 80116c4:	463c      	mov	r4, r7
 80116c6:	42a3      	cmp	r3, r4
 80116c8:	dd27      	ble.n	801171a <_strtol_l.constprop.0+0xc6>
 80116ca:	1c57      	adds	r7, r2, #1
 80116cc:	d007      	beq.n	80116de <_strtol_l.constprop.0+0x8a>
 80116ce:	4581      	cmp	r9, r0
 80116d0:	d320      	bcc.n	8011714 <_strtol_l.constprop.0+0xc0>
 80116d2:	d101      	bne.n	80116d8 <_strtol_l.constprop.0+0x84>
 80116d4:	45a2      	cmp	sl, r4
 80116d6:	db1d      	blt.n	8011714 <_strtol_l.constprop.0+0xc0>
 80116d8:	fb00 4003 	mla	r0, r0, r3, r4
 80116dc:	2201      	movs	r2, #1
 80116de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80116e2:	e7eb      	b.n	80116bc <_strtol_l.constprop.0+0x68>
 80116e4:	2c2b      	cmp	r4, #43	@ 0x2b
 80116e6:	bf04      	itt	eq
 80116e8:	782c      	ldrbeq	r4, [r5, #0]
 80116ea:	1c95      	addeq	r5, r2, #2
 80116ec:	e7cf      	b.n	801168e <_strtol_l.constprop.0+0x3a>
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d1da      	bne.n	80116a8 <_strtol_l.constprop.0+0x54>
 80116f2:	2c30      	cmp	r4, #48	@ 0x30
 80116f4:	bf0c      	ite	eq
 80116f6:	2308      	moveq	r3, #8
 80116f8:	230a      	movne	r3, #10
 80116fa:	e7d5      	b.n	80116a8 <_strtol_l.constprop.0+0x54>
 80116fc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011700:	2f19      	cmp	r7, #25
 8011702:	d801      	bhi.n	8011708 <_strtol_l.constprop.0+0xb4>
 8011704:	3c37      	subs	r4, #55	@ 0x37
 8011706:	e7de      	b.n	80116c6 <_strtol_l.constprop.0+0x72>
 8011708:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801170c:	2f19      	cmp	r7, #25
 801170e:	d804      	bhi.n	801171a <_strtol_l.constprop.0+0xc6>
 8011710:	3c57      	subs	r4, #87	@ 0x57
 8011712:	e7d8      	b.n	80116c6 <_strtol_l.constprop.0+0x72>
 8011714:	f04f 32ff 	mov.w	r2, #4294967295
 8011718:	e7e1      	b.n	80116de <_strtol_l.constprop.0+0x8a>
 801171a:	1c53      	adds	r3, r2, #1
 801171c:	d108      	bne.n	8011730 <_strtol_l.constprop.0+0xdc>
 801171e:	2322      	movs	r3, #34	@ 0x22
 8011720:	f8ce 3000 	str.w	r3, [lr]
 8011724:	4660      	mov	r0, ip
 8011726:	f1b8 0f00 	cmp.w	r8, #0
 801172a:	d0a0      	beq.n	801166e <_strtol_l.constprop.0+0x1a>
 801172c:	1e69      	subs	r1, r5, #1
 801172e:	e006      	b.n	801173e <_strtol_l.constprop.0+0xea>
 8011730:	b106      	cbz	r6, 8011734 <_strtol_l.constprop.0+0xe0>
 8011732:	4240      	negs	r0, r0
 8011734:	f1b8 0f00 	cmp.w	r8, #0
 8011738:	d099      	beq.n	801166e <_strtol_l.constprop.0+0x1a>
 801173a:	2a00      	cmp	r2, #0
 801173c:	d1f6      	bne.n	801172c <_strtol_l.constprop.0+0xd8>
 801173e:	f8c8 1000 	str.w	r1, [r8]
 8011742:	e794      	b.n	801166e <_strtol_l.constprop.0+0x1a>
 8011744:	08012549 	.word	0x08012549

08011748 <strtol>:
 8011748:	4613      	mov	r3, r2
 801174a:	460a      	mov	r2, r1
 801174c:	4601      	mov	r1, r0
 801174e:	4802      	ldr	r0, [pc, #8]	@ (8011758 <strtol+0x10>)
 8011750:	6800      	ldr	r0, [r0, #0]
 8011752:	f7ff bf7f 	b.w	8011654 <_strtol_l.constprop.0>
 8011756:	bf00      	nop
 8011758:	200003c8 	.word	0x200003c8

0801175c <sniprintf>:
 801175c:	b40c      	push	{r2, r3}
 801175e:	b530      	push	{r4, r5, lr}
 8011760:	4b17      	ldr	r3, [pc, #92]	@ (80117c0 <sniprintf+0x64>)
 8011762:	1e0c      	subs	r4, r1, #0
 8011764:	681d      	ldr	r5, [r3, #0]
 8011766:	b09d      	sub	sp, #116	@ 0x74
 8011768:	da08      	bge.n	801177c <sniprintf+0x20>
 801176a:	238b      	movs	r3, #139	@ 0x8b
 801176c:	602b      	str	r3, [r5, #0]
 801176e:	f04f 30ff 	mov.w	r0, #4294967295
 8011772:	b01d      	add	sp, #116	@ 0x74
 8011774:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011778:	b002      	add	sp, #8
 801177a:	4770      	bx	lr
 801177c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8011780:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011784:	bf14      	ite	ne
 8011786:	f104 33ff 	addne.w	r3, r4, #4294967295
 801178a:	4623      	moveq	r3, r4
 801178c:	9304      	str	r3, [sp, #16]
 801178e:	9307      	str	r3, [sp, #28]
 8011790:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011794:	9002      	str	r0, [sp, #8]
 8011796:	9006      	str	r0, [sp, #24]
 8011798:	f8ad 3016 	strh.w	r3, [sp, #22]
 801179c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801179e:	ab21      	add	r3, sp, #132	@ 0x84
 80117a0:	a902      	add	r1, sp, #8
 80117a2:	4628      	mov	r0, r5
 80117a4:	9301      	str	r3, [sp, #4]
 80117a6:	f000 f9cf 	bl	8011b48 <_svfiprintf_r>
 80117aa:	1c43      	adds	r3, r0, #1
 80117ac:	bfbc      	itt	lt
 80117ae:	238b      	movlt	r3, #139	@ 0x8b
 80117b0:	602b      	strlt	r3, [r5, #0]
 80117b2:	2c00      	cmp	r4, #0
 80117b4:	d0dd      	beq.n	8011772 <sniprintf+0x16>
 80117b6:	9b02      	ldr	r3, [sp, #8]
 80117b8:	2200      	movs	r2, #0
 80117ba:	701a      	strb	r2, [r3, #0]
 80117bc:	e7d9      	b.n	8011772 <sniprintf+0x16>
 80117be:	bf00      	nop
 80117c0:	200003c8 	.word	0x200003c8

080117c4 <memset>:
 80117c4:	4402      	add	r2, r0
 80117c6:	4603      	mov	r3, r0
 80117c8:	4293      	cmp	r3, r2
 80117ca:	d100      	bne.n	80117ce <memset+0xa>
 80117cc:	4770      	bx	lr
 80117ce:	f803 1b01 	strb.w	r1, [r3], #1
 80117d2:	e7f9      	b.n	80117c8 <memset+0x4>

080117d4 <strchr>:
 80117d4:	b2c9      	uxtb	r1, r1
 80117d6:	4603      	mov	r3, r0
 80117d8:	4618      	mov	r0, r3
 80117da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80117de:	b112      	cbz	r2, 80117e6 <strchr+0x12>
 80117e0:	428a      	cmp	r2, r1
 80117e2:	d1f9      	bne.n	80117d8 <strchr+0x4>
 80117e4:	4770      	bx	lr
 80117e6:	2900      	cmp	r1, #0
 80117e8:	bf18      	it	ne
 80117ea:	2000      	movne	r0, #0
 80117ec:	4770      	bx	lr

080117ee <strstr>:
 80117ee:	780a      	ldrb	r2, [r1, #0]
 80117f0:	b570      	push	{r4, r5, r6, lr}
 80117f2:	b96a      	cbnz	r2, 8011810 <strstr+0x22>
 80117f4:	bd70      	pop	{r4, r5, r6, pc}
 80117f6:	429a      	cmp	r2, r3
 80117f8:	d109      	bne.n	801180e <strstr+0x20>
 80117fa:	460c      	mov	r4, r1
 80117fc:	4605      	mov	r5, r0
 80117fe:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8011802:	2b00      	cmp	r3, #0
 8011804:	d0f6      	beq.n	80117f4 <strstr+0x6>
 8011806:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801180a:	429e      	cmp	r6, r3
 801180c:	d0f7      	beq.n	80117fe <strstr+0x10>
 801180e:	3001      	adds	r0, #1
 8011810:	7803      	ldrb	r3, [r0, #0]
 8011812:	2b00      	cmp	r3, #0
 8011814:	d1ef      	bne.n	80117f6 <strstr+0x8>
 8011816:	4618      	mov	r0, r3
 8011818:	e7ec      	b.n	80117f4 <strstr+0x6>
	...

0801181c <__errno>:
 801181c:	4b01      	ldr	r3, [pc, #4]	@ (8011824 <__errno+0x8>)
 801181e:	6818      	ldr	r0, [r3, #0]
 8011820:	4770      	bx	lr
 8011822:	bf00      	nop
 8011824:	200003c8 	.word	0x200003c8

08011828 <__libc_init_array>:
 8011828:	b570      	push	{r4, r5, r6, lr}
 801182a:	4d0d      	ldr	r5, [pc, #52]	@ (8011860 <__libc_init_array+0x38>)
 801182c:	4c0d      	ldr	r4, [pc, #52]	@ (8011864 <__libc_init_array+0x3c>)
 801182e:	1b64      	subs	r4, r4, r5
 8011830:	10a4      	asrs	r4, r4, #2
 8011832:	2600      	movs	r6, #0
 8011834:	42a6      	cmp	r6, r4
 8011836:	d109      	bne.n	801184c <__libc_init_array+0x24>
 8011838:	4d0b      	ldr	r5, [pc, #44]	@ (8011868 <__libc_init_array+0x40>)
 801183a:	4c0c      	ldr	r4, [pc, #48]	@ (801186c <__libc_init_array+0x44>)
 801183c:	f000 fc6e 	bl	801211c <_init>
 8011840:	1b64      	subs	r4, r4, r5
 8011842:	10a4      	asrs	r4, r4, #2
 8011844:	2600      	movs	r6, #0
 8011846:	42a6      	cmp	r6, r4
 8011848:	d105      	bne.n	8011856 <__libc_init_array+0x2e>
 801184a:	bd70      	pop	{r4, r5, r6, pc}
 801184c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011850:	4798      	blx	r3
 8011852:	3601      	adds	r6, #1
 8011854:	e7ee      	b.n	8011834 <__libc_init_array+0xc>
 8011856:	f855 3b04 	ldr.w	r3, [r5], #4
 801185a:	4798      	blx	r3
 801185c:	3601      	adds	r6, #1
 801185e:	e7f2      	b.n	8011846 <__libc_init_array+0x1e>
 8011860:	08012684 	.word	0x08012684
 8011864:	08012684 	.word	0x08012684
 8011868:	08012684 	.word	0x08012684
 801186c:	08012688 	.word	0x08012688

08011870 <__retarget_lock_acquire_recursive>:
 8011870:	4770      	bx	lr

08011872 <__retarget_lock_release_recursive>:
 8011872:	4770      	bx	lr

08011874 <strcpy>:
 8011874:	4603      	mov	r3, r0
 8011876:	f811 2b01 	ldrb.w	r2, [r1], #1
 801187a:	f803 2b01 	strb.w	r2, [r3], #1
 801187e:	2a00      	cmp	r2, #0
 8011880:	d1f9      	bne.n	8011876 <strcpy+0x2>
 8011882:	4770      	bx	lr

08011884 <memcpy>:
 8011884:	440a      	add	r2, r1
 8011886:	4291      	cmp	r1, r2
 8011888:	f100 33ff 	add.w	r3, r0, #4294967295
 801188c:	d100      	bne.n	8011890 <memcpy+0xc>
 801188e:	4770      	bx	lr
 8011890:	b510      	push	{r4, lr}
 8011892:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011896:	f803 4f01 	strb.w	r4, [r3, #1]!
 801189a:	4291      	cmp	r1, r2
 801189c:	d1f9      	bne.n	8011892 <memcpy+0xe>
 801189e:	bd10      	pop	{r4, pc}

080118a0 <_free_r>:
 80118a0:	b538      	push	{r3, r4, r5, lr}
 80118a2:	4605      	mov	r5, r0
 80118a4:	2900      	cmp	r1, #0
 80118a6:	d041      	beq.n	801192c <_free_r+0x8c>
 80118a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80118ac:	1f0c      	subs	r4, r1, #4
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	bfb8      	it	lt
 80118b2:	18e4      	addlt	r4, r4, r3
 80118b4:	f000 f8e0 	bl	8011a78 <__malloc_lock>
 80118b8:	4a1d      	ldr	r2, [pc, #116]	@ (8011930 <_free_r+0x90>)
 80118ba:	6813      	ldr	r3, [r2, #0]
 80118bc:	b933      	cbnz	r3, 80118cc <_free_r+0x2c>
 80118be:	6063      	str	r3, [r4, #4]
 80118c0:	6014      	str	r4, [r2, #0]
 80118c2:	4628      	mov	r0, r5
 80118c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80118c8:	f000 b8dc 	b.w	8011a84 <__malloc_unlock>
 80118cc:	42a3      	cmp	r3, r4
 80118ce:	d908      	bls.n	80118e2 <_free_r+0x42>
 80118d0:	6820      	ldr	r0, [r4, #0]
 80118d2:	1821      	adds	r1, r4, r0
 80118d4:	428b      	cmp	r3, r1
 80118d6:	bf01      	itttt	eq
 80118d8:	6819      	ldreq	r1, [r3, #0]
 80118da:	685b      	ldreq	r3, [r3, #4]
 80118dc:	1809      	addeq	r1, r1, r0
 80118de:	6021      	streq	r1, [r4, #0]
 80118e0:	e7ed      	b.n	80118be <_free_r+0x1e>
 80118e2:	461a      	mov	r2, r3
 80118e4:	685b      	ldr	r3, [r3, #4]
 80118e6:	b10b      	cbz	r3, 80118ec <_free_r+0x4c>
 80118e8:	42a3      	cmp	r3, r4
 80118ea:	d9fa      	bls.n	80118e2 <_free_r+0x42>
 80118ec:	6811      	ldr	r1, [r2, #0]
 80118ee:	1850      	adds	r0, r2, r1
 80118f0:	42a0      	cmp	r0, r4
 80118f2:	d10b      	bne.n	801190c <_free_r+0x6c>
 80118f4:	6820      	ldr	r0, [r4, #0]
 80118f6:	4401      	add	r1, r0
 80118f8:	1850      	adds	r0, r2, r1
 80118fa:	4283      	cmp	r3, r0
 80118fc:	6011      	str	r1, [r2, #0]
 80118fe:	d1e0      	bne.n	80118c2 <_free_r+0x22>
 8011900:	6818      	ldr	r0, [r3, #0]
 8011902:	685b      	ldr	r3, [r3, #4]
 8011904:	6053      	str	r3, [r2, #4]
 8011906:	4408      	add	r0, r1
 8011908:	6010      	str	r0, [r2, #0]
 801190a:	e7da      	b.n	80118c2 <_free_r+0x22>
 801190c:	d902      	bls.n	8011914 <_free_r+0x74>
 801190e:	230c      	movs	r3, #12
 8011910:	602b      	str	r3, [r5, #0]
 8011912:	e7d6      	b.n	80118c2 <_free_r+0x22>
 8011914:	6820      	ldr	r0, [r4, #0]
 8011916:	1821      	adds	r1, r4, r0
 8011918:	428b      	cmp	r3, r1
 801191a:	bf04      	itt	eq
 801191c:	6819      	ldreq	r1, [r3, #0]
 801191e:	685b      	ldreq	r3, [r3, #4]
 8011920:	6063      	str	r3, [r4, #4]
 8011922:	bf04      	itt	eq
 8011924:	1809      	addeq	r1, r1, r0
 8011926:	6021      	streq	r1, [r4, #0]
 8011928:	6054      	str	r4, [r2, #4]
 801192a:	e7ca      	b.n	80118c2 <_free_r+0x22>
 801192c:	bd38      	pop	{r3, r4, r5, pc}
 801192e:	bf00      	nop
 8011930:	20005798 	.word	0x20005798

08011934 <sbrk_aligned>:
 8011934:	b570      	push	{r4, r5, r6, lr}
 8011936:	4e0f      	ldr	r6, [pc, #60]	@ (8011974 <sbrk_aligned+0x40>)
 8011938:	460c      	mov	r4, r1
 801193a:	6831      	ldr	r1, [r6, #0]
 801193c:	4605      	mov	r5, r0
 801193e:	b911      	cbnz	r1, 8011946 <sbrk_aligned+0x12>
 8011940:	f000 fba6 	bl	8012090 <_sbrk_r>
 8011944:	6030      	str	r0, [r6, #0]
 8011946:	4621      	mov	r1, r4
 8011948:	4628      	mov	r0, r5
 801194a:	f000 fba1 	bl	8012090 <_sbrk_r>
 801194e:	1c43      	adds	r3, r0, #1
 8011950:	d103      	bne.n	801195a <sbrk_aligned+0x26>
 8011952:	f04f 34ff 	mov.w	r4, #4294967295
 8011956:	4620      	mov	r0, r4
 8011958:	bd70      	pop	{r4, r5, r6, pc}
 801195a:	1cc4      	adds	r4, r0, #3
 801195c:	f024 0403 	bic.w	r4, r4, #3
 8011960:	42a0      	cmp	r0, r4
 8011962:	d0f8      	beq.n	8011956 <sbrk_aligned+0x22>
 8011964:	1a21      	subs	r1, r4, r0
 8011966:	4628      	mov	r0, r5
 8011968:	f000 fb92 	bl	8012090 <_sbrk_r>
 801196c:	3001      	adds	r0, #1
 801196e:	d1f2      	bne.n	8011956 <sbrk_aligned+0x22>
 8011970:	e7ef      	b.n	8011952 <sbrk_aligned+0x1e>
 8011972:	bf00      	nop
 8011974:	20005794 	.word	0x20005794

08011978 <_malloc_r>:
 8011978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801197c:	1ccd      	adds	r5, r1, #3
 801197e:	f025 0503 	bic.w	r5, r5, #3
 8011982:	3508      	adds	r5, #8
 8011984:	2d0c      	cmp	r5, #12
 8011986:	bf38      	it	cc
 8011988:	250c      	movcc	r5, #12
 801198a:	2d00      	cmp	r5, #0
 801198c:	4606      	mov	r6, r0
 801198e:	db01      	blt.n	8011994 <_malloc_r+0x1c>
 8011990:	42a9      	cmp	r1, r5
 8011992:	d904      	bls.n	801199e <_malloc_r+0x26>
 8011994:	230c      	movs	r3, #12
 8011996:	6033      	str	r3, [r6, #0]
 8011998:	2000      	movs	r0, #0
 801199a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801199e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011a74 <_malloc_r+0xfc>
 80119a2:	f000 f869 	bl	8011a78 <__malloc_lock>
 80119a6:	f8d8 3000 	ldr.w	r3, [r8]
 80119aa:	461c      	mov	r4, r3
 80119ac:	bb44      	cbnz	r4, 8011a00 <_malloc_r+0x88>
 80119ae:	4629      	mov	r1, r5
 80119b0:	4630      	mov	r0, r6
 80119b2:	f7ff ffbf 	bl	8011934 <sbrk_aligned>
 80119b6:	1c43      	adds	r3, r0, #1
 80119b8:	4604      	mov	r4, r0
 80119ba:	d158      	bne.n	8011a6e <_malloc_r+0xf6>
 80119bc:	f8d8 4000 	ldr.w	r4, [r8]
 80119c0:	4627      	mov	r7, r4
 80119c2:	2f00      	cmp	r7, #0
 80119c4:	d143      	bne.n	8011a4e <_malloc_r+0xd6>
 80119c6:	2c00      	cmp	r4, #0
 80119c8:	d04b      	beq.n	8011a62 <_malloc_r+0xea>
 80119ca:	6823      	ldr	r3, [r4, #0]
 80119cc:	4639      	mov	r1, r7
 80119ce:	4630      	mov	r0, r6
 80119d0:	eb04 0903 	add.w	r9, r4, r3
 80119d4:	f000 fb5c 	bl	8012090 <_sbrk_r>
 80119d8:	4581      	cmp	r9, r0
 80119da:	d142      	bne.n	8011a62 <_malloc_r+0xea>
 80119dc:	6821      	ldr	r1, [r4, #0]
 80119de:	1a6d      	subs	r5, r5, r1
 80119e0:	4629      	mov	r1, r5
 80119e2:	4630      	mov	r0, r6
 80119e4:	f7ff ffa6 	bl	8011934 <sbrk_aligned>
 80119e8:	3001      	adds	r0, #1
 80119ea:	d03a      	beq.n	8011a62 <_malloc_r+0xea>
 80119ec:	6823      	ldr	r3, [r4, #0]
 80119ee:	442b      	add	r3, r5
 80119f0:	6023      	str	r3, [r4, #0]
 80119f2:	f8d8 3000 	ldr.w	r3, [r8]
 80119f6:	685a      	ldr	r2, [r3, #4]
 80119f8:	bb62      	cbnz	r2, 8011a54 <_malloc_r+0xdc>
 80119fa:	f8c8 7000 	str.w	r7, [r8]
 80119fe:	e00f      	b.n	8011a20 <_malloc_r+0xa8>
 8011a00:	6822      	ldr	r2, [r4, #0]
 8011a02:	1b52      	subs	r2, r2, r5
 8011a04:	d420      	bmi.n	8011a48 <_malloc_r+0xd0>
 8011a06:	2a0b      	cmp	r2, #11
 8011a08:	d917      	bls.n	8011a3a <_malloc_r+0xc2>
 8011a0a:	1961      	adds	r1, r4, r5
 8011a0c:	42a3      	cmp	r3, r4
 8011a0e:	6025      	str	r5, [r4, #0]
 8011a10:	bf18      	it	ne
 8011a12:	6059      	strne	r1, [r3, #4]
 8011a14:	6863      	ldr	r3, [r4, #4]
 8011a16:	bf08      	it	eq
 8011a18:	f8c8 1000 	streq.w	r1, [r8]
 8011a1c:	5162      	str	r2, [r4, r5]
 8011a1e:	604b      	str	r3, [r1, #4]
 8011a20:	4630      	mov	r0, r6
 8011a22:	f000 f82f 	bl	8011a84 <__malloc_unlock>
 8011a26:	f104 000b 	add.w	r0, r4, #11
 8011a2a:	1d23      	adds	r3, r4, #4
 8011a2c:	f020 0007 	bic.w	r0, r0, #7
 8011a30:	1ac2      	subs	r2, r0, r3
 8011a32:	bf1c      	itt	ne
 8011a34:	1a1b      	subne	r3, r3, r0
 8011a36:	50a3      	strne	r3, [r4, r2]
 8011a38:	e7af      	b.n	801199a <_malloc_r+0x22>
 8011a3a:	6862      	ldr	r2, [r4, #4]
 8011a3c:	42a3      	cmp	r3, r4
 8011a3e:	bf0c      	ite	eq
 8011a40:	f8c8 2000 	streq.w	r2, [r8]
 8011a44:	605a      	strne	r2, [r3, #4]
 8011a46:	e7eb      	b.n	8011a20 <_malloc_r+0xa8>
 8011a48:	4623      	mov	r3, r4
 8011a4a:	6864      	ldr	r4, [r4, #4]
 8011a4c:	e7ae      	b.n	80119ac <_malloc_r+0x34>
 8011a4e:	463c      	mov	r4, r7
 8011a50:	687f      	ldr	r7, [r7, #4]
 8011a52:	e7b6      	b.n	80119c2 <_malloc_r+0x4a>
 8011a54:	461a      	mov	r2, r3
 8011a56:	685b      	ldr	r3, [r3, #4]
 8011a58:	42a3      	cmp	r3, r4
 8011a5a:	d1fb      	bne.n	8011a54 <_malloc_r+0xdc>
 8011a5c:	2300      	movs	r3, #0
 8011a5e:	6053      	str	r3, [r2, #4]
 8011a60:	e7de      	b.n	8011a20 <_malloc_r+0xa8>
 8011a62:	230c      	movs	r3, #12
 8011a64:	6033      	str	r3, [r6, #0]
 8011a66:	4630      	mov	r0, r6
 8011a68:	f000 f80c 	bl	8011a84 <__malloc_unlock>
 8011a6c:	e794      	b.n	8011998 <_malloc_r+0x20>
 8011a6e:	6005      	str	r5, [r0, #0]
 8011a70:	e7d6      	b.n	8011a20 <_malloc_r+0xa8>
 8011a72:	bf00      	nop
 8011a74:	20005798 	.word	0x20005798

08011a78 <__malloc_lock>:
 8011a78:	4801      	ldr	r0, [pc, #4]	@ (8011a80 <__malloc_lock+0x8>)
 8011a7a:	f7ff bef9 	b.w	8011870 <__retarget_lock_acquire_recursive>
 8011a7e:	bf00      	nop
 8011a80:	20005790 	.word	0x20005790

08011a84 <__malloc_unlock>:
 8011a84:	4801      	ldr	r0, [pc, #4]	@ (8011a8c <__malloc_unlock+0x8>)
 8011a86:	f7ff bef4 	b.w	8011872 <__retarget_lock_release_recursive>
 8011a8a:	bf00      	nop
 8011a8c:	20005790 	.word	0x20005790

08011a90 <__ssputs_r>:
 8011a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a94:	688e      	ldr	r6, [r1, #8]
 8011a96:	461f      	mov	r7, r3
 8011a98:	42be      	cmp	r6, r7
 8011a9a:	680b      	ldr	r3, [r1, #0]
 8011a9c:	4682      	mov	sl, r0
 8011a9e:	460c      	mov	r4, r1
 8011aa0:	4690      	mov	r8, r2
 8011aa2:	d82d      	bhi.n	8011b00 <__ssputs_r+0x70>
 8011aa4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011aa8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011aac:	d026      	beq.n	8011afc <__ssputs_r+0x6c>
 8011aae:	6965      	ldr	r5, [r4, #20]
 8011ab0:	6909      	ldr	r1, [r1, #16]
 8011ab2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011ab6:	eba3 0901 	sub.w	r9, r3, r1
 8011aba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011abe:	1c7b      	adds	r3, r7, #1
 8011ac0:	444b      	add	r3, r9
 8011ac2:	106d      	asrs	r5, r5, #1
 8011ac4:	429d      	cmp	r5, r3
 8011ac6:	bf38      	it	cc
 8011ac8:	461d      	movcc	r5, r3
 8011aca:	0553      	lsls	r3, r2, #21
 8011acc:	d527      	bpl.n	8011b1e <__ssputs_r+0x8e>
 8011ace:	4629      	mov	r1, r5
 8011ad0:	f7ff ff52 	bl	8011978 <_malloc_r>
 8011ad4:	4606      	mov	r6, r0
 8011ad6:	b360      	cbz	r0, 8011b32 <__ssputs_r+0xa2>
 8011ad8:	6921      	ldr	r1, [r4, #16]
 8011ada:	464a      	mov	r2, r9
 8011adc:	f7ff fed2 	bl	8011884 <memcpy>
 8011ae0:	89a3      	ldrh	r3, [r4, #12]
 8011ae2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011ae6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011aea:	81a3      	strh	r3, [r4, #12]
 8011aec:	6126      	str	r6, [r4, #16]
 8011aee:	6165      	str	r5, [r4, #20]
 8011af0:	444e      	add	r6, r9
 8011af2:	eba5 0509 	sub.w	r5, r5, r9
 8011af6:	6026      	str	r6, [r4, #0]
 8011af8:	60a5      	str	r5, [r4, #8]
 8011afa:	463e      	mov	r6, r7
 8011afc:	42be      	cmp	r6, r7
 8011afe:	d900      	bls.n	8011b02 <__ssputs_r+0x72>
 8011b00:	463e      	mov	r6, r7
 8011b02:	6820      	ldr	r0, [r4, #0]
 8011b04:	4632      	mov	r2, r6
 8011b06:	4641      	mov	r1, r8
 8011b08:	f000 faa8 	bl	801205c <memmove>
 8011b0c:	68a3      	ldr	r3, [r4, #8]
 8011b0e:	1b9b      	subs	r3, r3, r6
 8011b10:	60a3      	str	r3, [r4, #8]
 8011b12:	6823      	ldr	r3, [r4, #0]
 8011b14:	4433      	add	r3, r6
 8011b16:	6023      	str	r3, [r4, #0]
 8011b18:	2000      	movs	r0, #0
 8011b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b1e:	462a      	mov	r2, r5
 8011b20:	f000 fac6 	bl	80120b0 <_realloc_r>
 8011b24:	4606      	mov	r6, r0
 8011b26:	2800      	cmp	r0, #0
 8011b28:	d1e0      	bne.n	8011aec <__ssputs_r+0x5c>
 8011b2a:	6921      	ldr	r1, [r4, #16]
 8011b2c:	4650      	mov	r0, sl
 8011b2e:	f7ff feb7 	bl	80118a0 <_free_r>
 8011b32:	230c      	movs	r3, #12
 8011b34:	f8ca 3000 	str.w	r3, [sl]
 8011b38:	89a3      	ldrh	r3, [r4, #12]
 8011b3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011b3e:	81a3      	strh	r3, [r4, #12]
 8011b40:	f04f 30ff 	mov.w	r0, #4294967295
 8011b44:	e7e9      	b.n	8011b1a <__ssputs_r+0x8a>
	...

08011b48 <_svfiprintf_r>:
 8011b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b4c:	4698      	mov	r8, r3
 8011b4e:	898b      	ldrh	r3, [r1, #12]
 8011b50:	061b      	lsls	r3, r3, #24
 8011b52:	b09d      	sub	sp, #116	@ 0x74
 8011b54:	4607      	mov	r7, r0
 8011b56:	460d      	mov	r5, r1
 8011b58:	4614      	mov	r4, r2
 8011b5a:	d510      	bpl.n	8011b7e <_svfiprintf_r+0x36>
 8011b5c:	690b      	ldr	r3, [r1, #16]
 8011b5e:	b973      	cbnz	r3, 8011b7e <_svfiprintf_r+0x36>
 8011b60:	2140      	movs	r1, #64	@ 0x40
 8011b62:	f7ff ff09 	bl	8011978 <_malloc_r>
 8011b66:	6028      	str	r0, [r5, #0]
 8011b68:	6128      	str	r0, [r5, #16]
 8011b6a:	b930      	cbnz	r0, 8011b7a <_svfiprintf_r+0x32>
 8011b6c:	230c      	movs	r3, #12
 8011b6e:	603b      	str	r3, [r7, #0]
 8011b70:	f04f 30ff 	mov.w	r0, #4294967295
 8011b74:	b01d      	add	sp, #116	@ 0x74
 8011b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b7a:	2340      	movs	r3, #64	@ 0x40
 8011b7c:	616b      	str	r3, [r5, #20]
 8011b7e:	2300      	movs	r3, #0
 8011b80:	9309      	str	r3, [sp, #36]	@ 0x24
 8011b82:	2320      	movs	r3, #32
 8011b84:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011b88:	f8cd 800c 	str.w	r8, [sp, #12]
 8011b8c:	2330      	movs	r3, #48	@ 0x30
 8011b8e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011d2c <_svfiprintf_r+0x1e4>
 8011b92:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011b96:	f04f 0901 	mov.w	r9, #1
 8011b9a:	4623      	mov	r3, r4
 8011b9c:	469a      	mov	sl, r3
 8011b9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011ba2:	b10a      	cbz	r2, 8011ba8 <_svfiprintf_r+0x60>
 8011ba4:	2a25      	cmp	r2, #37	@ 0x25
 8011ba6:	d1f9      	bne.n	8011b9c <_svfiprintf_r+0x54>
 8011ba8:	ebba 0b04 	subs.w	fp, sl, r4
 8011bac:	d00b      	beq.n	8011bc6 <_svfiprintf_r+0x7e>
 8011bae:	465b      	mov	r3, fp
 8011bb0:	4622      	mov	r2, r4
 8011bb2:	4629      	mov	r1, r5
 8011bb4:	4638      	mov	r0, r7
 8011bb6:	f7ff ff6b 	bl	8011a90 <__ssputs_r>
 8011bba:	3001      	adds	r0, #1
 8011bbc:	f000 80a7 	beq.w	8011d0e <_svfiprintf_r+0x1c6>
 8011bc0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011bc2:	445a      	add	r2, fp
 8011bc4:	9209      	str	r2, [sp, #36]	@ 0x24
 8011bc6:	f89a 3000 	ldrb.w	r3, [sl]
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	f000 809f 	beq.w	8011d0e <_svfiprintf_r+0x1c6>
 8011bd0:	2300      	movs	r3, #0
 8011bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8011bd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011bda:	f10a 0a01 	add.w	sl, sl, #1
 8011bde:	9304      	str	r3, [sp, #16]
 8011be0:	9307      	str	r3, [sp, #28]
 8011be2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011be6:	931a      	str	r3, [sp, #104]	@ 0x68
 8011be8:	4654      	mov	r4, sl
 8011bea:	2205      	movs	r2, #5
 8011bec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011bf0:	484e      	ldr	r0, [pc, #312]	@ (8011d2c <_svfiprintf_r+0x1e4>)
 8011bf2:	f7ee fb0d 	bl	8000210 <memchr>
 8011bf6:	9a04      	ldr	r2, [sp, #16]
 8011bf8:	b9d8      	cbnz	r0, 8011c32 <_svfiprintf_r+0xea>
 8011bfa:	06d0      	lsls	r0, r2, #27
 8011bfc:	bf44      	itt	mi
 8011bfe:	2320      	movmi	r3, #32
 8011c00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011c04:	0711      	lsls	r1, r2, #28
 8011c06:	bf44      	itt	mi
 8011c08:	232b      	movmi	r3, #43	@ 0x2b
 8011c0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011c0e:	f89a 3000 	ldrb.w	r3, [sl]
 8011c12:	2b2a      	cmp	r3, #42	@ 0x2a
 8011c14:	d015      	beq.n	8011c42 <_svfiprintf_r+0xfa>
 8011c16:	9a07      	ldr	r2, [sp, #28]
 8011c18:	4654      	mov	r4, sl
 8011c1a:	2000      	movs	r0, #0
 8011c1c:	f04f 0c0a 	mov.w	ip, #10
 8011c20:	4621      	mov	r1, r4
 8011c22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011c26:	3b30      	subs	r3, #48	@ 0x30
 8011c28:	2b09      	cmp	r3, #9
 8011c2a:	d94b      	bls.n	8011cc4 <_svfiprintf_r+0x17c>
 8011c2c:	b1b0      	cbz	r0, 8011c5c <_svfiprintf_r+0x114>
 8011c2e:	9207      	str	r2, [sp, #28]
 8011c30:	e014      	b.n	8011c5c <_svfiprintf_r+0x114>
 8011c32:	eba0 0308 	sub.w	r3, r0, r8
 8011c36:	fa09 f303 	lsl.w	r3, r9, r3
 8011c3a:	4313      	orrs	r3, r2
 8011c3c:	9304      	str	r3, [sp, #16]
 8011c3e:	46a2      	mov	sl, r4
 8011c40:	e7d2      	b.n	8011be8 <_svfiprintf_r+0xa0>
 8011c42:	9b03      	ldr	r3, [sp, #12]
 8011c44:	1d19      	adds	r1, r3, #4
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	9103      	str	r1, [sp, #12]
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	bfbb      	ittet	lt
 8011c4e:	425b      	neglt	r3, r3
 8011c50:	f042 0202 	orrlt.w	r2, r2, #2
 8011c54:	9307      	strge	r3, [sp, #28]
 8011c56:	9307      	strlt	r3, [sp, #28]
 8011c58:	bfb8      	it	lt
 8011c5a:	9204      	strlt	r2, [sp, #16]
 8011c5c:	7823      	ldrb	r3, [r4, #0]
 8011c5e:	2b2e      	cmp	r3, #46	@ 0x2e
 8011c60:	d10a      	bne.n	8011c78 <_svfiprintf_r+0x130>
 8011c62:	7863      	ldrb	r3, [r4, #1]
 8011c64:	2b2a      	cmp	r3, #42	@ 0x2a
 8011c66:	d132      	bne.n	8011cce <_svfiprintf_r+0x186>
 8011c68:	9b03      	ldr	r3, [sp, #12]
 8011c6a:	1d1a      	adds	r2, r3, #4
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	9203      	str	r2, [sp, #12]
 8011c70:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011c74:	3402      	adds	r4, #2
 8011c76:	9305      	str	r3, [sp, #20]
 8011c78:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011d3c <_svfiprintf_r+0x1f4>
 8011c7c:	7821      	ldrb	r1, [r4, #0]
 8011c7e:	2203      	movs	r2, #3
 8011c80:	4650      	mov	r0, sl
 8011c82:	f7ee fac5 	bl	8000210 <memchr>
 8011c86:	b138      	cbz	r0, 8011c98 <_svfiprintf_r+0x150>
 8011c88:	9b04      	ldr	r3, [sp, #16]
 8011c8a:	eba0 000a 	sub.w	r0, r0, sl
 8011c8e:	2240      	movs	r2, #64	@ 0x40
 8011c90:	4082      	lsls	r2, r0
 8011c92:	4313      	orrs	r3, r2
 8011c94:	3401      	adds	r4, #1
 8011c96:	9304      	str	r3, [sp, #16]
 8011c98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c9c:	4824      	ldr	r0, [pc, #144]	@ (8011d30 <_svfiprintf_r+0x1e8>)
 8011c9e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011ca2:	2206      	movs	r2, #6
 8011ca4:	f7ee fab4 	bl	8000210 <memchr>
 8011ca8:	2800      	cmp	r0, #0
 8011caa:	d036      	beq.n	8011d1a <_svfiprintf_r+0x1d2>
 8011cac:	4b21      	ldr	r3, [pc, #132]	@ (8011d34 <_svfiprintf_r+0x1ec>)
 8011cae:	bb1b      	cbnz	r3, 8011cf8 <_svfiprintf_r+0x1b0>
 8011cb0:	9b03      	ldr	r3, [sp, #12]
 8011cb2:	3307      	adds	r3, #7
 8011cb4:	f023 0307 	bic.w	r3, r3, #7
 8011cb8:	3308      	adds	r3, #8
 8011cba:	9303      	str	r3, [sp, #12]
 8011cbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011cbe:	4433      	add	r3, r6
 8011cc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8011cc2:	e76a      	b.n	8011b9a <_svfiprintf_r+0x52>
 8011cc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8011cc8:	460c      	mov	r4, r1
 8011cca:	2001      	movs	r0, #1
 8011ccc:	e7a8      	b.n	8011c20 <_svfiprintf_r+0xd8>
 8011cce:	2300      	movs	r3, #0
 8011cd0:	3401      	adds	r4, #1
 8011cd2:	9305      	str	r3, [sp, #20]
 8011cd4:	4619      	mov	r1, r3
 8011cd6:	f04f 0c0a 	mov.w	ip, #10
 8011cda:	4620      	mov	r0, r4
 8011cdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011ce0:	3a30      	subs	r2, #48	@ 0x30
 8011ce2:	2a09      	cmp	r2, #9
 8011ce4:	d903      	bls.n	8011cee <_svfiprintf_r+0x1a6>
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d0c6      	beq.n	8011c78 <_svfiprintf_r+0x130>
 8011cea:	9105      	str	r1, [sp, #20]
 8011cec:	e7c4      	b.n	8011c78 <_svfiprintf_r+0x130>
 8011cee:	fb0c 2101 	mla	r1, ip, r1, r2
 8011cf2:	4604      	mov	r4, r0
 8011cf4:	2301      	movs	r3, #1
 8011cf6:	e7f0      	b.n	8011cda <_svfiprintf_r+0x192>
 8011cf8:	ab03      	add	r3, sp, #12
 8011cfa:	9300      	str	r3, [sp, #0]
 8011cfc:	462a      	mov	r2, r5
 8011cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8011d38 <_svfiprintf_r+0x1f0>)
 8011d00:	a904      	add	r1, sp, #16
 8011d02:	4638      	mov	r0, r7
 8011d04:	f3af 8000 	nop.w
 8011d08:	1c42      	adds	r2, r0, #1
 8011d0a:	4606      	mov	r6, r0
 8011d0c:	d1d6      	bne.n	8011cbc <_svfiprintf_r+0x174>
 8011d0e:	89ab      	ldrh	r3, [r5, #12]
 8011d10:	065b      	lsls	r3, r3, #25
 8011d12:	f53f af2d 	bmi.w	8011b70 <_svfiprintf_r+0x28>
 8011d16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011d18:	e72c      	b.n	8011b74 <_svfiprintf_r+0x2c>
 8011d1a:	ab03      	add	r3, sp, #12
 8011d1c:	9300      	str	r3, [sp, #0]
 8011d1e:	462a      	mov	r2, r5
 8011d20:	4b05      	ldr	r3, [pc, #20]	@ (8011d38 <_svfiprintf_r+0x1f0>)
 8011d22:	a904      	add	r1, sp, #16
 8011d24:	4638      	mov	r0, r7
 8011d26:	f000 f879 	bl	8011e1c <_printf_i>
 8011d2a:	e7ed      	b.n	8011d08 <_svfiprintf_r+0x1c0>
 8011d2c:	08012649 	.word	0x08012649
 8011d30:	08012653 	.word	0x08012653
 8011d34:	00000000 	.word	0x00000000
 8011d38:	08011a91 	.word	0x08011a91
 8011d3c:	0801264f 	.word	0x0801264f

08011d40 <_printf_common>:
 8011d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d44:	4616      	mov	r6, r2
 8011d46:	4698      	mov	r8, r3
 8011d48:	688a      	ldr	r2, [r1, #8]
 8011d4a:	690b      	ldr	r3, [r1, #16]
 8011d4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011d50:	4293      	cmp	r3, r2
 8011d52:	bfb8      	it	lt
 8011d54:	4613      	movlt	r3, r2
 8011d56:	6033      	str	r3, [r6, #0]
 8011d58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011d5c:	4607      	mov	r7, r0
 8011d5e:	460c      	mov	r4, r1
 8011d60:	b10a      	cbz	r2, 8011d66 <_printf_common+0x26>
 8011d62:	3301      	adds	r3, #1
 8011d64:	6033      	str	r3, [r6, #0]
 8011d66:	6823      	ldr	r3, [r4, #0]
 8011d68:	0699      	lsls	r1, r3, #26
 8011d6a:	bf42      	ittt	mi
 8011d6c:	6833      	ldrmi	r3, [r6, #0]
 8011d6e:	3302      	addmi	r3, #2
 8011d70:	6033      	strmi	r3, [r6, #0]
 8011d72:	6825      	ldr	r5, [r4, #0]
 8011d74:	f015 0506 	ands.w	r5, r5, #6
 8011d78:	d106      	bne.n	8011d88 <_printf_common+0x48>
 8011d7a:	f104 0a19 	add.w	sl, r4, #25
 8011d7e:	68e3      	ldr	r3, [r4, #12]
 8011d80:	6832      	ldr	r2, [r6, #0]
 8011d82:	1a9b      	subs	r3, r3, r2
 8011d84:	42ab      	cmp	r3, r5
 8011d86:	dc26      	bgt.n	8011dd6 <_printf_common+0x96>
 8011d88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011d8c:	6822      	ldr	r2, [r4, #0]
 8011d8e:	3b00      	subs	r3, #0
 8011d90:	bf18      	it	ne
 8011d92:	2301      	movne	r3, #1
 8011d94:	0692      	lsls	r2, r2, #26
 8011d96:	d42b      	bmi.n	8011df0 <_printf_common+0xb0>
 8011d98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011d9c:	4641      	mov	r1, r8
 8011d9e:	4638      	mov	r0, r7
 8011da0:	47c8      	blx	r9
 8011da2:	3001      	adds	r0, #1
 8011da4:	d01e      	beq.n	8011de4 <_printf_common+0xa4>
 8011da6:	6823      	ldr	r3, [r4, #0]
 8011da8:	6922      	ldr	r2, [r4, #16]
 8011daa:	f003 0306 	and.w	r3, r3, #6
 8011dae:	2b04      	cmp	r3, #4
 8011db0:	bf02      	ittt	eq
 8011db2:	68e5      	ldreq	r5, [r4, #12]
 8011db4:	6833      	ldreq	r3, [r6, #0]
 8011db6:	1aed      	subeq	r5, r5, r3
 8011db8:	68a3      	ldr	r3, [r4, #8]
 8011dba:	bf0c      	ite	eq
 8011dbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011dc0:	2500      	movne	r5, #0
 8011dc2:	4293      	cmp	r3, r2
 8011dc4:	bfc4      	itt	gt
 8011dc6:	1a9b      	subgt	r3, r3, r2
 8011dc8:	18ed      	addgt	r5, r5, r3
 8011dca:	2600      	movs	r6, #0
 8011dcc:	341a      	adds	r4, #26
 8011dce:	42b5      	cmp	r5, r6
 8011dd0:	d11a      	bne.n	8011e08 <_printf_common+0xc8>
 8011dd2:	2000      	movs	r0, #0
 8011dd4:	e008      	b.n	8011de8 <_printf_common+0xa8>
 8011dd6:	2301      	movs	r3, #1
 8011dd8:	4652      	mov	r2, sl
 8011dda:	4641      	mov	r1, r8
 8011ddc:	4638      	mov	r0, r7
 8011dde:	47c8      	blx	r9
 8011de0:	3001      	adds	r0, #1
 8011de2:	d103      	bne.n	8011dec <_printf_common+0xac>
 8011de4:	f04f 30ff 	mov.w	r0, #4294967295
 8011de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011dec:	3501      	adds	r5, #1
 8011dee:	e7c6      	b.n	8011d7e <_printf_common+0x3e>
 8011df0:	18e1      	adds	r1, r4, r3
 8011df2:	1c5a      	adds	r2, r3, #1
 8011df4:	2030      	movs	r0, #48	@ 0x30
 8011df6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011dfa:	4422      	add	r2, r4
 8011dfc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011e00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011e04:	3302      	adds	r3, #2
 8011e06:	e7c7      	b.n	8011d98 <_printf_common+0x58>
 8011e08:	2301      	movs	r3, #1
 8011e0a:	4622      	mov	r2, r4
 8011e0c:	4641      	mov	r1, r8
 8011e0e:	4638      	mov	r0, r7
 8011e10:	47c8      	blx	r9
 8011e12:	3001      	adds	r0, #1
 8011e14:	d0e6      	beq.n	8011de4 <_printf_common+0xa4>
 8011e16:	3601      	adds	r6, #1
 8011e18:	e7d9      	b.n	8011dce <_printf_common+0x8e>
	...

08011e1c <_printf_i>:
 8011e1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011e20:	7e0f      	ldrb	r7, [r1, #24]
 8011e22:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011e24:	2f78      	cmp	r7, #120	@ 0x78
 8011e26:	4691      	mov	r9, r2
 8011e28:	4680      	mov	r8, r0
 8011e2a:	460c      	mov	r4, r1
 8011e2c:	469a      	mov	sl, r3
 8011e2e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011e32:	d807      	bhi.n	8011e44 <_printf_i+0x28>
 8011e34:	2f62      	cmp	r7, #98	@ 0x62
 8011e36:	d80a      	bhi.n	8011e4e <_printf_i+0x32>
 8011e38:	2f00      	cmp	r7, #0
 8011e3a:	f000 80d2 	beq.w	8011fe2 <_printf_i+0x1c6>
 8011e3e:	2f58      	cmp	r7, #88	@ 0x58
 8011e40:	f000 80b9 	beq.w	8011fb6 <_printf_i+0x19a>
 8011e44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011e48:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011e4c:	e03a      	b.n	8011ec4 <_printf_i+0xa8>
 8011e4e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011e52:	2b15      	cmp	r3, #21
 8011e54:	d8f6      	bhi.n	8011e44 <_printf_i+0x28>
 8011e56:	a101      	add	r1, pc, #4	@ (adr r1, 8011e5c <_printf_i+0x40>)
 8011e58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011e5c:	08011eb5 	.word	0x08011eb5
 8011e60:	08011ec9 	.word	0x08011ec9
 8011e64:	08011e45 	.word	0x08011e45
 8011e68:	08011e45 	.word	0x08011e45
 8011e6c:	08011e45 	.word	0x08011e45
 8011e70:	08011e45 	.word	0x08011e45
 8011e74:	08011ec9 	.word	0x08011ec9
 8011e78:	08011e45 	.word	0x08011e45
 8011e7c:	08011e45 	.word	0x08011e45
 8011e80:	08011e45 	.word	0x08011e45
 8011e84:	08011e45 	.word	0x08011e45
 8011e88:	08011fc9 	.word	0x08011fc9
 8011e8c:	08011ef3 	.word	0x08011ef3
 8011e90:	08011f83 	.word	0x08011f83
 8011e94:	08011e45 	.word	0x08011e45
 8011e98:	08011e45 	.word	0x08011e45
 8011e9c:	08011feb 	.word	0x08011feb
 8011ea0:	08011e45 	.word	0x08011e45
 8011ea4:	08011ef3 	.word	0x08011ef3
 8011ea8:	08011e45 	.word	0x08011e45
 8011eac:	08011e45 	.word	0x08011e45
 8011eb0:	08011f8b 	.word	0x08011f8b
 8011eb4:	6833      	ldr	r3, [r6, #0]
 8011eb6:	1d1a      	adds	r2, r3, #4
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	6032      	str	r2, [r6, #0]
 8011ebc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011ec0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011ec4:	2301      	movs	r3, #1
 8011ec6:	e09d      	b.n	8012004 <_printf_i+0x1e8>
 8011ec8:	6833      	ldr	r3, [r6, #0]
 8011eca:	6820      	ldr	r0, [r4, #0]
 8011ecc:	1d19      	adds	r1, r3, #4
 8011ece:	6031      	str	r1, [r6, #0]
 8011ed0:	0606      	lsls	r6, r0, #24
 8011ed2:	d501      	bpl.n	8011ed8 <_printf_i+0xbc>
 8011ed4:	681d      	ldr	r5, [r3, #0]
 8011ed6:	e003      	b.n	8011ee0 <_printf_i+0xc4>
 8011ed8:	0645      	lsls	r5, r0, #25
 8011eda:	d5fb      	bpl.n	8011ed4 <_printf_i+0xb8>
 8011edc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011ee0:	2d00      	cmp	r5, #0
 8011ee2:	da03      	bge.n	8011eec <_printf_i+0xd0>
 8011ee4:	232d      	movs	r3, #45	@ 0x2d
 8011ee6:	426d      	negs	r5, r5
 8011ee8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011eec:	4859      	ldr	r0, [pc, #356]	@ (8012054 <_printf_i+0x238>)
 8011eee:	230a      	movs	r3, #10
 8011ef0:	e011      	b.n	8011f16 <_printf_i+0xfa>
 8011ef2:	6821      	ldr	r1, [r4, #0]
 8011ef4:	6833      	ldr	r3, [r6, #0]
 8011ef6:	0608      	lsls	r0, r1, #24
 8011ef8:	f853 5b04 	ldr.w	r5, [r3], #4
 8011efc:	d402      	bmi.n	8011f04 <_printf_i+0xe8>
 8011efe:	0649      	lsls	r1, r1, #25
 8011f00:	bf48      	it	mi
 8011f02:	b2ad      	uxthmi	r5, r5
 8011f04:	2f6f      	cmp	r7, #111	@ 0x6f
 8011f06:	4853      	ldr	r0, [pc, #332]	@ (8012054 <_printf_i+0x238>)
 8011f08:	6033      	str	r3, [r6, #0]
 8011f0a:	bf14      	ite	ne
 8011f0c:	230a      	movne	r3, #10
 8011f0e:	2308      	moveq	r3, #8
 8011f10:	2100      	movs	r1, #0
 8011f12:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011f16:	6866      	ldr	r6, [r4, #4]
 8011f18:	60a6      	str	r6, [r4, #8]
 8011f1a:	2e00      	cmp	r6, #0
 8011f1c:	bfa2      	ittt	ge
 8011f1e:	6821      	ldrge	r1, [r4, #0]
 8011f20:	f021 0104 	bicge.w	r1, r1, #4
 8011f24:	6021      	strge	r1, [r4, #0]
 8011f26:	b90d      	cbnz	r5, 8011f2c <_printf_i+0x110>
 8011f28:	2e00      	cmp	r6, #0
 8011f2a:	d04b      	beq.n	8011fc4 <_printf_i+0x1a8>
 8011f2c:	4616      	mov	r6, r2
 8011f2e:	fbb5 f1f3 	udiv	r1, r5, r3
 8011f32:	fb03 5711 	mls	r7, r3, r1, r5
 8011f36:	5dc7      	ldrb	r7, [r0, r7]
 8011f38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011f3c:	462f      	mov	r7, r5
 8011f3e:	42bb      	cmp	r3, r7
 8011f40:	460d      	mov	r5, r1
 8011f42:	d9f4      	bls.n	8011f2e <_printf_i+0x112>
 8011f44:	2b08      	cmp	r3, #8
 8011f46:	d10b      	bne.n	8011f60 <_printf_i+0x144>
 8011f48:	6823      	ldr	r3, [r4, #0]
 8011f4a:	07df      	lsls	r7, r3, #31
 8011f4c:	d508      	bpl.n	8011f60 <_printf_i+0x144>
 8011f4e:	6923      	ldr	r3, [r4, #16]
 8011f50:	6861      	ldr	r1, [r4, #4]
 8011f52:	4299      	cmp	r1, r3
 8011f54:	bfde      	ittt	le
 8011f56:	2330      	movle	r3, #48	@ 0x30
 8011f58:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011f5c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011f60:	1b92      	subs	r2, r2, r6
 8011f62:	6122      	str	r2, [r4, #16]
 8011f64:	f8cd a000 	str.w	sl, [sp]
 8011f68:	464b      	mov	r3, r9
 8011f6a:	aa03      	add	r2, sp, #12
 8011f6c:	4621      	mov	r1, r4
 8011f6e:	4640      	mov	r0, r8
 8011f70:	f7ff fee6 	bl	8011d40 <_printf_common>
 8011f74:	3001      	adds	r0, #1
 8011f76:	d14a      	bne.n	801200e <_printf_i+0x1f2>
 8011f78:	f04f 30ff 	mov.w	r0, #4294967295
 8011f7c:	b004      	add	sp, #16
 8011f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f82:	6823      	ldr	r3, [r4, #0]
 8011f84:	f043 0320 	orr.w	r3, r3, #32
 8011f88:	6023      	str	r3, [r4, #0]
 8011f8a:	4833      	ldr	r0, [pc, #204]	@ (8012058 <_printf_i+0x23c>)
 8011f8c:	2778      	movs	r7, #120	@ 0x78
 8011f8e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011f92:	6823      	ldr	r3, [r4, #0]
 8011f94:	6831      	ldr	r1, [r6, #0]
 8011f96:	061f      	lsls	r7, r3, #24
 8011f98:	f851 5b04 	ldr.w	r5, [r1], #4
 8011f9c:	d402      	bmi.n	8011fa4 <_printf_i+0x188>
 8011f9e:	065f      	lsls	r7, r3, #25
 8011fa0:	bf48      	it	mi
 8011fa2:	b2ad      	uxthmi	r5, r5
 8011fa4:	6031      	str	r1, [r6, #0]
 8011fa6:	07d9      	lsls	r1, r3, #31
 8011fa8:	bf44      	itt	mi
 8011faa:	f043 0320 	orrmi.w	r3, r3, #32
 8011fae:	6023      	strmi	r3, [r4, #0]
 8011fb0:	b11d      	cbz	r5, 8011fba <_printf_i+0x19e>
 8011fb2:	2310      	movs	r3, #16
 8011fb4:	e7ac      	b.n	8011f10 <_printf_i+0xf4>
 8011fb6:	4827      	ldr	r0, [pc, #156]	@ (8012054 <_printf_i+0x238>)
 8011fb8:	e7e9      	b.n	8011f8e <_printf_i+0x172>
 8011fba:	6823      	ldr	r3, [r4, #0]
 8011fbc:	f023 0320 	bic.w	r3, r3, #32
 8011fc0:	6023      	str	r3, [r4, #0]
 8011fc2:	e7f6      	b.n	8011fb2 <_printf_i+0x196>
 8011fc4:	4616      	mov	r6, r2
 8011fc6:	e7bd      	b.n	8011f44 <_printf_i+0x128>
 8011fc8:	6833      	ldr	r3, [r6, #0]
 8011fca:	6825      	ldr	r5, [r4, #0]
 8011fcc:	6961      	ldr	r1, [r4, #20]
 8011fce:	1d18      	adds	r0, r3, #4
 8011fd0:	6030      	str	r0, [r6, #0]
 8011fd2:	062e      	lsls	r6, r5, #24
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	d501      	bpl.n	8011fdc <_printf_i+0x1c0>
 8011fd8:	6019      	str	r1, [r3, #0]
 8011fda:	e002      	b.n	8011fe2 <_printf_i+0x1c6>
 8011fdc:	0668      	lsls	r0, r5, #25
 8011fde:	d5fb      	bpl.n	8011fd8 <_printf_i+0x1bc>
 8011fe0:	8019      	strh	r1, [r3, #0]
 8011fe2:	2300      	movs	r3, #0
 8011fe4:	6123      	str	r3, [r4, #16]
 8011fe6:	4616      	mov	r6, r2
 8011fe8:	e7bc      	b.n	8011f64 <_printf_i+0x148>
 8011fea:	6833      	ldr	r3, [r6, #0]
 8011fec:	1d1a      	adds	r2, r3, #4
 8011fee:	6032      	str	r2, [r6, #0]
 8011ff0:	681e      	ldr	r6, [r3, #0]
 8011ff2:	6862      	ldr	r2, [r4, #4]
 8011ff4:	2100      	movs	r1, #0
 8011ff6:	4630      	mov	r0, r6
 8011ff8:	f7ee f90a 	bl	8000210 <memchr>
 8011ffc:	b108      	cbz	r0, 8012002 <_printf_i+0x1e6>
 8011ffe:	1b80      	subs	r0, r0, r6
 8012000:	6060      	str	r0, [r4, #4]
 8012002:	6863      	ldr	r3, [r4, #4]
 8012004:	6123      	str	r3, [r4, #16]
 8012006:	2300      	movs	r3, #0
 8012008:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801200c:	e7aa      	b.n	8011f64 <_printf_i+0x148>
 801200e:	6923      	ldr	r3, [r4, #16]
 8012010:	4632      	mov	r2, r6
 8012012:	4649      	mov	r1, r9
 8012014:	4640      	mov	r0, r8
 8012016:	47d0      	blx	sl
 8012018:	3001      	adds	r0, #1
 801201a:	d0ad      	beq.n	8011f78 <_printf_i+0x15c>
 801201c:	6823      	ldr	r3, [r4, #0]
 801201e:	079b      	lsls	r3, r3, #30
 8012020:	d413      	bmi.n	801204a <_printf_i+0x22e>
 8012022:	68e0      	ldr	r0, [r4, #12]
 8012024:	9b03      	ldr	r3, [sp, #12]
 8012026:	4298      	cmp	r0, r3
 8012028:	bfb8      	it	lt
 801202a:	4618      	movlt	r0, r3
 801202c:	e7a6      	b.n	8011f7c <_printf_i+0x160>
 801202e:	2301      	movs	r3, #1
 8012030:	4632      	mov	r2, r6
 8012032:	4649      	mov	r1, r9
 8012034:	4640      	mov	r0, r8
 8012036:	47d0      	blx	sl
 8012038:	3001      	adds	r0, #1
 801203a:	d09d      	beq.n	8011f78 <_printf_i+0x15c>
 801203c:	3501      	adds	r5, #1
 801203e:	68e3      	ldr	r3, [r4, #12]
 8012040:	9903      	ldr	r1, [sp, #12]
 8012042:	1a5b      	subs	r3, r3, r1
 8012044:	42ab      	cmp	r3, r5
 8012046:	dcf2      	bgt.n	801202e <_printf_i+0x212>
 8012048:	e7eb      	b.n	8012022 <_printf_i+0x206>
 801204a:	2500      	movs	r5, #0
 801204c:	f104 0619 	add.w	r6, r4, #25
 8012050:	e7f5      	b.n	801203e <_printf_i+0x222>
 8012052:	bf00      	nop
 8012054:	0801265a 	.word	0x0801265a
 8012058:	0801266b 	.word	0x0801266b

0801205c <memmove>:
 801205c:	4288      	cmp	r0, r1
 801205e:	b510      	push	{r4, lr}
 8012060:	eb01 0402 	add.w	r4, r1, r2
 8012064:	d902      	bls.n	801206c <memmove+0x10>
 8012066:	4284      	cmp	r4, r0
 8012068:	4623      	mov	r3, r4
 801206a:	d807      	bhi.n	801207c <memmove+0x20>
 801206c:	1e43      	subs	r3, r0, #1
 801206e:	42a1      	cmp	r1, r4
 8012070:	d008      	beq.n	8012084 <memmove+0x28>
 8012072:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012076:	f803 2f01 	strb.w	r2, [r3, #1]!
 801207a:	e7f8      	b.n	801206e <memmove+0x12>
 801207c:	4402      	add	r2, r0
 801207e:	4601      	mov	r1, r0
 8012080:	428a      	cmp	r2, r1
 8012082:	d100      	bne.n	8012086 <memmove+0x2a>
 8012084:	bd10      	pop	{r4, pc}
 8012086:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801208a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801208e:	e7f7      	b.n	8012080 <memmove+0x24>

08012090 <_sbrk_r>:
 8012090:	b538      	push	{r3, r4, r5, lr}
 8012092:	4d06      	ldr	r5, [pc, #24]	@ (80120ac <_sbrk_r+0x1c>)
 8012094:	2300      	movs	r3, #0
 8012096:	4604      	mov	r4, r0
 8012098:	4608      	mov	r0, r1
 801209a:	602b      	str	r3, [r5, #0]
 801209c:	f7f5 fa8a 	bl	80075b4 <_sbrk>
 80120a0:	1c43      	adds	r3, r0, #1
 80120a2:	d102      	bne.n	80120aa <_sbrk_r+0x1a>
 80120a4:	682b      	ldr	r3, [r5, #0]
 80120a6:	b103      	cbz	r3, 80120aa <_sbrk_r+0x1a>
 80120a8:	6023      	str	r3, [r4, #0]
 80120aa:	bd38      	pop	{r3, r4, r5, pc}
 80120ac:	2000578c 	.word	0x2000578c

080120b0 <_realloc_r>:
 80120b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120b4:	4680      	mov	r8, r0
 80120b6:	4615      	mov	r5, r2
 80120b8:	460c      	mov	r4, r1
 80120ba:	b921      	cbnz	r1, 80120c6 <_realloc_r+0x16>
 80120bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80120c0:	4611      	mov	r1, r2
 80120c2:	f7ff bc59 	b.w	8011978 <_malloc_r>
 80120c6:	b92a      	cbnz	r2, 80120d4 <_realloc_r+0x24>
 80120c8:	f7ff fbea 	bl	80118a0 <_free_r>
 80120cc:	2400      	movs	r4, #0
 80120ce:	4620      	mov	r0, r4
 80120d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120d4:	f000 f81a 	bl	801210c <_malloc_usable_size_r>
 80120d8:	4285      	cmp	r5, r0
 80120da:	4606      	mov	r6, r0
 80120dc:	d802      	bhi.n	80120e4 <_realloc_r+0x34>
 80120de:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80120e2:	d8f4      	bhi.n	80120ce <_realloc_r+0x1e>
 80120e4:	4629      	mov	r1, r5
 80120e6:	4640      	mov	r0, r8
 80120e8:	f7ff fc46 	bl	8011978 <_malloc_r>
 80120ec:	4607      	mov	r7, r0
 80120ee:	2800      	cmp	r0, #0
 80120f0:	d0ec      	beq.n	80120cc <_realloc_r+0x1c>
 80120f2:	42b5      	cmp	r5, r6
 80120f4:	462a      	mov	r2, r5
 80120f6:	4621      	mov	r1, r4
 80120f8:	bf28      	it	cs
 80120fa:	4632      	movcs	r2, r6
 80120fc:	f7ff fbc2 	bl	8011884 <memcpy>
 8012100:	4621      	mov	r1, r4
 8012102:	4640      	mov	r0, r8
 8012104:	f7ff fbcc 	bl	80118a0 <_free_r>
 8012108:	463c      	mov	r4, r7
 801210a:	e7e0      	b.n	80120ce <_realloc_r+0x1e>

0801210c <_malloc_usable_size_r>:
 801210c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012110:	1f18      	subs	r0, r3, #4
 8012112:	2b00      	cmp	r3, #0
 8012114:	bfbc      	itt	lt
 8012116:	580b      	ldrlt	r3, [r1, r0]
 8012118:	18c0      	addlt	r0, r0, r3
 801211a:	4770      	bx	lr

0801211c <_init>:
 801211c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801211e:	bf00      	nop
 8012120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012122:	bc08      	pop	{r3}
 8012124:	469e      	mov	lr, r3
 8012126:	4770      	bx	lr

08012128 <_fini>:
 8012128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801212a:	bf00      	nop
 801212c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801212e:	bc08      	pop	{r3}
 8012130:	469e      	mov	lr, r3
 8012132:	4770      	bx	lr
